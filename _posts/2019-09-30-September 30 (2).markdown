---
layout: post
title:  "python with Flask (1)"
date:   2019-09-30 08:00:59
author: mollangzzang
categories: Web
tags:	backend Flask Python
cover:  "/assets/Flask.png"
---

## Flask

오늘 개발한 환경은 Python 3.7x & Anaconda Windows 통합팩으로 설치를 했다. 그리고 Anaconda 랑 연동 되는 IDE를 사용하기 위해서 Pycharm 을 선택했는데, 공식 홈페이지에 들어가면 따로 보이지 않고 기존의 파이참 주소 뒤에 `/promo/anaconda` 를 추가로 붙여주면 Anaconda 와 연동되는 Pycharm 홈페이지에 들어 갈 수 있다.

```
# 사용할 라이브러리 불러오기
from flask import Flask

# Flask 객체를 생성한다.
app = Flask(__name__)

# annotation @를 java에서 부르는 용어 decoration - python에서 부르는 용어
@app.route('/')

def index() :
    return 'hello!'

@app.route('/hello')
def test1() :
    return 'test1 function'

@app.route('/html')
def test2() : # 원래는 html 변수에 따로 할당을 해서 return 값으로 주지만 이렇게 주는 방법도 있다. 다만 매우 비효율적
    return '''
    <html>
        <head>
                <body>
                    <h1> Hello World</h1>
                </body>
        </head>
    </html>
    '''

# 서버 가동
# app.run(host='xxx.xxx.x.xx')
# 모든 IP에 대한 요청 보통은 귀찮아서 이걸로 많이 씀
app.run(host = '0.0.0.0')
```

`app.run(host = '123.123.12.11')` 와 같이 ip 주소를 넣어야 외부에서도 접속을 할 수 있게 된다. 만약 컴퓨터에 LAN 카드가 여러개 꼽혀 있는 경우
즉, 랜선이 여러개인 경우 Flask 의 경우 우리의 컴퓨터를 찾을 수 있는 ip 주소 하나를 할당해주어야 한다. 랜 카드마다 ip 주소가 다 다르기 때문.
127.0.0.1 은 자기 컴퓨터를 가리키는 것이기 떄문에 외부에서 접속이 안됨 자신의 ip 주소를 찾으려면, `cmd 에서 ipconfig로 ipv4 의 ip주소`를 줘야 접속 할수있음. 포트번호는 default 가 5000이며, 포트번호를 따로 설정하고 싶으면 다르게 삽입을 하면 된다. 내가 넣은 포트번호가 사용 가능한지의 여부는 실행했을 때 오류가 나지 않으면 사용 가능 한 것이다. 사용하지 못하는 포트 번호는 이미 사용중이라고 에러메세지가 뜬다.

```
from flask import Flask, render_template

# Flask 객체 생성
# template_folder : html 파일이 있는 디렉토리 경로이며, 따로 지정해주지 않으면 templates 라는 폴더에서 가져옴
app = Flask(__name__ , template_folder= 'view')

@app.route('/')
def index() :
    # html 파일로부터 html 데이터를 읽어온다.
    html = render_template('index.html')
    return html

# python 은 true , false가 대문자.
app.run('0.0.0.0', port=3000, debug=True) # python에서는 boolean 타입의 첫글자는 대문자로 해주어야 한다.
```

port 번호를 따로 준 모습이며, `debug = True` 로 주는 순간 서버를 다시 재가동 시키지 않아도 html 결과창을 새로고침만 해준다면 바로바로 고친 코드가 반영이 된다. 또한 template_foler 에 내가 저장한 html들의 폴더명을 지정해주면 해당 폴더에서 맞는 html 파일을 찾아오게 되는데 지정해주는 것이 귀찮다면, templates 폴더를 만들어서 html들을 저장해주면 된다. templates 가 default 설정이기 때문. 만약 내가 따로 지정하지 않고 templates 폴더 또한 없다면 오류가 나게 된다.


## python 의 각 변수들을 html에서 출력하기

**Main.py**
```
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index() :
    html = render_template('index.html')
    return html

@app.route('/jinja1')
def jinja1() :
    html = render_template('jinja1.html')
    return html

@app.route('/jinja2')
def jinja2():
    #전달할 데이터
    str1 = '문자열'
    int1 = 100
    double1 = 11.11
    boolean1 = True
    list1 = [10,20,30]
    dict1 = {'b1' : 100, 'b2' : 200}

    html = render_template('jinja2.html', a1 = str1, a2= int1 , a3 = double1 , a4 = boolean1, a5 = list1, a6 = dict1)
    return html

@app.route('/jinja3')
def jinja3() :
    html = render_template('jinja3.html' , a1=100, a2=[10, 20, 30])
    return html


app.run(host='0.0.0.0', port=3000, debug=True)
```

**index.html**
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <a href="/jinja1">주석</a> <br/>
    <a href="/jinja2">출력</a> <br/>
    <a href="/jinja3">제어</a> <br/>
</body>
</html>
```

**jinja1.html**
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <!--
        html의 주석
        브라우저로 전달된다

    -->
{#
    Jinja2의 주석.
    브라우저로 전달되지 않는다.
#}
</body>
</html>
```

**jinja2.html**

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <h3>a1 : {{a1}}</h3>
    <h3>a2 : {{a2}}</h3>
    <h3>a3 : {{a3}}</h3>
    <h3>a4 : {{a4}}</h3>
    <h3>a5[0] : {{a5[0]}}</h3>
    <h3>a5[1] : {{a5[1]}}</h3>
    <h3>a5[2] : {{a5[2]}}</h3>
    <h3>a6.b1 : {{a6.b1}}</h3>
    <h3>a6.b2 : {{a6.b2}}</h3>
</body>
</html>
```

**jinja3.html**
```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    {# if 문 #}
    {% if a1 == 100 %}
    <h3>a1은 100입니다.</h3>
    {% endif %}

    {% if a1 == 200 %}
    <h3>a1은 200입니다.</h3>
    {% endif %}

    {% if a1 == 10 %}
    <h3>a1은 10입니다.</h3>
    {% elif a1 == 100 %}
    <h3>
        a1은 100입니다.
    </h3>
    {% else %}
    <h3>a1은 10, 100 이 아닙니다.</h3>
    {% endif %}

    {# a2라는 이름으로 넘어온 리스트의 항목 개수만큼 반복한다.
     매회 반복 때마다 값이 v1으로 들어간다. #}
    {# loop.index : 1부터 시작하는 인덱스를 얻어올 수 있다. #}
    {# loop.index0 : 0부터 시작하는 인덱스를 얻어올 수 있다. #}
    {# loop.length : 전체 반복 횟수 -> 리스트가 관리하는 원소 갯수 #}
    {% for v1 in a2 %}
    <h3>v1 : {{v1}}</h3>
    <h3>{{loop.index}} , {{loop.index0}}, {{loop.length}}</h3>
    {% endfor %}
</body>
</html>
```

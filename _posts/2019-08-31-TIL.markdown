---
layout: post
title:  "2019-08-31 TIL"
date:   2019-08-31 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL OS
cover:  "/assets/TIL.png"
---

### 1.3 인터럽트

* 인터럽트는 기본적으로 처리기의 처리율을 향상시키기 위해서 제공된다.

예를 들자면 , 대부분의 입출력 장치는 처리기에 비교하면 훨씬 느리다. 따라서 프린터로 데이터를 전송한다고 가정했을 때, 매번 쓰기 연산 후에는 수행을 중지하고 프린터가 출력을 완료 하기 까지 유휴상태가 된다. 이러한 시간이 쌓이고 쌓이면 많은 시간을 낭비하게 된다.

* 인터럽트를 이용 할 경우 , 입출력 연산이 진행되는 동안 처리기는 다른 명령어를 수행시킬 수 있다.

외부 장치가 처리기로부터 데이터를 더 받아들일 준비가 된다면, 그 외부장치의 입출력 모듈은 인터럽트 요청 신호를 처리기로 보낸다. 이에 대한 반응으로 , 처리기는 수행중이던 프로그램의 작업을 보류한 뒤 해당 입출력 장치를 인터럽트 처리기 라고 불리는 프로그램으로 분기하며 , 장치에 대한 서비스를 한 뒤 보류했던 프로그램의 수행을 재개한다.

이러한 인터럽트 처리 과정은 처리기와 운영체제의 역할이며 , 사용자 프로그램은 딱히 인터럽트를 위한 어떠한 코드도 포함할 필요가 없다.

간단하게 생각하면 , 처리기는 인터럽트 발생여부를 검사하고 처리할 인터럽트가 없으면 반입단계로 진행하고 현재 프로그램의 다음 명령어를 가져오는 것이고 만약 처리할 인터럽트가 존재한다면 처리기는 현재 프로그램을 중지시키고 인터럽트 처리기 루틴을 수행하는 것이다.

간혹 인터럽트가 하나가 아닌 둘 이상 발생할 수도 있다. 중첩 인터럽트라고 하는 것인데, 이 경우 처리하는 방법으로는 두가지가 존재한다.

첫번째는 하나의 인터럽트를 처리하는 동안은 다른 인터럽트 요구 신호를 무시하는 것이다. 그리고 앞의 인터럽트를 처리했으면 프로그램으로 돌아가기전에 요구 신호를 다시 점검하고 존재하는 나머지 인터럽트를 똑같은 방법으로 순차적으로 수행하는 것이다. 

다만 이 방법의 단점은 상대적인 우선순위 또는 time-critical 요구를 전혀 고려하지 않고 있다는 것이다.

두번째는 인터럽트 간의 우선순위를 정의하고 인터럽트 작업을 수행 하던 도중 더 높은 우선순위의 인터럽트가 들어온다면 기존 수행하던 상태는 스택에 저장하고 더 높은 우선순위의 인터럽트에 인터럽트 당하는 것이다. 만약 높은 우선순위의 인터럽트 작업을 수행하던 도중 낮은 순위의 인터럽트 요청이 들어온다면 무시하고 마저 작업을 수행한다. 그리고 작업이 마무리 되었을 경우 우선순위를 따져서 수행하는 것이다.

### 1.4 메모리 계층 구조

메모리의 특징은 

- 접근시간이 짧을수록 비트당 비용이 높음

- 용량이 클수록 비트당 비용이 낮아짐

- 용량이 클수록 접근 시간이 길어짐

이 세가지를 동시에 고려하면 딜레마에 빠지게 된다. 성능이 뛰어나면 용량이 적고 비싸지기 때문이며 , 반대로 용량과 가격이 훌륭하면 성능이 뛰어나지 않게 되게 때문이다.

이러한 딜레마를 벗어던지기 위해서 필요한 것이 메모리 계층 구조를 채택하는 것이다.

피라미드 같은 구조를 가지고 있을 경우 아래로 내려 갈수록 아래와 같이 성립한다.

1. 비트당 비용감소

2. 용량 증가

3. 접근 시간 증가

4. 처리기에 의한 메모리 접근 횟수 감소

이러한 특성을 가지고 메모리 계층 구조가 성립하는 이유는 참조 지역성이라는 것 때문이다.

참조지역성이란,

간단하게 설명하자면, 메모리 참조에 있어서 집중적으로 참조가 이루어 지는 경향을 말하는데 참조된 메모리의 근처의 메모리를 참조하는 식이다. 또한 참조되었던 메모리는 높은 확률로 빠른 시간 내에 다시 참조 된다는 것을 말한다.
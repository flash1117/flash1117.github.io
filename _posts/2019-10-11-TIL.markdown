---
layout: post
title:  "2019-10-11 TIL"
date:   2019-10-11 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL DesignPattern
cover:  "/assets/TIL.png"
---

### Design Pattern

- 소프트웨어를 설계할 때 특정 맥락에서 자주 발생하는 고질적인 문제들이 또 발생 했을 때 재사용할 할 수 있는 훌륭한 해결책

- Don't reinvent the wheel! -> 바퀴를 다시 발명하지 마라!

- 이미 만들어져서 잘 되는 것을 처음부터 만들 필요가 없다는 뜻이다.

- 패턴이란,
    - 각기 다른 소프트웨어 모듈이나 기능을 가진 다양한 응용 소프트웨어 시스템들을 개발할 때도 서로 간에 공통되는 설계 문제가 존재하며 이를 처리하는 해결책 사이에도 공통점이 있다. 이러한 유사점을 **패턴**이라고 한다.

    - 패턴은 공통의 언어를 만들어주며 팀원 사이의 의사소통을 원활하게 해주는 아주 중요한 역할을 한다.

### Kinds of Design Pattern 

- **GoF (Gang of Fout) Design Pattern**
    - GoF 라 불리는 사람들
        - Erich Gamma, Richard Helm , Ralph Johnson, John Vissides
        - 소프트웨어 개발 영역에서 디자인 패턴을 구체화하고 체계화한 사람들
        - 23가지의 디자인 패턴을 정리하고 각각의 디자인 패턴을 생성 (Creational), 구조 (Structural) , 행위(Behavioral) 3가지로 분류한다.

- **GoF 디자인 패턴의 분류**

    |생성(Creational) 패턴|구조(Structural)패턴|행위(Behavioral) 패턴|
    |:---:|:---:|:---:|
    |추상팩토리(Abstract Factory)|어댑터(Adapter)|책임 연쇄 (Chain of Responsibility)|
    |빌더 (Builder)|브리지 (Bridge)|커맨드 (Command)|
    |팩토리 메서드 (Factory Method)|컴퍼지트 (Composite)|인터프리터(Interprter)|
    |프로토타입 (Prototype)|데코레이터 (Decorator)|이터레이터 (Iterator)|

1. 생성 패턴
    - 객체 생성에 관련된 패턴
    - 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.

2. 구조 패턴
    - 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
    - <span style="color:blue">Ex)</span> 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴이다.

3. 행위 패턴
    - 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴
    - 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 분배하는지, 또 그렇게 하면서도 객체 사이의 결합도를 최소화하는 것에 중점을 둔다.

### Signlethon Pattern

- 개념
    - 전역 변수를 사용하지 않고 **객체를 하나만 생성** 하도록 하며, 생성된 객체를 **어디에서든지 참조** 할 수 있도록 하는 패턴
    - 생성 패턴 중 하나
- 역할이 수행하는 작업
    - Singleton
        - 하나의 인스턴스 만을 생성하는 책임이 있으며, getInstance 메서드를 통해 모든 클라이언트에게 동일한 인스턴스를 반환하는 작업을 수행한다.

    - 예시
        - 프린터 관리자 만들기

### Strategy Pattern

- 개념
    - 행위를 클래스로 캡슐화해서 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 패턴
        - 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결 할 수 있도록 하는 디자인 패턴
    - 행위 패턴 중 하나
    - 즉, **전략을 쉽게 바꿀 수 있도록** 해주는 디자인 패턴이다.
        - **전략**이란,
            - 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등
    - 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 Strategy 패턴은 매우 유용하다.
- 역할이 수행하는 작업
    - Strategy
        - 인터페이스나 추상 클래스로 외부에서 동일한 방식으로 알고리즘을 호출하는 방법을 명시
    - ConcreteStrategy
        Strategy 패턴에서 명시한 알고리즘을 실제로 구현한 클래스
    - Context
        - Strategy 패턴을 이용하는 역할을 수행한다.
        - 필요에 따라 동적으로 구체적인 전략을 바꿀 수 있도록 setter method (집약 관계) 를 제공한다.

    - 예시
        - 로봇 만들기

### Template Method Pattern

- 개념
    - 어떤 작업을 처리하는 일부분을 서브 클래스로 캡슐화하여 전체 일을 수행하는 구조는 바꾸지 않으면서 특정 단계에서 수행하는 내역을 바꾸는 패턴
        - 즉, 전체적으로는 동일하면서 부분적으로는 다른 구문으로 구성된 메서드의 코드 중복을 최소화 할 경우 유용하다.
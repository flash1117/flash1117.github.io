---
layout: post
title:  "2019-10-15 TIL"
date:   2019-10-15 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Network
cover:  "/assets/TIL.png"
---

### Cookie & Session

- **HTTP Protocol 특징**
    - 비 연결 지향 (Connectionless)
        - 클라이언트가 Request를 서버에 보내고, 서버가 클라이언트에 요청에 맞는 response를 보내면 바로 연결을 끊는다.
    - 상태정보를 유지하지 않음 (Stateless)
        - 연결을 끊는 순간 클라이언트와 서버의 통신은 끝나며 상태 정보를 유지하지 않는다.

- **쿠키와 세션의 필요성**
    - HTTP 프로토콜은 위와 같은 특징으로 모든 요청 간 의존관계가 없다.
    - 즉, 현재 접속한 사용자가 이전에 접속했던 사용자와 같은 사용자인지 아닌지 알 수 있는 방법이 없다.
    - 계속해서 연결을 유지하지 않기 때문에 리소스 낭비가 줄어 드는 것이 큰 장점 이지만, 통신할 때마다 새로 연결을 하기 떄문에, 클라이언트는 매 요청마다 인증을 해야 한다는 단점이 있다.
    - 이전 요청과 현재 요청이 같은 사용자의 요청인지 알기 위해서는 상태를 유지해야 한다.
    - HTTP 프로토콜에서 상태를 유지하기 위한 기술이 **쿠키** 와 **세션**이다.

    - 그렇다면 **쿠키**란?
        - 클라이언트 로컬에 저장되는 키와 값이 들어있는 파일이다.
        - 이름 , 값, 유효 시간, 경로 등을 포함하고 있다.
        - 클라이언트의 상태 정보를 브라우저에 저장하여 참조한다.
    
        |구성요소|
        |:---:|
        |쿠키의 이름 (name)|
        |쿠키의 값 (value)|
        |쿠키의 만료시간 (Expires)|
        |쿠키를 전송할 도메인 이름 (Domain)|
        |쿠키를 전송할 경로 (Path)|
        |보안 연결 여부 (Secure)|
        |HttpOnly 여부(HttpOnly)|

        - 동작 방식

            a. 웹 브라우저가 서버에 요청
            b. 상태를 유지하고 싶은 값을 쿠키로 생성
            c. 서버가 응답할 때 HTTP 헤더(Set-Cookie)에 쿠키를 포함해서 전송
            `Set-Cookie : id=doy`
            d. 전달받은 쿠키는 웹 브라우저에서 관리하고 있다가, 다음 요청 때 쿠키를 HTTP 헤더에 넣어서 전송
            `Cookie: id=doy`
            e. 서버에서는 쿠키 정보를 읽어 이전 상태 정보를 확인한 후 응답

        - 쿠키 사용 예
            - 아이디 , 비밀번호 저장
            - 쇼핑몰 장바구니

    - **세션(Session)** 이란?
        - 일정 시간 동안 같은 브라우저로부터 들어오는 요청을 하나의 상태로 보고 그 상태를 유지하는 기술

        - 웹 브라우저를 통해 서버에 접속한 이후부터 브라우저를 종료할 때까지 유지되는 상태이다.

        - 동작방식
            
            a. 웹 브라우저가 서버에 요청
            b. 서버가 해당 웹 브라우저(클라이언트)에 유일한 ID(Session ID)를 부여함
            c. 서버가 응답할 때 HTTP 헤더(Set-Cookie) 에 Session ID를 포함해서 전송 쿠키에 Session ID를 JSESSIONID 라는 이름으로 저장
            `Set-Cookie : JSESSIONID=xslei13f`
            d. 웹 브라우저는 이후 웹 브라우저를 닫기까지 다음 요청 때 부여된 Session ID가 담겨있는 쿠키를 HTTP 헤더에 넣어서 전송
            `Cookie : JSESSIONID=xslei13f`
            e. 서버는 세션 ID를 확인하고, 해당 세션에 관련된 정보를 확인한 후 응답
        - 세션 사용 예
            - 로그인

    - 세션도 쿠키를 사용하여 값을 주고 받으며, 클라이언트의 상태 정보를 유지한다. 즉, 상태 정보를 유지하는 수단은 **쿠키**이다.

- 쿠키와 세션의 차이점

    - 저장 위치
        - 쿠키 : 클라이언트
        - 세션 : 서버
    - 보안
        - 쿠키 : 클라이언트에 저장되므로 보안에 취약하다.
        - 세션 : 쿠키를 이용해 Session ID만 저장하고 이 값으로 구분해서 서버에서 처리하므로 비교적 보안성이 좋다.
    - 라이프사이클
        - 쿠키 : 만료시간에 따라 브라우저를 종료해도 계속해서 남아 있을 수 있다.
        - 세션 : 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제된다.
    - 속도
        - 쿠키 : 클라이언트에 저장되어서 서버에 요청시 빠르다.
        - 세션 : 실제 저장된 정보가 서버에 있으므로 서버의 처리가 필요해서 쿠키보다 느리다.

### REST와 RESTful의 개념

- REST 란
    - REST 의 정의
        - "Representational State Transfer" (대표적인 상태 전달)의 약자
        - 월드 와이드 웹(www)과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍쳐의 한 형식
            - REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에, 웹의 장점을 최대한 활용할 수 있는 아키텍쳐 스타일이다.
            - REST는 네트워크 상에서 Client와 Server 사이의 통신 방식 중 하나이다.

    - REST 의 구체적인 개념

        - HTTP URL(Uniform Resource Identifier)을 통해 자원을 명시하고, HTTP Method(Post, GET, Put, Delete)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.

        - 즉, REST는 자원 기반 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐를 말한다.

        - 웹 사이트의 이미지, 텍스트 , DB 내용 등의 모든 자원에 고유한 ID인 HTTP URL을 부여한다.
    - REST 장단점

        - 장점
            - 여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화 해준다.
            - Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.
            - HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.
            
        - 단점
            - 브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.
            - 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.
                - PUT, DELETE를 사용하지 못하는 점
                - pushState를 지원하지 않는 점

    - REST 가 필요한 이유
        - 애플리케이션 분리 및 통합
        - 다양한 클라이언트의 등장
        - 최근의 서버 프로그램은 다양한 브라우저와 안드로이드 폰, 아이폰 과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.

    - REST 구성 요소

        a. 자원 (Resource) : URL
            - 모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.
            - 자원을 구별하는 ID는 '/groups/:group_id' 와 같은 HTTP URL이다.
            - Client는 URL을 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.

        b. 행위(Verb): HTTP Method
            - HTTP 프로토콜의 Method를 사용한다.
            - HTTP 프로토콜은 GET, POST, PUT, DELETE, HEAD 와 같은 메서드를 제공한다.

        c. 표현 (Representation of Resource)
            - Client가 자원의 상태(정보)에 대한 조작을 요청하면 Server 는 이에 적절한 응답(Representation)을 보낸다.
            - REST에서 하나의 자원은 JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 질 수 있다.
            - JSON 혹은 XML을 통해 데이터를 주고 받는 것이 일반적이다.

    - REST 특징
        a. Server - Client (서버 - 클라이언트 구조)
        b. Stateless (무상태)
        c. Cacheable (캐시 처리 기능)
        d. Layered System (계층화)
        e. Code On Demand (optional)
        f. Uniform Interface (인터페이스 일관성)

- REST API

    - REST API 의 정의
        - REST 기반으로 서비스 API를 구현한 것
        - 최근 OpenAPI (누구나 사용할 수 있도록 공개된 API. 예를 들어, 구글 맵 , 공공 데이터 등) , 마이크로 서비스 (하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍쳐) 등을 제공하는 업체 대부분은 REST API를 제공한다.

    - REST API 특징
        - 사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.
        - REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램언어로 클라이언트, 서버를 구현할 수 있다.
        - 즉, REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다.

    - REST API 설계 기본 규칙
        a. URI는 정보의 자원을 표현해야 한다.
            - resource는 동사보다는 명사를 사용한다.
            - resource는 영어 소문자 복수형을 사용하여 표현한다.
            - Ex) `GET /Member/1` -> `Get/Memebers/1`
        b. 자원에 대한 행위는 HTTP Method(GET, PUT, POST, DELETE 등)로 표현한다.
            - URI에 HTTP Method가 들어가면 안된다.
            - Ex) `GET/members/delete/1` -> `DELETE/members/1`
            - URI에 행위에 대한 동사 표현이 들어가면 안된다.
            - Ex) `GET/members/show/1` -> `GET/members/1`
            - Ex) `GET/members/insert/2` -> `POST/members/2`

    - REST API 설계 규칙
        a. **'/'**는 계층 관계를 나타내는데 사용한다.
            - Ex) `http://restapi.example.com/houses/apartments`
        b. URI 마지막 문자로 **/** 는 포함하지 않는다.
            - URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.
            - REST API는 분명한 URI를 만들어 통신을 해야하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 '/' 를 사용하지 않는다.
        c. 하이픈 '-' 은 URI 가독성을 높이는데 사용
            - 불가피하게 긴 URI 경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.
        d. '_' 밑줄은 URI에 사용하지 않는다.
            - 밑줄은 보기 어렵거나 밑줄 떄문에 문자가 가려지기도 하므로 가독성을 위해 사용하지 않는다.
        e. URI 경로에는 소문자가 적합하다
            - URI 경로에 대문자 사용은 피하도록 한다.
            - RFC 3986 (URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문
        f. 파일 확장자는 URI에 포함하지 않는다.
            - REST API에서는 메세지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.
            - Accept header를 사용한다.
            - Ex) `GET /members/soccer/345/photo HTTP/1.1 Host:restapi.example.com Accept : image/jpg` - 맞는 표현
        g. 리소스 간에는 연관 관계가 있는 경우
            - /리소스명/리소스ID/관계가 있는 다른 리소스명
            - Ex) `GET : /users/{userid}/devices (일반적으로 소유 'has'의 관계를 표현할 때)`
        h. :id는 하나의 특정 resource를 나타내는 고유값
            - Ex) student를 생성하는 route:POST/students
            - Ex) id=12인 student를 삭제하는 route:DELETE/students/12
- RESTful
    - RESTful의 개념
        - RESTful은 일반적으로 REST라는 아키텍쳐를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어이다.
            - 즉, REST의 원리를 따르는 시스템은 RESTful 이라는 용어로 지칭된다.
        - RESTful은 REST를 REST 답게 쓰기 위한 방법으로, 누군가 공식적으로 발표한 것은 아니다.
    - Restful의 목적
        - 이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것.
        - RESTful API를 구현하는 근본적인 목적이 퍼포먼스 향상에 있는게 아니라, 일반적인 컨벤션을 통한 API의 이해도 및 호환성을 높이는게 주 동기이니, 퍼포먼스가 중요한 상황에서는 굳이 RESTful API를 구현할 필요가 없다.
    - RESTful 하지 못한 경우
        - CRUD 기능을 모두 POST 로만 처리하는 API
        - route에 resource, id 외의 정보가 들어가는 경우        



---
layout: post
title: "신입 개발자 면접질문 준비 - 데이터베이스"
date: 2020-11-10 13:00:59
author: mollangzzang
categories: TIL
tags: TIL
cover: "/assets/TIL.png"
---

## DB용어

기본키 (Primary Key) : 테이블에서 각 행을 유일하게 구분하는 Column-Key

외래키 (Foreign Key) : 하나의 테이블에 있는 Column으로는 그 의미를 표현할 수 없는 경우, 다른 테이블의 Primary-Key Column 값을 반드시 참조해야하는 Key

후보키 : 유일성, 최소성을 모두 만족하는 키

슈퍼키 : 튜플을 구별하기 위해 한 개 이상의 속성의 집합으로 이루어진 키, 유일성은 만족하고 최소성은 만족하지 않는 키

대체키 : 기본키를 제외한 후보키

ER(Entity-Relation) 모델 : 개체-관계 모델, 데이터베이스를 설계할 때 사용하는 모델 중 하나

## 참조 무결성이란

- 관계 데이터베이스 관계 모델에서 관련된 테이블 간의 일관성 (데이터 무결성)을 말한다.

- 사용자의 실수로 관련 데이터가 삭제되거나 수정되는 것을 막아준다.

- 참조 무결성의 제약 조건 : 기본 테이블에서 일치하는 필드가 기본키이거나 고유 인덱스를 갖고 있거나 관련 필드의 데이터 형식이 같아야 한다.

## DBMS란

- 다수의 컴퓨터 사용자들이 컴퓨터에 수록된 수많은 자료들을 쉽고 빠르게 추가, 수정, 삭제 할 수 있도록 해주는 시스템

- 데이터베이스 내의 정보를 검색하거나 정보를 저장하기 편리하고 효율적인 환경을 제공하는 것이 목적

- 대표적인 3가지 기능 : 구성, 조작, 제어

구성 : 데이터베이스에 저장 될 자료의 구조와 응용 프로그램이 그것을 이용하는 방식을 정의 (레코드 구조, 데이터 모형, 물리적 구조 등)

조작 : 사용자 도구에 따라 데이터베이스에 저장된 자료를 검색, 갱신, 삽입, 삭제 할 수 있도록 지원

제어 : 데이터베이스의 내용에 대한 일관성, 중복제거, 접근제어에 대한 기능을 지원

## DB Transaction

- 데이터의 무결성으로 인하여 데이터 작업시에 문제가 생기면, 데이터 작업을 하기 이전 시점으로 모든 데이터를 원상복구 하는 것을 말한다

- 즉, 모두 실행되거나 모두 실행되지 않거나를 뜻한다.

## DB Index

- 인덱스는 데이터를 논리적으로 정렬하여 검색과 정렬 작업의 속도를 높이기 위해 사용된다.

- 예를 들면, 책에서 가장 빨리 내용을 찾는 방법은 책의 뒤편의 색인을 보는 것

## DB 정규화가 필요한 이유

데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인한 공간낭비를 넘어 부작용을 초래할 수 있다. 이러한 부작용이 **이상(Anomaly)**라고 하는데, 이상현상으로는 삽입이상, 갱신이상, 삭제이상이 있다.

- 삽입이상

> 새 데이터를 삽입하기 위해 불필요한 데이터도 함께 삽입해야 하는 문제

학사정보시스템에서 학번과 과목번호의 조합이 기본키라고 가정하자. 그 때 수업을 하나도 수강하지 않은 학생이 있다고 한다면, 미수강 같은 쓸데없는 과목코드를 새로 만들어서 삽입을 해야한다.

- 갱신이상

> 중복 튜플 중 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제

- 삭제이상

> 튜플을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 데이터의 손실 문제

이론적으로 정규화를 수행하려면 속성들간의 관련성을 파악해야 하는데, 이 속성들간의 관련성을 **함수적 종속성**이라고 한다. 보통 하나의 릴레이션에는 하나의 함수적 종속성만이 존재하도록 정규화를 하게 된다.

## DB 정규화

> 관계형 데이터베이스 설계에서 중복을 최소화하게 데이터를 구조화하는 프로세스를 말한다

- 1 정규형 (1NF)

> 릴레이션에 속한 모든 속성의 도메인이 원자값으로만 구성되어 있으면 제 1 정규형에 속한다

- 2 정규형 (2NF)

> 제 1정규형에 속하면서, 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속되면 제 2 정규형

정규화 과정에서 주의할 점은 정규화를 통해 분해된 릴레이션들이 조인을 통해 원래의 구조로 복원될 수 있어야한다는 점.

2정규형을 만족해도 이행적 함수 종속을 해결해야 이상현상을 없앨 수 있다.

- 제 3 정규형 (3NF)

> 제 2 정규형에 속하면서, 기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속이 되지 않는 경우

**이행적 함수 종속** : X->Y 이고 Y->Z 이면 X->Z 이다. 이 때 Z는 X에 이행적으로 함수 종속된 상태이다.

3정규형을 만족해도, 후보키를 여러개 가지고 있는 릴레이션에서는 이상현상이 생길 수 있다.

- BCNF

## 비정규화

> 데이터를 중복시키거나 그룹핑함으로써 데이터베이스의 성능을 향상시키기 위한 기법

정규화는 중복된 데이터를 제거해서 성능 향상을 목표로 한다. 하지만 과도한 정규화로 인하여 테이블의 수가 증가하게 되면 다수의 JOIN이 발생하면서 성능 저하가 발생할 수 있다. 보통 정규화 과정을 모두 거친 다음 마지막 단계에서 비정규화를 실시한다. 단, 테이블을 합치는 것 만이 비정규화는 아니다.

## SQL

## NoSQL

## 트랜잭션 격리수준

> 동시에 여러 트랜잭션이 처리될 때, 트랜잭션끼리 얼마나 서로 고립되어 있는지를 나타내는 것이다.

아래로 내려갈수록 트랜잭션간 고립 정도가 높아지며, 성능이 떨어지는 것이 일반적이다. 일반적인 온라인 서비스에서는 READ COMMITED 또는 REPEATABLE READ 중 하나를 사용한다고 한다.

- READ UNCOMMITTED

READ UNCOMMITTED 격리수준에서는 어떤 트랜잭션의 변경내용이 COMMIT이나 ROLLBACK과 상관없이 다른 트랜잭션에서 보여진다. (Dirty Read 현상)

- READ COMMITTED

어떤 트랜잭션의 변경 내용이 COMMIT 되어야만 다른 트랜잭션에서 조회할 수 있다.
오라클 DBMS에서 기본으로 사용하고 있고, 온라인 서비스에서 가장 많이 선택되는 격리수준이다.

하나의 트랜잭션 내에서 똑같은 SELECT 쿼리를 실행했을 때 항상 같은 결과를 가져와야 하는 REPEATABLE READ의 정합성에 어긋난다.
주로 입금, 출금등의 금전적인 처리에서 발생한다.

- REPEATABLE READ

트랜잭션이 시작되기 전에 커밋된 내용에 대해서만 조회할 수 있는 격리수준이다.
MySQL DBMS에서 기본으로 사용하고 있고, 이 격리수준에서는 NON-REPETABLE READ 부정합이 발생하지 않는다.

MySQL에서는 트랜잭션마다 ID를 부여하여 트랜잭션 ID보다 작은 트랜잭션 번호에서 변경한 것만 읽게 한다.

Undo 공간에 백업해두고 실제 레코드 값을 변경한다.
백업된 데이터는 불필요하다고 판단하는 시점에 주기적으로 삭제한다.
Undo에 백업된 레코드가 많아지면 MySQL 서버의 처리 성능이 떨어질 수 있다.
이러한 변경방식은 MVCC(Multi Version Concurrency Control)라고 부른다.

Phantom Read 문제점이 있다. - 다른 트랜잭션에서 수행한 변경 작업에 의해 레코드가 보였다가 안보였다가 하는 현상 - 이를 방지하기 위해서는 쓰기 잠금을 걸어야 한다.

- SERIALIZABLE

가장 단순하고 가장 엄격한 격리수준이다.
InnoDB에서 기본적으로 순수한 SELECT 작업은 아무런 잠금을 걸지않고 동작하는데,
격리수준이 SERIALIZABLE일 경우 읽기 작업에도 공유 잠금을 설정하게 되고, 이러면 동시에 다른 트랜잭션에서 이 레코드를 변경하지 못하게 된다.
이러한 특성 때문에 동시처리 능력이 다른 격리수준보다 떨어지고, 성능저하가 발생하게 된다.

### Ref.

https://yaboong.github.io/database/2018/03/09/database-anomaly-and-functional-dependency/
https://yaboong.github.io/database/2018/03/10/database-normalization-2/
https://gist.github.com/singun/bdceaa99ad61ee1296204454f797d579
http://www.gurubee.net/lecture/3654
https://joont92.github.io/db/%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80-isolation-level/

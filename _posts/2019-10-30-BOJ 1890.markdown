---
layout: post
title:  "BOJ 9465"
date:   2019-10-30 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>

using namespace std;

int map[101][101];
long long dp[102][102];
int N;

bool isBoundary(int x, int y) {
	if (x<1 || y<1 || x>N || y>N) return false;
	return true;
}


void solve() {

	if(isBoundary(1+map[1][1], 1))
		dp[1 + map[1][1]][1] = 1;
	if(isBoundary(1, 1+map[1][1]))
		dp[1][1 + map[1][1]] = 1;

	for (int i = 1; i <= N; i++) {

		for (int j = 1; j <= N; j++) {

			if (dp[i][j] != 0) {
				int temp = map[i][j];
				if (temp != 0) {
					if (isBoundary(i + temp, j))
						dp[i + temp][j] += dp[i][j];
					if (isBoundary(i, j + temp))
						dp[i][j + temp] += dp[i][j];
				}
			}
		}
	}
	cout << dp[N][N] << "\n";
}

int main() {

	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	solve();

	return 0;
}
```

2^63-1 이 최대값인데, 나도 모르게 int 의 범위가 2^32까지 이니, unsigned int 는 2^64까지라 생각하고 dp의 범위를 unsigned int로 잡고 돌리면서 틀린 이유를 찾고 있었다.

2^32 * 2 는 2^33이고, long long 으로 바꾸다보니 정답인 문제였다.


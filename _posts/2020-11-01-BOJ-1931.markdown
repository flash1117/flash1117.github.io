---
layout: post
title: "BOJ 1931"
date: 2020-11-01 13:00:59
author: mollangzzang
categories: Algorithm
tags: Algorithm Greedy
cover: "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool compare(pair<int, int> a, pair<int, int> b) {
	if (a.second == b.second) return a.first < b.first;
	else return a.second < b.second;
}

int main() {

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;

	vector<pair<int, int>> vec(N);
	for (int i = 0; i < N; i++) {

		cin >> vec[i].first >> vec[i].second;

	}

	sort(vec.begin(), vec.end(), compare);

	int lastIndex = 0, ans = 0;

	for (int i = 0; i < vec.size(); i++) {

		if (lastIndex <= vec[i].first) {
			lastIndex = vec[i].second;
			ans++;
		}
	}

	cout << ans << "\n";

	return 0;
}

```

처음 접근할 때엔 회의가 일찍 시작하는 순으로 정렬하려고 했을 때, 회의가 일찍 시작한다고 무조건 늦게 끝난다는게 아니라는 것을 깨달았다.
다음으로 고려한 방법은 회의시간이 짧은 순으로 정렬하는 것인데, 시작을 늦게해버리면 안된다는 반례가 있었다.

그래서 회의가 끝나는 시각 순으로 정렬했으며, 끝나는 시간이 같은 경우에는 회의시간이 더 빠른 것이 앞으로 오도록 정렬하였다.
그 다음부턴 반복문을 돌면서 마지막 회의 시간 `lastIndex` 와 비교하며 탐욕적으로 회의실 갯수를 count했다.

## 탐욕적인 방법이란 ?

> 매 순간 순간 최적의 선택을 하는 것.

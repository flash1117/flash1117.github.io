---
layout: post
title: "SOLID 원칙"
date: 2020-11-07 13:00:59
author: mollangzzang
categories: TIL
tags: TIL
cover: "/assets/TIL.png"
---

## SOLID 원칙

> 객체지향 프로그래밍 및 설계의 다섯가지 기본 원칙

SOLID 원칙들은 소프트웨어 작업에서 프로그래머가 소스 코드가 읽기 쉽고 확장하기 쉽게 될 때까지 소프트웨어 소스 코드를 리팩토링하여 코드 냄새를 제거하기 위해 적용할 수 있는 지침입니다. 이 원칙들은 애자일 소프트웨어 개발과 적응적 소프트웨어 개발의 전반적 전략의 일부입니다.

## SRP (단일책임 원칙 : Single Responsibility Principle)

> 작성된 클래스는 하나의 기능만 가지며 클래스가 제공하는 모든 서비스는 그 하나의 책임을 수행하는데 집중되어 있어야 한다.

## SRP의 특징

- SRP 원리를 적용하면 책임영역이 확실해지기에, 책임의 변경에서 다른 책임의 변경으로의 연쇄작용에서 자유로울 수 있다.
- 책임을 적절히 분배함으로써 코드의 가독성 향상, 유지보수가 용이하다.
- 실무의 프로세스는 복잡하기 때문에 도메인에 대한 이해가 부족하면 SRP를 적용시키기가 쉽지 않다.

## SRP 적용방법

- 여러 원인에 의한 변경 (Divergent change) : Extract Class를 통해 혼재된 각 책임을 각각의 개별 클래스로 분할하여 클래스 당 하나의 책임만을 맡도록 하는 것

  - 책임만 분리하는 것이 아니라 분리된 두 클래스간의 관계의 복잡도를 줄이도록 설계해야 한다.

- 산탄총 수술 (Shotgun surgery) : Move Field 와 Move Method를 통해 책임을 기존의 어떤 클래스로 모으거나, 이럴만한 클래스가 없다면 새로 생성하여 해결한다. (응집성을 높이는 작업)

## OCP (개방폐쇄 원칙 : Open Close Principle)

> 요구사항의 변경이나 추가사항이 발생하더라도, 기존 구성요소는 수정이 일어나지 않아야 하며, 기존 구성요소를 쉽게 확장해서 재사용할 수 있어야한다.

OCP를 가능하게 하는 주요한 메커니즘은 **추상화**와 **다형성**이다. OCP는 객체지향의 장점을 극대화하는 중요한 원리

## OCP 적용방법

- 변경 or 확장 할 것과 변경하지 않을 것을 명확히 구분한다.
- 두 모듈이 만나는 지점에 인터페이스를 정의한다.
- 구현에 의존하기보다 정의한 인터페이스에 의존하도록 코드를 작성한다.

## OCP 적용이슈

- 변경되는 것과 되지 않는 모듈을 분리하는 과정에서 크기 조절에 실패하면 관계가 더 복잡해질 가능성이 있다.
- 인터페이스는 가능하면 변경되어선 안된다. 따라서 인터페이스를 정의할 때 여러 경우의 수에 대한 고려와 예측이 필요하다.
- 인터페이스 설계에서 적당한 추상화 레벨을 선택해야 한다.
  - 추상화란, 다른 모든 종류의 객체로부터 식별될 수 있는 객체의 본질적인 특징

## LSP (리스코브 치환 원칙 : The Liskov Substitution Principle)

> 서브 타입은 언제나 기반 타입과 호환될 수 있어야한다.

상속은 구현상속(extends) , 인터페이스 상속(implements) 이든 궁극적으로 다형성을 통한 확장성 획득을 목표로 한다. LSP원리도 역시 서브 클래스가 확장에 대한 인터페이스를 준수해야함을 의미한다.

다형성과 확장성을 극대화하려면 하위 클래스를 사용하는 것보다는 상위의 클래스(인터페이스)를 사용하는 것이 더 좋다. 일반적으로 선언은 기반 클래스로 생성은 구체 클래스로 대입하는 방법을 사용한다.

만약 생성시점에서 구체 클래스를 노출시키기가 싫다면 생성 부분에 Abstract Factory 패턴을 사용하여 유연성을 높일 수 있다. 상속을 통한 재사용성은 기반 클래스와 서브 클래스 사이에 IS-A 관계가 있을 경우로만 제한되어야 한다. 그 외의 경우 합성을 이용한 재사용을 해야한다.

최종적으로 LSP를 바탕으로 하는 OCP는 확장하는 부분에 다형성을 제공해 변화에 열려있는 프로그램을 만들 수 있도록 한다.

## LSP 적용방법

- 두 개체가 똑같은 일을 한다면 둘을 하나의 클래스로 표현하고 이들을 구분할 수 있는 필드를 둔다.
- 똑같은 연산을 제공하지만, 이들을 약간씩 다르게 한다면 공통의 인터페이스를 만들고 차이를 구현한다. (인터페이스 상속)
- 공통된 연산이 없다면 완전 별개의 2개의 클래스를 생성한다.
- 만약 두 개체가 하는 일에 추가적으로 무언가를 더한다면 구현 상속을 사용한다.

## ISP (인터페이스 분리 원칙 : Interface Segregation Principle)

> 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.

> 하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스가 좋다 라고 정의할 수도 있다.

**SRP**가 **클래스의 단일책임원칙**을 강조한다면 **ISP**는 **인터페이스의 단일책임**을 강조한다.

## ISP 적용방법

- 클래스 인터페이스를 통한 분리
  - 클래스의 상속을 이용하여 인터페이스를 나눌 수 있다. 이와 같은 구조는 클라이언트에게 변화를 주지 않을 뿐 아니라 인터페이스를 분리하는 효과를 갖는다. 하지만 거의 모든 객체지향언어에서 상속을 이용한 확장은 상속받는 클래스의 성격을 디자인 시점에 규정한다. 따라서 인터페이스를 상속받는 순간 인터페이스에 예속되어 제공하는 서비스의 성격이 제한된다.
- 객체 인터페이스를 통한 분리
  - 위임(Delegation)을 이용하여 인터페이스를 나눌 수 있다. 만약 다른 클래스의 기능을 사용해야 하지만 그 기능을 변경하고 싶지 않다면, 상속 대신 위임을 사용합니다.

## DIP (의존성 역전의 법칙 : Dependency Inversion Principle)

> 구조적 디자인에서 발생한 하위 레벨 모듈의 변경이 상위 레벨 모듈의 변경을 요구하는 위계관계를 끊는 의미의 역전

DIP는 복잡하고 지난한 컴포넌트간의 커뮤니케이션 관계를 단순화하기 위한 원칙이다.

DIP의 키워드는 **IOC**(Inversion Of Control) , **훅 메소드**, **확장성** 이다.

- 훅 메소드

> 슈퍼클래스에서 디폴트 기능을 정의해두거나 비워뒀다가 서브클래스에서 선택적으로 오버라이드할 수 있도록 만들어둔 메소드. 서브클래스에서는 추상 메소드를 구현하거나, 훅 메소드를 오버라이드하는 방법을 이용해 기능의 일부를 확장한다

## DIP 적용방법

잘 구조화된 객체지향 아키텍처들은 각 레이어마다 잘 정의되고 통제되는 인터페이스를 통한 긴밀한 서비스들의 집합을 제공하는 레이어들로 구성되어 있다. 단순히 레이어를 통한 구조화만을 뜻하는 것은 아니다.
Transitive Dependency가 발생했을 때 상위 레벨의 레이어가 하위 레벨의 레이어를 바로 의존하게 하는 것이 아니라 둘 사이에 존재하는 추상레벨을 통해 의존해야 할 것을 말하고 있다. 이를 통해 상위레벨의 모듈은 하위레벨의 모듈로의 의존성에서 벗어나 그 자체로 재사용되고 확장성도 보장 받을 수 있다.

## DIP 적용사례

1. 통신 프로그래밍 모델

일반적으로 소켓 프로그램은 클라이언트가 서버에게 요청을 send하고 서버로부터의 결과를 recv 하므로 서버의 서비스를 이용한다. 멀티스레드 프로그래밍에서 이 send & recv를 하게 되면 recv를 block 되기 때문에 recv하는 동안 스레드는 서버의 응답이 오기까지 대기한다. 따라서 서버로부터의 응답을 받기 위해 대기하는 동안 recv를 호출한 스레드는 다른 작업을 할 수 없기에 자원의 낭비가 있다.

따라서 대안으로 제시되는 모델이 **폴링**모델이다. 클라이언트 스레드는 서버에게 메세지를 보내고 recv를 전담하는 스레드에게 recv를 맡긴다. 그리고 이 스레드들은 다른 작업을 실행하면서 계속 일한다. 서버로부터 응답을 확인하고 싶은 시점에서 접수된 서버의 메세지를 가져온다. 따라서 클라이언트 스레드는 다른 일을 할 수 있는 기회비용을 얻게 된다.
하지만 폴링 모델에서 어느순간 클라이언트 스레드는 서버의 응답을 확인해야한다. 단지 자신이 원하는 시점에 동기적으로 서버의 응답을 확인할 수 있다는 점과 응답을 기다리는 시간 동안 다른 작업을 할 수 있다는 기회를 확보했을 뿐인 것이다.
만약 서버의 응답이 예상보다 지연되는 경우 클라이언트 스레드는 서버의 응답이 올 때까지 여러 번 응답 큐를 확인하는 비용이 소모된다. 또한 서버의 응답을 확인하는 시점이 동기적이지 않아도 될 경우 이 확인작업은 더욱 지난해진다.
즉, **서버의 응답에 대한 처리가 비동기적이어도 될 경우, 클라이언트 스레드가 서버의 응답 확인하는 시도가 여러번 발생할 때 폴링모델도 오버헤드가 발생한다.**

이 때가 DIP를 적용하기 적당한 시점이다. 클라이언트 스레드는 메세지를 send 한 뒤, recv하는 대신 서버의 응답을 처리하는 훅 메소드를 등록한다. recv를 담당하는 스레드는 서버로부터 응답을 접수하면 대응하는 훅 메소드를 찾아 훅 메소드를 실행한다. 즉, **recv 스레드는 서버의 응답 접수와 훅 메소드 실행을 담당한다.** 이 모델은 비동기 소켓모델로서 DIP의 원칙을 그대로 따르고 있다.

2. 이벤트 드리븐, 콜백, JMS 모델

자바 API는 언제나 소프트웨어 설계의 좋은 모델이 됩니다. 또한 자바 스윙의 이벤트 모델에도 DIP의 원리가 녹아 있습니다. 자바 스윙 컴포넌트는 이벤트를 처리할 java.awt.event.ActionListener를 등록(addActionListener())합니다. 이 스윙 컴포넌트에 이벤트가 발생하면 등록된 ActionListener의 훅 메소드인 actionPerformed()를 후킹합니다. 스윙 컴포넌트에는 복수 개의 이벤트가 발생할 수 있기 때문에 복수 개의 ActionListener를 등록할 수 있습니다. 이와 유사한 구조로 더 일반화된 Observer & Observable 인터페이스(자바에서 지원하는 내장 옵저버 패턴)도 있습니다. 더 나아가서 분산 시스템에서도 똑같은 구조가 적용됩니다.

서버와 클라이언트간의 통신에 있어서 클라이언트는 서버에 자신의 원격 객체 레퍼런스를 등록합니다. 서버는 자신의 작업을 진행하면서 원격 객체 레퍼런스를 통해 그때그때 필요한 정보를 클라이언트에게 제공합니다. 이 구조를 위해서 클라이언트의 콜백(callback) 메소드가 미리 정의되어 있어야 합니다. 콜백 메소드는 서버가 비동기적으로 클라이언트에게 정보를 전달하는 훅 메소드가 됩니다. 따라서 콜백의 구조는 원격지에서 훅킹이 제공되는 형태를 갖습니다.

이와 같은 구조는 비 동기적인 분산 훅킹(콜백)구조를 형성할 때 사용됩니다. 가령 서버에게 장시간의 작업들을 할당하고 클라이언트가 각 작업의 결과에 대한 중간보고를 비동기적으로 받고 싶을 때 유용합니다. 클라이언트의 호출이 비 동기적이기 때문에 서버의 작업을 할당한 다음 클라이언트는 다시 자신의 작업이 진행됩니다. 따라서 앞서 예시한 소켓의 비 동기 모델에서 recv() 스레드가 서버의 역할로 전이된 형태를 갖습니다. JMS의 토픽 모델은 좀 더 다양한 구조를 갖습니다. - 이 모델은 전통적인 MOM(메시지 지향 미들웨어: Message-Oriented Middleware- 분산 응용 프로그램 간에 메시지를 전송 및 수신하여 데이터 통신과 교환을 가능하게 합니다.) 아키텍처에서 Publish/Subscribe 메시징 모델로 알려져 있습니다.

이 모델은 멀티캐스팅 같은 그룹 메시징을 제공할 때 유용한데, 가령 주식정보 시스템을 예로 들었을 때 주식정보 제공자는 가입한 모든 클라이언트에게 현재 증시정보를 멀티캐스팅 합니다. 이 때 주식정보 제공자는 Publisher가 되고 클라이언트 프로그램은 Subscriber가 됩니다. 참고로 이 모델의 장점은 클라이언트/서버에서 메시지 기반으로 패러다임이 바뀐다는 것입니다.

기존의 클라이언트/서버 모델의 경우 서버는 클라이언트들을 상대합니다. 따라서 클라이언트의 위치 정보와 인터페이스 등을 알아야 했습니다. Publish/Subscribe 모델에서는 이 클라이언트와 서버 간의 상호의존도가 제거되며 이제부터 서버는 각종 클라이언트들에게 메시지를 보내는 것이 아니라 그냥 ‘주식정보’라는 메시지를 보내면 될 뿐입니다. 즉, 어떤 클라이언트들이 얼마나 접속되어있는지, 각 클라이언트들의 위치와 인터페이스는 어떤지 등의 여부와 같은 클라이언트 정보는 관심 대상에서 제외되고(주식정보라는) 메시지에 관심을 집중하게 됩니다. 이 패러다임은 클라이언트가 몇 개 접속되어 있는지 혹은 아예 없든지, 클라이언트의 상태나 위치가 어떤지에 관심 없이 그룹 메시징 제공자에게 메시지를 보내기만 하면 될 뿐입니다. 이 모델에서 Subscriber들은 Topic 제공자에게 자신을 등록합니다. Publisher가 Topic 제공자에게 메시지를 전송하면 JMS Topic 제공자는 등록된 Subscriber들에게 메시지를 멀티캐스팅 합니다. 이 때 메시지 멀티캐스팅을 하기 위해 등록된 각 Subscriber들의 onMessage()를 호출하게 됩니다.

## 끝으로

객체지향의 원칙과 사고방식은 중요하지만, 더 우선시 해야할 것은 **고객의 요구사항**대로 동작하는 것이다. 따라서 이러한 확장성과 유연한 설계는 **고객의 만족**을 충족한다는 전제하에 동작되어야 한다.

### Ref.

http://www.nextree.co.kr/p6960/

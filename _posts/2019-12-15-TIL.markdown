---
layout: post
title:  "2019-12-15-TIL"
date:   2019-12-15 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL js
cover:  "/assets/TIL.png"
---

#### 동기적 , 비동기적

- 동기적이란, 직렬과 같이 순서대로 일을 해내는 것이다.

- 비동기적이란, 병렬과 같이 여러가지를 동시에 수행하는 것이다.

차이점은 동기적인 방식은 선행된 작업을 끝날때 까지 기다려야 후에 작업들을 수행할 수 있다. 하지만 비동기적인 방식은 그러한 과정이 필요하지 않기에 더욱 효율적으로 작업이 가능하다.

node.js 는 비동기적인 기능을 수행하기 위한 좋은 기능들을 가지고 있다.

`fs.readFileSync()` 와 `fs.readFile()` 라는 함수가 있다고 가정한다면, 

`fs.readFileSync()` 와 같이 **Sync** 가 붙은 함수는 동기적인 방식이며 , `fs.readFile()` 같이 **Sync** 가 붙지 않은 함수는 비동기적인 방식이다.

동기적인 방식은

```
var result = fs.readFileSync('경로의 파일명', 'utf-8')
``` 

와 같이 2개의 매개변수를 가지면서 result 라는 변수에 결과값을 저장할 수 있지만,


비동기적인 방식은

```
fs.readFile('경로의 파일명', 'utf-8', function(err, result) {
    // console.log(result);
})

```

변수를 선언하여 result 에 바로 넣을 수 없고, 세번째 매개변수인 **callback** 을 이용하게 된다.

callback 의 첫번째 인자인 err 는 error 가 있다면 error 를 인자로 제공하고, result 는 파일의 내용을 인자로서 공급하도록 되어있다.

해당 함수 전에 A를 출력하는 출력문을 삽입하고 함수 뒤에 C라는 단어를 출력하는 출력문을 삽입한다고 가정하면 **동기적인 방식은 A, result 실행값 , C 와 같은 결과**가 나오지만 **비동기적 방식은 A , C , result 실행값**이 나올 수 있다.

이렇게 보니 문득 떠오른 것이 ios::sync_with_stdio(false) 인데, C언어와 C++ 의 입출력 싱크를 끊는 것이 동기 , 비동기적 방식 때문에 존재하는 것인지 궁금하다.


#### Callback

```
function a(){
    console.log('A');
}

var a = function() {
    console.log('A');
}
```

아래와 같은 방법으로 함수를 구성할 수 있으며,

```
function slowFunc(callback) 
{
    callback();
}

slowFunc(a);
```

와 같은 방식으로 함수의 이름을 주지 않은 함수를 불러 낼 수 도 있는 것 같다.

#### NPM

- 패키지 매니저

코드를 수정했을 때 프로그램을 일일이 껐다 켜지 않아도 되게 해주는 역할도 하며, 예상치 못하게 종료가 되는 것을 방지해주는 역할을 한다.

`pm2 start main.js --watch` 의 명령문을 통해 main 을 실행하게 되며 수정 될 때마다 자동으로 껐다 켜지므로 리로드를 통해 바로바로 반영할 수 있다.

사용을 중지하고 싶을 때에는

`pm2 stop main.js` 을 통해 중지할 수 있고

`pm2 log` 명령어를 통해 오류가 생겼을 때 에러를 볼 수 있다.

#### HTML form

```
<form action = "http://localhost:3000/process_create">
<p><input type = "text" name = "title"></p>
<p>
    <textarea name = "description"></textarea>
</p>
<p>
    <input type = "submit">
</p>
</form>
```

위와 같은 코드를 통해 query string 을 생성 할 수 있는데, form 이라는 tag 는 form 안에 있는 control 들에 사용자들이 입력한 정보를 submit 을 눌렀을때 action 에 적혀 있는 서버로 보내는 html 의 기능이다.

그러나 위와 같이 페이지를 생성하게 되면 주소에 데이터 값들이 포함되어 나타나게 된다. 그러면 아무나 데이터를 수정하고 삭제 할 수 있기 때문에 좋지 않은 방법이다. 

이를 방지하기 위해 action 뒤에 추가적으로 `method = "post"` post 방식으로 한다는 코드를 넣어야한다.

이걸 생략하면 default 가 get 방식이기 때문에 utl 의 **?** 뒤에 각각의 변수값들이 query string에 보이게 된다.
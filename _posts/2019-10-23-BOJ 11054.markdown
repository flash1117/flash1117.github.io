---
layout: post
title:  "BOJ 11054"
date:   2019-10-23 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, maxLen;
int input[1001];
int Ldp[1001], Rdp[1001];

void solve() {

	maxLen = Rdp[N] = Ldp[1] = 1;

	for (int i = 2; i <= N; i++) {

		for (int j = i - 1; j >= 0; j--) {

			if (input[i] > input[j])
				Ldp[i] = (Ldp[j] + 1 > Ldp[i]) ? Ldp[j] + 1 : Ldp[i];
		}
	}

	for (int i = N-1; i >= 1; i--) {

		for (int j = i + 1; j <= N+1; j++) {

			if (input[i] > input[j])
				Rdp[i] = (Rdp[j] + 1 > Rdp[i]) ? Rdp[j] + 1 : Rdp[i];
		}
	}

	for (int i = 1; i <= N; i++) 
		maxLen = (Ldp[i] + Rdp[i] > maxLen) ? Ldp[i] + Rdp[i] : maxLen;
	
	cout << maxLen - 1;
}

int main() {

	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> input[i];

	solve();
	return 0;
}

```

BOJ 11503 번과 같은 유형의 문제이다. 고려 해야할 것은 i 번째에서는 i번째의 수보다 작은 수들을 더 찾아야 하기 때문에, for문을 한번 더 돌려야 한다는 것이다.

다만 출력에 있어서 좌항을 계산한 배열과 우항을 계산한 배열을 더함에 있어서 i 번째 index 는 두번 계산이 되기 때문에 출력을 할 때 -1 을 해주어야 한다.

그리고 `input[i] > input[j]` 비교구문을 이렇게 줬기 때문에 for 문을 순회하던 도중 같은 숫자가 나오게 되면 `dp[i] = 0` 이 되어버리니 0 번째 index와 N+1번째 index를 각각 참조 하도록 하였다.

반복문을 한번 더 돌지 말고 else if 문을 줘도 괜찮을 것 같다.
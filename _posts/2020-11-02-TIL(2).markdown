---
layout: post
title: "알고리즘 정리"
date: 2020-11-02 13:00:59
author: mollangzzang
categories: TIL
tags: TIL Algorithm
cover: "/assets/TIL.png"
---

## BFS

> 너비를 우선으로 하여 탐색하는 알고리즘

- 최단 거리를 찾을 때 주로 사용한다.
- Queue 를 사용한다.

## DFS

> 깊이를 우선으로 하여 탐색하는 알고리즘

- Stack을 사용한다. (반드시는 아니다. 컴퓨터는 원래 스택의 구조를 이용하기 때문)

## Union-Find (합집합 찾기)

> 재귀를 통해 두 노드의 부모노드를 확인하고 같은 집합에 속해있는지 확인하는 알고리즘

- 고급 그래프 알고리즘의 베이스가 되는 알고리즘 이다.
- 일반적으로 부모를 합치는 경우는 더 작은 값쪽으로 한다.

## Kruskal Algorithm (크루스칼 알고리즘)

> 가장 적은 비용으로 모든 노드를 연결하기 위해서 사용하는 알고리즘

- 최소 비용 신장 트리를 만들기 위한 대표적인 알고리즘
- 여러개의 도시가 있고, 각 도시를 도로를 이용해 연결하고자 할 때 해당 알고리즘을 통해 비용을 최소한으로 계산할 수 있다.
- MST를 만들어야 하기에, Union Find로 사이클이 발생하는지 여부를 체크한다.

## 이진트리

- 데이터의 탐색 속도 증진을 위해 사용하는 자료구조
- 전위 순회, 중위 순회, 후위 순회 방식을 가지고 있다.

## 다이나믹 프로그래밍

> 메모이제이션을 통해 문제를 반복하여 풀지 않도록 최적화하는 알고리즘

## 에라토스테네스의 체

> 소수 판별 알고리즘

## 다익스트라 알고리즘

> DP를 활용한 최단경로 탐색 알고리즘

- 인공위성 GPS SW등에서 사용 된다.
- 특정한 **하나의 정점에서 다른 모든 정점으로 가는 최단 경로**를 알려준다.
- 음의 간선은 포함 할 수 없다.
- DP를 사용하는 이유는 최단 거리는 여러 개의 최단거리로 이루어져있기 때문
- 선형탐색으로 찾도록 만들면 O(N^2) , 최대한 빠르게 작동 시켜야 할 경우 힙구조를 사용하여 O(NlogN)
- 선형 탐색으로 구현하면 정점의 갯수는 많고 간선의 갯수가 적은 경우 비효율적이다.

## 플로이드 와샬

- **모든 정점에서 모든 정점으로의 최단경로를** 구할 수 있다.
- a 에서 b로 가는 값 vs a에서 노드 c로는 값 + c에서 노드 b로 가는 값 비교

## 강한 결합 요소 (Strongly Connected Component)

> 강하게 결합된 정점 집합

- 같은 SCC에 속하는 두 정점은 서로 도달이 가능하다.
- 방향 그래프일 때만 의미가 있다. (무향 그래프라면 해당 그래프는 무조건 SCC)
- SCC를 추출하는 알고리즘은 **타잔 알고리즘** 과 **코사라주 알고리즘**이 있다.
- SCC를 활용하여 위상 정렬을 할 수 있다.

- 타잔 알고리즘

모든 정점에 대해 DFS를 수행하여 SCC를 찾는 알고리즘
DFS를 하면서 부모로 돌아올 수 있어야 SCC가 성립.

## 네트워크 플로우

> 특정한 지점에서 다른 지점으로 데이터가 얼마나 많이 흐르고 있는가를 측정하는 알고리즘

- 교통 체증, 네트워크 데이터 전송 등의 다양한 분야에 사용된다.
- 일반적으로 최대유량 문제를 풀 때 사용된다.
- 기본적으로 최대 유량 문제는 BFS를 통해 모든 경우의 수를 탐색하는 방법을 사용한다. **에드몬드 카프 알고리즘**이라고도 한다.
- 최대 유량 알고리즘은 순서가 상관없다.
- BFS를 이용하는 경우 시간복잡도는 O(VE^2)이다.

## KMP 알고리즘

> 문자열 매칭 알고리즘 (특정 글 안에서 하나의 문자열을 찾는 알고리즘)

- 모든 경우를 다 비교하지 않아도 부분 문자열을 찾을 수 있다.

## Rabin-Karp 알고리즘

> 문자열 매칭 알고리즘 (항상 빠른 것은 아니지만 일반적인 경우 빠르게 작동하는 간단한 구조의 문자열 매칭 알고리즘)

- 해시를 사용한다.

## 그리디 알고리즘

> 매 순간 최적의 선택을 함으로써 최적의 해를 찾는 알고리즘

- 대표적인 문제로 거스름돈 문제가 있다.

## 이분 탐색

> 데이터가 정렬되어 있는 상황에서 범위를 반씩 쪼개며 탐색을 하는 알고리즘

일반적으로 데이터를 탐색하는 방법은 **순차 탐색**과 **이분 탐색**으로 나뉜다.

- 순차탐색

데이터의 정렬 유무에 상관하지 않고 데이터를 하나씩 살펴보며 탐색하는 알고리즘

- 이분 탐색은 시간복잡도 O(logN)을 가진다.
- AVL트리, B트리, 분할정복 등에서 폭넓게 사용된다.

## 세그먼트 트리

> 여러개의 데이터가 연속적으로 존재할 때 특정한 범위의 데이터의 합을 구하는 방법

- 보통 init , update, sum 과 같은 함수로 이루어져있다.
- 수정이 빈번한 경우 (update를 자주하는 상황)에서 합을 구할 때 용이하다.

## 최소 공통 조상 (Lowest Common Ancestor)

> 트리 구조에서 특정한 두 노드의 공통된 조상 중에서 가장 가까운 조상

- 일반적으로 LCA 문제라고 한다.
- 트리에서 두 노드사이의 거리를 빠르게 구하는 등 다양한 계산에 활용이 가능하다.
- 이진트리가 아니더라도 적용이 가능하다.

## 인덱스 트리

> 2진 인덱스 구조를 활용하여 구간합 문제를 효과적으로 해결할 수 있는 자료구조

- **펜윅 트리**라고도 부른다.
- 세그먼트 트리와 비슷한 성능을 가지며, 구현이 간단하다는 특징을 가진다.
- 비트 연산을 활용한다.

## 비트마스크

> & | 과 같은 비트 연산을 통해 이진 비트를 처리하는 작업

- 메모리를 적게 사용할 수 있다.
- 프로그램이 빠르게 동작한다.
- 소스코드가 직관적이다.
- 사용처가 한정적이다.

### Ref.

https://m.blog.naver.com/ndb796/221312837477

---
layout: post
title: "BOJ 1991"
date: 2020-10-31 13:00:59
author: mollangzzang
categories: Algorithm
tags: Algorithm tree
cover: "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>

using namespace std;

const int MAX_SIZE = 26 * 4;

int N;
vector<int> _tree[MAX_SIZE];
bool visitedByInorder[MAX_SIZE];
bool visitedByPostorder[MAX_SIZE];

void preorder(int curNodeIndex, int visitCnt) {

	// root leftNode rightNode

	char curChar = curNodeIndex + 'A';
	cout << curChar;

	if (visitCnt == N-1) return;

	int leftNode = _tree[curNodeIndex][0];
	int rightNode = _tree[curNodeIndex][1];


	if (leftNode != -1) {
		visitCnt++;
		preorder(leftNode, visitCnt);
	}

	if (rightNode != -1) {
		visitCnt++;
		preorder(rightNode, visitCnt);
	}

	return;
}

void lnorder(int curNodeIndex) {

	// leftNode root rightNode

	char curChar = curNodeIndex + 'A';

	int leftNode = _tree[curNodeIndex][0];
	int rightNode = _tree[curNodeIndex][1];

	if (leftNode == -1 || visitedByInorder[leftNode]) {
//		visitedByInorder[curNodeIndex] = true;
//		cout << curChar;

	}
	else {
		lnorder(leftNode);
	}

	visitedByInorder[curNodeIndex] = true;
	cout << curChar;


	if (rightNode != -1 && !visitedByInorder[rightNode]) {
		lnorder(rightNode);
	}

	return;

}



void postorder(int curNodeIndex) {

	// leftNode rightNode root

	char curChar = curNodeIndex + 'A';
	//cout << curChar << " ";
	int leftNode = _tree[curNodeIndex][0];
	int rightNode = _tree[curNodeIndex][1];

	if (leftNode == -1 || visitedByPostorder[leftNode]);
	else {
		postorder(leftNode);
	}

	if (rightNode == -1 || visitedByPostorder[rightNode]);
	else {
		postorder(rightNode);
	}

	if ((leftNode == -1 && rightNode == -1)
		|| (leftNode == -1 && rightNode != -1 && visitedByPostorder[rightNode])
		|| (leftNode != -1 && rightNode == -1 && visitedByPostorder[leftNode])
		|| (leftNode != -1 && rightNode != -1 && visitedByPostorder[leftNode] && visitedByPostorder[rightNode])) {
		visitedByPostorder[curNodeIndex] = true;
			cout << curChar;
	}


	return;


}

int main() {

	cin >> N;
	for (int i = 0; i < N; i++) {

		char root, leftNode, rightNode;
		cin >> root >> leftNode >> rightNode;

		int rootIndex = root - 'A';

		if (leftNode == '.') _tree[rootIndex].push_back(-1);
		else {
			_tree[rootIndex].push_back(leftNode - 'A');
		}
		if (rightNode == '.') _tree[rootIndex].push_back(-1);
		else {
			_tree[rootIndex].push_back(rightNode - 'A');
		}

	}

	preorder(0,0);
	cout << "\n";
	lnorder(0);
	cout << "\n";
	postorder(0);


	return 0;
}

```

평소 세그먼트 트리 같은 문제를 풀면서도 자식노드를 계산하기 쉽도록 0 번째 배열은 비운상태로 1번째 배열상태로 코드를 짜다보니, 코딩테스트를 응시하면서 트리 0번째부터 순회하는 방식은 푸는데 시간이 매우 오래걸린다는 것을 깨달았다.

실제로, 실버 1 수준의 문제를 푸는데 1시간이 넘게 걸린 것 같다. 좀 더 코드를 정형화 시킬 수 있을 것 같은데, 다른 코드를 참조하지 않고 짜다보니 비교적 미흡하게 된 것 같다.
중위 순회와 후위 순회를 하면서 `visited` 배열이 필요한지는 코드를 구현하면서도 의문이 들었다.

아니나 다를까, 역시 `visited` 배열은 필요하지 않았다. https://sihyungyou.github.io/baekjoon-1991/ 이분의 코드를 참조 했다.
항상 재귀를 사용함에 있어서 전부 순회하면서 기저영역에서 처리를 하면 될텐데, 쓸데없이 예외처리를 하다보니 코드가 조잡하게 되는 것 같다. 굉장히 간단히 작성될 수 있는 코드임에도 불구하고.. 몇 문제 더 풀다가 자야할 것 같다.

아래는 참조한 코드이다.

```
#include <cstdio>

char tree[26][2] = { '.', };

void preorder(char root) {
    if (root == '.') return;
    else {
        printf("%c", root);
        preorder(tree[root-'A'][0]);
        preorder(tree[root-'A'][1]);
    }
}

void inorder(char root) {
    if (root == '.') return;
    else {
        inorder(tree[root-'A'][0]);
        printf("%c", root);
        inorder(tree[root-'A'][1]);
    }
}

void postorder(char root) {
    if (root == '.') return;
    else {
        postorder(tree[root-'A'][0]);
        postorder(tree[root-'A'][1]);
        printf("%c", root);
    }
}

int main() {

    int n, i;
    char root, left, right;

    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        scanf(" %c %c %c", &root, &left, &right);
        tree[root-'A'][0] = left;
        tree[root-'A'][1] = right;
    }

    preorder('A');
    printf("\n");
    inorder('A');
    printf("\n");
    postorder('A');
    printf("\n");

    return 0;
}
```

---
layout: post
title:  "Programmers - 네트워크"
date:   2019-12-12 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BFS
cover:  "/assets/algorithm.png"
---

```
#include <string>
#include <vector>
#include <queue>
using namespace std;

bool visited[200];

void BFS(vector<vector<int>> &computers, int index) {
    
    queue<int> q;
    q.push(index);
    visited[index] = true;
    
    while(!q.empty()){
        
        int cur = q.front();
        q.pop();
        
        for(int i= 0; i<computers.size(); i++) {
            if(!visited[i] && computers[cur][i] == 1)
            {
                q.push(i);
                visited[i] = true;
            }    
        }
    }
    
    
}

int solution(int n, vector<vector<int>> computers) {
    int answer = 0;
    
    for(int i =0; i<n; i++) {
        
        if(!visited[i] && computers[i][i] == 1){
            BFS(computers, i);
            answer++;
        }
          
    }
    return answer;
}
```

#### 구현

- 연결되어있는 컴퓨터를 네트워크라고 하고, 그러한 네트워크의 갯수를 구하는 문제이다. 간단히 말하면 그래프 순회를 하면서 떨어진 노드의 갯수를 세는 문제이며, BFS를 이용하여 구현하였다.

- 방문한 노드를 체크해주어야 하기 때문에 visited 를 선언하여 순회하였다. 서로 연결되어 있으면 행과 열은 고려하지 않아도 되기에 이차원 배열이 아닌 일차원 배열로 선언하여 반복문을 한번씩만 돌려주었다.
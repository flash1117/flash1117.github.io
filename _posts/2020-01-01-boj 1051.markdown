---
layout: post
title:  "BOJ 1051"
date:   2020-01-01 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BruteForce
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, M;
int map[50][50];
int maxSq = 1;

bool isBoundary(int x, int y) {

	if (x< 0 || y<0 || x>N - 1 || y>M - 1) return false;
	return true;

}

bool isVertexSame(int x, int y, int width) {

	if (map[x][y] == map[x + width][y] && map[x][y] == map[x][y + width]
		&& map[x][y] == map[x + width][y + width]) return true;
	
	return false;
}

void solve(int x, int y) {


	for (int i = 1; i <= 50; i++) {

		if (isBoundary(x + i, y + i)) {
			if (isVertexSame(x, y, i)) {
				maxSq = maxSq > (i+1) * (i+1) ? maxSq : (i+1) * (i+1);
			}
		}
		else return;
	}

}
int main() {

	string input;
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		cin >> input;
		for (int j = 0; j < M; j++) {
			map[i][j] = input[j] - '0';
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			solve(i, j);
		}
	}

	cout << maxSq << "\n";

	return 0;
}
```

#### 구현

간단한 완탐 문제이다.

- 정사각형의 넓이는 최소 1이므로 maxSq = 1 로 선언해주었다.

- 직사각형 내부의 범위의 점들을 모두 순회 하는 방식으로 구현했으며, `isBoundary()` 함수는 해당 점의 X와 Y좌표를 받는데 그 점이 직사각형 범위 안의 점인지 체크해준다.

- `isVertexSame()` 함수는 각 꼭지점들이 같은 값을 가지고 있는지 체크하는 함수이다.

- `solve()` 함수에서 정사각형의 길이를 1씩 늘려가며 위 2개의 함수들을 이용하여 최대넓이를 갱신하는 방식으로 구현하였다.

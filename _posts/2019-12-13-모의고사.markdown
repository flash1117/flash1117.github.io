---
layout: post
title:  "Programmers - 모의고사"
date:   2019-12-12 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BruteForce
cover:  "/assets/algorithm.png"
---

```
#include <string>
#include <vector>

using namespace std;

int input1[] = {1,2,3,4,5};
int input2[] = {2,1,2,3,2,4,2,5};
int input3[] = {3,3,1,1,2,2,4,4,5,5};
int cnt[3];
vector<int> solution(vector<int> answers) {
    vector<int> answer;

    for(int i =0; i<answers.size(); i++) {

        if(answers[i] == input1[i%5]) cnt[0]++;
        if(answers[i] == input2[i%8]) cnt[1]++;
        if(answers[i] == input3[i%10]) cnt[2]++;

    }

    if(cnt[0] > cnt[1]) {
        if(cnt[0] > cnt[2]) answer.push_back(1);
        else if(cnt[0] == cnt[2]){
            answer.push_back(1);
            answer.push_back(3);
        }
        else answer.push_back(3);
    }
    else if(cnt[0] == cnt[1]) {
        if(cnt[2] > cnt[0]) answer.push_back(3);
        else if(cnt[2] == cnt[0]) {
            for(int i =0; i<3; i++)
                answer.push_back(i+1);
        }
        else {
            answer.push_back(1);
            answer.push_back(2);
        }
    }
    else {
        if(cnt[1] > cnt[2]) answer.push_back(2);
        else if(cnt[1] == cnt[2]){
            answer.push_back(2);
            answer.push_back(3);
        }
        else answer.push_back(3);
    }
    return answer;
}

```

#### 구현

정말 조잡하게 코드를 짠 것 같다..

- 1 2 3 에 해당하는 배열을 선언하여 값이 존재하지 않는 인덱스를 참조하면 안되니 나머지 계산으로 위치를 찾도록 구현하였다.

- 크기 비교를 하나하나 비교를 하였는데, 3명밖에 존재하지 않아서 가능한 것이였지만 여러명이면 어떻게 해야할지 생각을 해봐야 할 코드이다.

다른 코드를 찾다보니,

```
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> one = {1,2,3,4,5};
vector<int> two = {2,1,2,3,2,4,2,5};
vector<int> thr = {3,3,1,1,2,2,4,4,5,5};

vector<int> solution(vector<int> answers) {
    vector<int> answer;
    vector<int> they(3);
    for(int i=0; i<answers.size(); i++) {
        if(answers[i] == one[i%one.size()]) they[0]++;
        if(answers[i] == two[i%two.size()]) they[1]++;
        if(answers[i] == thr[i%thr.size()]) they[2]++;
    }
    int they_max = *max_element(they.begin(),they.end());
    for(int i = 0; i< 3; i++) {
        if(they[i] == they_max) answer.push_back(i+1);
    }
    return answer;
}

```

- max_element 를 통해서 깔끔하게 구현하였다. 이 함수를 잊고 있었는데, 비교적 자주 사용되지 않아서 그런 것 같다. 그리고 무의식적으로 vector 는 push 를 통하여 값을 넣어야 한다고 생각하고 있었는데, 너무 stack 과 같은 형식으로만 사용하였던 것 같다.

- count 를 하면서 최대 갯수를 저장해두었다가 for 문으로 1 2 3 번째 사람의 count 를 비교하면서 맞는 경우 answer 에 푸쉬하는 경우도 괜찮을 것 같다.
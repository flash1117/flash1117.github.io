---
layout: post
title:  "BOJ 11048"
date:   2019-11-01 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, M;
int map[1001][1001];
int dp[1001][1001];

void solve() {

	for (int i = 1; i <= N; i++) 
		for (int j = 1; j <= M; j++) 
			dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j]+map[i][j] : dp[i][j - 1]+map[i][j];
		
	cout << dp[N][M] << "\n";

}

int main() {
	
	cin >> N >> M;
	for (int i = 1; i <= N; i++) 
		for (int j = 1; j <= M; j++) 
			cin >> map[i][j];
	
	solve();
	return 0;
}
```

이 문제에서도 이동은 오른쪽 과 아랫방향으로 밖에 갈수 없기 때문에 (i,j) 입장에서 봤을 때에 윗 방향과 왼쪽 방향을 비교하면서 큰값을 집어 넣으면 되는 간단한 문제이다.
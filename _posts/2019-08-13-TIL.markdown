---
layout: post
title:  "2019-08-13 TIL"
date:   2019-08-13 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL
cover:  "/assets/TIL.png"
---

<span style="color:red">"소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 

일련의 협업화된 형태로 클래스들을 제공하는 것"</span> 이라고 한다.


무슨 소린지 모르겠다.. 나름 대로 찾아본 결과 프레임 워크를 라이브러리와 비교하는 글이 굉장히 많았다.

**라이브러리**란 , 우리가 평소에 코드를 짤 때 사용되는 기능을 간편하게 불러와서

사용 할 수 있도록 만든 **코드들의 집합**이다.

예를 들자면 알고리즘 문제를 풀 때 사용되는 대표적인 언어 중 하나인 C++ 에서 `queue , stack , deque , sort` 등 사용할 일이 있지만 라이브러리를 사용하지 않는 다면 사용자가 하나하나 직접 구현해야 한다.

하지만, 프레임워크는 좀더 깊이 들어가서 언어의 뼈대를 가지고 라이브러리와 같은 기능과 어느정도의 제약사항을 합쳐서 이 언어 자체를 사용하기 쉽게 만든 것이라고 생각한다.

프레임워크 의 종류로는 

Java - Spring, Struts

Javascript - AngularJS, React, Polymer, Ember 

Frontend - Bootstrap , Foundation

Python - django, flask 등 많은 종류가 있다.

### 프레임 워크의 장점

1. **체계적인 코드로 유지보수에 적합하다.**

    - 회사에서 개발 담당자가 퇴사해 버리면 인수인계 과정에서 문제가 생길 수 있지만, 프레임워크는 틀이 잡혀있어서 유지보수에 도움이 된다.

2. **품질 향상에 도움이 된다.**

    - 수많은 개발자들이 사용 했다는 것은 그만큼 검증이 되었단 소리와 같아서 , 평소에 놓치기 쉬운 부분의 버그를 잡기가 용이하다.

### 프레임 워크의 단점

1. **학습 시간이 길다.**

    - 본인이 짜 놓은 코드가 아니기 때문에, 프레임워크에 있는 코드를 습득하고 이해하는데 시간이 오래 걸린다.

2. **제약사항**

    - 이미 설계된 코드를 이용하는 것이기 때문에 , 개발자가 유연하고 자유로운 코드를 개발하는데 제약사항이 있다.
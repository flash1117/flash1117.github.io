---
layout: post
title:  "2020-01-04 TIL"
date:   2020-01-04 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL js
cover:  "/assets/TIL.png"
---

#### Promise

- Javascript에서는 대부분의 작업들이 비동기로 이루어진다. 어떠한 작업을 요청하면서 콜백 함수를 등록하면, 작업이 수행되고 나서 결과를 나중에 콜백 함수를 통해 알려주는 식이다.

- 하지만 하나의 작업을 콜백으로 결과를 받은 뒤, 순차적으로 작업을 진행하고자 할 때 콜백 중첩을 만나게 되는데 이러한 상황을 극복하기 위해서 오래전부터 Promise 라는 Pattern 이 제안되어 왔다.

- Promise Pattern 을 사용하면, 비동기 작업들을 순차적으로 진행하거나 병렬로 진행하는 등의 Control이 보다 수월해지고 코드의 가독성이 향상된다. 또한 내부적으로 예외처리에 대한 구조가 탄탄해서 오류처리를 보다 가시적으로 관리할 수 있는 장점이 있다.

- Promise는 언젠가 사용하게 될 값을 만들어내는 객체이다. 여기서 값은 얻을 수 있거나 (resolved) 혹은 값을 얻지 못한 대신에 그렇게 된 이유를 얻게 된다(rejected). 값을 얻지 못하는 경우는 네트워크 장애와 같은 경우이다.

- Promise 는 3가지의 상태를 가지게 된다.
    - Fulfilled , Rejected , Pending

- Promise가 pending 상태가 아니면 settled 상태라고 말한다. 즉 resolved 또는 rejected 상태라는 소리이다. 한번 settled 상태가 되고 나면, Promise 는 다시 settled 상태가 될 수 없다. 즉 `resolve()` 또는 `rejected()` 의 호출이 아무런 의미가 없다.

#### Promise 의 규칙

- Promise 또는 **thenable**은 표준에 의거한 **.then()** 메서드를 제공하는 객체이다.
- pending 상태의 Promise는 fulfilled 또는 rejected 상태로 전이할 수 있다.
- fulfilled 또는 rejected 상태는 settled 된 것으로, 다른 상태로 전이할 수 없다.
- 한번 settled 된 Promise는 값을 가진다. (이 값은 undefined 일 수 있다.) 이 값은 변할 수 있다.

- Promise 의 Executor(Promise 생성자에 전달되는 콜백)은 반환값을 갖지 않는다. return 을 통하여 값을 반환하더라도 이후에 `.then()` 에서 무시된다. `.then()` 으로 데이터를 전달하려면 `resolve()` 나 `reject()`를 호출할 때에 인자로 전달해주어야 한다.

- `resolve()`를 다른함수의 콜백으로 넘겨주어야 하는데(가령 setTimeout 등) 이때 데이터도 함께 넘겨주어야 한다면, 익명 함수로 감싸주거나 `bind()` 를 사용하면 된다.

#### Vue

- v-if , v-else 와 같이 v를 붙여주어야 vue에서 관리를 하기 시작한다.

- v-if 와 v-else 같은 것은 형제태그이면서 인접해야 한다.

- 스크립트의 el, data, methods의 이름을 제외한 나머지는 모두 바꿀 수 있다.

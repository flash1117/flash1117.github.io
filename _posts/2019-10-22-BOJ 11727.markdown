---
layout: post
title:  "BOJ 11727"
date:   2019-10-22 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <algorithm>

using namespace std;

int n;
long long dp[1001];

void solve() {

	dp[1] = 1;
	dp[2] = 3;
	dp[3] = 5;
	dp[4] = 11;

	for (int i = 5; i <= n; i++) {
		int index = i / 2;
		if (i % 2 == 0)
			dp[i] = dp[index] * dp[index] + 2 * dp[index - 1] * dp[index - 1];
		else
			dp[i] = dp[index] * dp[index + 1] + 2 * dp[index - 1] * dp[index];

		if (dp[i] > 10007) dp[i] %= 10007;
	}

	cout << dp[n];

}

int main() {

	cin >> n;
	solve();

	return 0;
}

```

처음에 2 x 1 타일이 가로로 놓이는 줄도 모르고 수가 왜 이렇게 크게 나와야 하는지 몰랐었다. 문제를 맞췄지만 좀 찝찝한 마음에 다른 코드를 찾아봤었는데

```
#include <cstdio>
int main() {
	int n, a[1001]={1,1};
	scanf("%d", &n);
	for(int i=2; i<=n; i++) a[i] = (a[i-1] + 2*a[i-2]) % 10007;
	printf("%d", a[n]);
	return 0;
}
```

이게 깔끔한 것 같다. 
---
layout: post
title:  "BOJ 2167"
date:   2019-10-29 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

#define Endl "\n"

typedef struct {

	int x, y;
}Point;

Point src, dst;
int N, M, K;
int map[302][302];
int dp[302][302];

void solve() {
	
	if (src.x == dst.x && src.y == dst.y)
	{
		cout << map[dst.x][dst.y] << Endl;
	}
	else {
		cout << dp[dst.x][dst.y] - dp[src.x-1][dst.y] - dp[dst.x][src.y-1] + dp[src.x-1][src.y-1] << Endl;
	}
	return;
}

int main() {

	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 1; i <= N; i++) 
		for (int j = 1; j <= M; j++) 
			dp[i][j] = dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1] + map[i][j];	
	
	cin >> K;
	for (int i = 0; i < K; i++) {
		cin >> src.x >> src.y >> dst.x >> dst.y;
		solve();
	}
	return 0;
}
```

첫번째로 dp를 한꺼번에 계산을 하지 않고, solve 함수에서 src ~ dst 까지의 범위를 매번 계산했다가 시간초과가 떴다. 

그래서 코드를 고쳤는데, 

```
for (int i = 1; i <= N; i++) 
	for (int j = 1; j <= M; j++) 
		dp[i][j] = dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1] + map[i][j];
            
```

이 부분에서 N 과 M 부분을 아무 생각없이 300을 넣고 돌렸더니 428ms 가 나왔다. 실수를 깨닫고 N 과 M까지 돌리는 것으로 바꿨는데도 불구하고 위 코드로 436ms 가 나왔다.

왠지 모르겠어서 다른 사람의 코드를 봤는데 로직은 똑같은 것 같다.. 시간이 날 때 이유를 한번 더 찾아봐야 할 것 같다.

-- 수정

```
	ios::sync_with_stdio(false);
	cin.tie(0);
```

위와 같은 구문의 차이였는데, input의 값이 어느 정도 있을 때 위와 같은 코드를 치는 것이 속도에 있어서 더 빠르다고 알고는 있었지만, 가시적인 속도차이가 있을 줄은 몰랐다.

위 코드를 삽입 하자 마자 428ms 가 12ms 가 되었다. 최대 input 값이 300 x 300 번이라서 그런 것 같은데 이정도 사이즈가 되면 앞으로는 속도 향상을 위해 이 코드를 사용해야 할 것 같다.
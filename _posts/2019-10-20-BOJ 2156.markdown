---
layout: post
title:  "BOJ 2156"
date:   2019-10-20 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <algorithm>

using namespace std;

int n;
int wine[10001];
int dp[10001];

void solve()
{
	dp[1] = wine[1];
	dp[2] = wine[2] + dp[1];
	dp[3] = max(dp[2], dp[1] + wine[3]);
	dp[3] = max(wine[3] + wine[2], dp[3]);
	
	for (int i = 4; i <= n; i++) {

		dp[i] = max(dp[i - 3] + wine[i - 1] + wine[i], dp[i - 2] + wine[i]);
		dp[i] = max(dp[i - 1], dp[i]);
	}

	cout << dp[n];
}

int main() {

	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> wine[i];

	solve();
	return 0;
}
```

포도주를 연속으로 3잔을 못마시는 제약조건이 걸려있을 때, 주어진 n번째에 마실 수 있는 포도주의 최댓값을 구하라 라는 전형적인 DP 문제이다.

하지만 `dp[3]` 을 제대로 비교해 주지 않아서 한번 틀렸었다.

~~세 잔 연속 쌉가능인데, 포도주 마시고 싶다 ㅠ~~

이 경우 고려해봐야 할 조건은

1. n번째에서 마시지 않는 경우
2. n-1 번째에서 마시지 않았기 때문에 지금 마시는게 첫번째 잔인 경우
3. n-2 번째에서 마시지 않았기 때문에 n-1번째에서 마시고 n번째에서 마시는 경우

를 비교하여 최댓값이 되는 것을 `dp[n]` 에 넣는 것이다.

다만 for 문에서 참조를 할 때 index 에서 -3 번째 배열까지 참조를 하기 때문에 초기에 case를 3개는 내가 지정해주고 시작을 해야한다.



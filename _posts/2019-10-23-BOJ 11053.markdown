---
layout: post
title:  "BOJ 11053"
date:   2019-10-23 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <algorithm>

using namespace std;

int n;
int input[1001];
int dp[1001];
int maxLen;

void solve() {

	dp[1] = 1;
	dp[2] = (input[2] > input[1]) ? 2 : 1;

	maxLen = (n >= 2) ? dp[2] : dp[1];

	for (int i = 3; i <= n; i++) {

		for (int j = i - 1; j >= 0; j--) {

			if (input[i] > input[j])
				dp[i] = max(dp[i], dp[j] + 1);
		}

		maxLen = (dp[i] > maxLen) ? dp[i] : maxLen;
	}

	cout << maxLen;

}

int main() {

	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> input[i];

	solve();


	return 0;
}
```

DP 문제중에 LIS 라는 것이 있다는 것 같다.
LIS는 Longest Increasing Subsequence 의 약자이다.
이 문제는 LIS 의 기본 문제이다.

이 문제를 풀 때 이중 for 문을 돌리면서, 현재 index 보다 작은 수들을 순회하면서 가장 큰 값을 찾도록 했는데, 예외에서 막힌 부분은 입력 받을 때 index를 1부터 돌도록 설계 했기 때문에 for문에서 j의 범위를 0은 포함하지 않도록 돌게 했었다.

다만 그렇게 되니 `10 20 30 10` 을 입력 값으로 주었을 때 4번째 index인 부분에서 `dp[4]=0` 이 들어가게 되어서 틀리게 되어서 이 부분을 찾는데 애를 먹었었다.

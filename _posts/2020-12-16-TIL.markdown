---
layout: post
title: '스프링부트 공부'
date: 2020-12-16 13:00:59
author: mollangzzang
categories: TIL
tags: TIL
cover: '/assets/TIL.png'
---

## 템플릿 엔진

> 지정된 템플릿 양식과 데이터가 합쳐서 HTML 문서를 출력하는 소프트웨어

## 서버 템플릿 엔진

> JSP, Freemarker

작동 영역 : 서버

## 클라이언트 템플릿 엔진

> React , Vue

작동 영역 : 브라우저

따라서 서버의 손을 떠났기 때문에, Json 혹은 Xml 형식의 데이터만 전달하고 클라이언트에서 조립한다.

물론 최근에는 React, Vue와 같은 프레임워크에서 서버사이드 렌더링을 지원하기는 한다.

## 템플릿 엔진의 종류

- JSP, Velocity : 스프링 부트에서는 권장하지 않는 템플릿 엔진

- Freemarker : 템플릿 엔진으로는 너무 과하게 많은 기능을 지원한다. 높은 자유도로 인해 숙련도가 낮을수록 Freemarker 안에 비즈니스 로직이 추가될 확률이 높다.

- Thymeleaf : 스프링 진영에서 적극적으로 밀고있는 엔진이지만, 문법이 어렵다. HTML 태그에 속성으로 템플릿 기능을 사용하는 방식이 기존 개발자들에게 허들로 느껴지는 경우가 종종 있다. Vue.js를 사용해본 경험이 있어서 태그 속성 방식이 익숙하다면 해당 템플릿 엔진을 사용해도 괜찮다고 한다.

- 머스테치 : 문법이 다른 템플릿에 비해 심플하다. 로직코드를 사용할 수 없어서 View의 역할과 서버의 역할이 명확하게 분리된다. Mustache.js 와 Mustache.java 2가지 다있어서 하나의 문법으로 클라이언트, 서버 템플릿을 모두 사용이 가능하다.

템플릿 엔진이 너무 많은 기능을 제공한다면, API와 템플릿엔진, 자바스크립트가 서로 로직을 나눠가지게 되어서 유지보수가 어렵다.

## HTML 동작 순서

HTML은 위에서부터 코드가 실행되기에 head가 다 실행되고난 뒤에 body가 실행된다. 즉, head가 다 불러지지 않으면 사용자 쪽에선 백지 화면만 노출되게 된다.

특히 js의 용량이 클 수록 body 부분의 실행이 늦어지기에 js는 body 하단에 두어서 화면이 다 그려진 뒤에 호출하는 것이 좋다.

반면 css 는 화면을 그리는 역할이므로 head에서 불러오는 것이 좋다.

## 조회용 프레임워크

규모가 있는 프로젝트에서 데이터조회는 FK의 조인, 복잡한 조건 등으로 인해 Entity 클래스만으로 처리하기 어려워 조회용 프레임워크를 사용한다.
대표적인 프레임워크로는 querydsl, jooq, MyBatis등이 있다. 따라서 조회는 3가지 프레임워크 중 하나를 선택하고 등록, 수정, 삭제는 SpringDatajpa를 통해 진행한다.

querydsl 의 장점으로는

1. 타입 안정성이 보장된다.

단순한 문자열로 쿼리를 생성하는 것이 아닌 메소드 기반으로 쿼리를 생성하기에 오타나 존재하지 않는 컬럼명을 명시하는 경우 IDE에서 검출이 가능하다. Jooq 에서도 지원하는 장점이지만 MyBatis의 경우엔 지원하지 않는다.

2. 레퍼런스가 많다.

3. JPA를 활용하는 많은 회사가 Querydsl를 적극적으로 사용한다.

## 스프링 시큐리티

> 막강한 인증과 인가 (권한 부여) 기능을 가진 프레임워크

사실상 스프링 기반 애플리케이션에서는 보안을 위한 표준이라고 봐도 무방하다.
인터셉터, 필터 기반의 보안 기능을 구현하는 것 보다 스프링 시큐리티를 통해 구현하는 것을 적극적으로 권장하는 분위기이다.

스프링의 대부분 프로젝트 (Mvc, Data, Batch 등)처럼 확장성을 고려한 프레임워크다 보니 다양한 요구사항을 손쉽게 추가하고 변경할 수 있다.

## 소셜 로그인을 사용하는 이유

만약 소셜 로그인을 사용하지 않는다면 직접 구현해야할 내용은 아래와 같다.

1. 로그인 시 보안
2. 회원가입 시 이메일 또는 전화번호 인증
3. 비밀번호 찾기
4. 비밀번호 변경
5. 회원정보 변경

만약 OAuth 로그인 구현 시 앞선 목록의 것들을 모두 google, facebook, naver 등에 맡기면 되니 서비스 개발에 집중할 수 있다.

## OAuth 연동방법

SpringBoot 1.5에서의 OAuth2 연동 방법이 2.0에서는 변경되었다. 하지만 블로그나 깃허브를 보다보면 설정방법에 크게 차이가 없는데, 그것은 `spring-security-oauth2-autoconfigure` 라이브러리 덕분이다.

## 스프링 시큐리티

스프링 시큐리티에서는 권한 코드에 항상 ROLE\_이 앞에 있어야만 한다.

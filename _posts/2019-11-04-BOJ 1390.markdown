---
layout: post
title:  "BOJ 1390"
date:   2019-11-04 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N;

int dp[100001][3];

void solve() {

	dp[1][0] = dp[1][1] = dp[1][2] = 1;

	for (int i = 2; i <= N; i++) {

		dp[i][0] = dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2];
		dp[i][1] = dp[i - 1][0] + dp[i - 1][2];
		dp[i][2] = dp[i - 1][0] + dp[i - 1][1];

		if (dp[i][0] > 9901) dp[i][0] %= 9901;
		else if (dp[i][1] > 9901) dp[i][1] %= 9901;
		else if (dp[i][2] > 9901) dp[i][2] %= 9901;
	}

	if (dp[N][0] + dp[N][1] + dp[N][2] > 9901) {
		dp[N][0] = (dp[N][0] + dp[N][1] + dp[N][2]) % 9901;
		cout << dp[N][0] << "\n";
	}
	else
		cout << dp[N][0] + dp[N][1] + dp[N][2] << "\n";
}

int main() {
	cin >> N;
	solve();
	
	return 0;
}
```

2 x N 짜리 칸에 사자를 어떻게 넣을지 경우의 수를 헤아리는 문제이다.

생각해 볼 수 있는 경우의 수는 3가지 인데,

1. 사자가 없는 경우
2. 사자가 왼쪽 칸에 넣어진 경우
3. 사자가 오른쪽 칸에 넣어진 경우

따라서 dp를 이차원배열로 선언해주었으며, 0은 사자가 없는 경우 1은 왼쪽 , 2는 오른쪽으로 생각하여 계산하였다.

사자가 지금 현재 왼쪽칸에 들어가 있다면 현재칸의 경우의 수를 제외한 전 단계의 대각선 방향을 참조해주면 된다. 오른쪽도 마찬가지이며, 방법을 생각해내면 구현은 어렵지 않은 문제였다.

규칙을 찾게되면 `dp[N] = 2*dp[N-1] + dp[N-2];` 인 것 같은데, 왜 이렇게 되는지는 곰곰히 생각을 해봐야 할 것 같다.



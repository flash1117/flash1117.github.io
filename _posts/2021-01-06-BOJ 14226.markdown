---
layout: post
title: 'BOJ 14226'
date: 2021-01-04 13:00:59
author: mollangzzang
categories: Algorithm
tags: BFS
cover: '/assets/algorithm.png'
---

```
#include <iostream>
#include <queue>

using namespace std;

typedef struct {

	int screen, clipboard, spendTime;
}Emoticon;

int goalEmoticon;
bool visited[1001][1001];

int solve() {

	queue<Emoticon> q;
	q.push({1,0,0});
	visited[1][0] = true;

	while(!q.empty()) {

		int screen = q.front().screen;
		int clipboard = q.front().clipboard;
		int _time = q.front().spendTime;

		q.pop();

		if (screen == goalEmoticon) return _time;

		q.push({ screen, screen, _time + 1 });

		if (clipboard == 0);
		else if(screen + clipboard <= 1000 && !visited[screen + clipboard][clipboard]){
			q.push({ screen + clipboard, clipboard, _time + 1 });
			visited[screen + clipboard][clipboard] = true;
		}

		if (screen >= 1 && !visited[screen-1][clipboard]) {
			q.push({ screen - 1, clipboard, _time + 1 });
			visited[screen - 1][clipboard] = true;
		}

	}

	return -1;
}

int main() {

	cin >> goalEmoticon;

	cout << solve() << "\n";

	return 0;
}
```

해당 문제에서 취해야 할 액션은 3가지가 있다.

1. 화면에 있는 이모티콘을 모두 복사해서 클립보드에 저장한다.
2. 클립보드에 있는 모든 이모티콘을 화면에 붙여넣기 한다.
3. 화면에 있는 이모티콘 중 하나를 삭제한다.

위 조건을 보면 필요한 변수는 화면의 이모티콘 갯수, 클립보드에 저장된 이모티콘의 수 그리고 경과되는 시간 이렇게 3가지가 필요하므로 구조체를 선언해주었다.

그리고 solve 함수에서 queue 에 초기값인 화면 : 1, 클립보드 : 0, 시간 초 : 0 인 `q.push({1,0,0});` 을 넣어주고 시작하였다.

처음에 중복되는 수를 넣지 않기 위해서 visited 배열을 일차원 배열로 선언하여 넣어주었는데, 그렇게 되면 clipboard의 이모티콘의 수에 따라 각각의 경우의 수를 발생시키지 못하는 문제점이 있다.

따라서 visited를 화면, 클립보드 쌍을 나타 낼수 있도록 이차원 배열로 선언하여 문제를 풀이하였다. 나머지는 큐를 사용하여 풀면 크게 어려울 것은 없는 문제였다. 다만 배열의 크기를 초과하는 곳에 접근하지 않도록 주의를 해야할 것 같다.

---
layout: post
title:  "BOJ 1937"
date:   2019-11-06 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N;
int map[501][501];
int dp[501][501];
int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };

bool isBoundary(int x, int y) {

	if (x<1 || y<1 || x>N || y>N) return false;
	return true;
}


void print() {

	cout << "\n";
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cout << dp[i][j] << " ";
		}
		cout << "\n";
	}
}

int solve(int x, int y) {
	
	dp[x][y] = 1;

	for (int i = 0; i < 4; i++) {

		int temp =0;
		int nextX = x + dx[i];
		int nextY = y + dy[i];

		if (!isBoundary(nextX, nextY)) continue;
		else if (map[x][y] >= map[nextX][nextY]) continue;
		else if (dp[nextX][nextY] > 0) {
			dp[x][y] = (dp[nextX][nextY] + 1 > dp[x][y]) ? dp[nextX][nextY] + 1 : dp[x][y];
			continue;
		}

		int ret = solve(nextX, nextY) + 1;
		dp[x][y] = (ret > dp[x][y]) ? ret : dp[x][y];
		
	}

	return dp[x][y];
}

int main() {
	
	int maxNum = 0, tmp = 0;
	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 1; i <= N; i++) {

		for (int j = 1; j <= N; j++) {
			
			if (dp[i][j] == 0) 
				tmp = solve(i, j);
			
			maxNum = (tmp > maxNum) ? tmp : maxNum;
		}
	}

	cout << maxNum << "\n";
	return 0;
}
```
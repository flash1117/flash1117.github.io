---
layout: post
title:  "Dynamic Programming (4)"
date:   2019-10-29 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

#### Longest Common Subsequence (LCS)

- 입력으로 2문자열이 주어졌을 때 common subsequence 중 가장 긴 문자열을 찾는 방법

이 문제의 어떤 Optimal Substructure 이 존재하는가?

생각해볼수 있는 방법으로는 

**이 문제의 최적해의 일부분이 어떤 부분의 최적해가 될 수 있는가?**

배열 x 와 y 가 있다고 가정 했을 때, 최적해가 `z[0] ~ z[3]` 까지의 길이를 가지고 있다고 한다면 `z[0] ~ z[2]` 는 각각 최대 길이의 1씩 감소 시켰으므로 `x[x_index_num-1]` 과 `y[y_index_num-1]` 의 최적해 여야 한단 소리이다. 

예시를 든다고 z의 길이를 보여주기 위해 저렇게 표시했지만 실제로는 L[i,j] = L[i-1,j-1] + 1 과 같은 식이 되어야 할 것이다. (각 배열에는 최적해가 들어가야 하니까)

```
int dp[][];


void LCS(int m , int n) {

    for(int i =0; i<=m; i++)
        for(int j =0; j<=n; j++)
        {
            if(x[i] == y[j])
                dp[i][j] = dp[i-1][j-1] + 1;
            else
                dp[i][j] = (dp[i-1][j] > dp[i][j-1]) ? dp[i-1][j] : dp[i][j-1] ;
        }
}
```
시간 복잡도는 O(nm) 이다.

#### Knapsack Problem

- Knapsack 은 등에 매는 가방 같은 것이다.

도둑이 가방을 들고 물건을 훔칠 때, 물건의 가격과 무게는 각각 다를 것이며 가방에는 총량이 w로 정해져 있다. w를 초과하게 되면 도둑이 들고 움직일 수 없게 되니 w를 초과하지 않는 한도 내에 가장 비싼 물건들을 담는 내용이다.

입력 값으로는 n개가 주어지는데 각각 가격과 무게가 주어진다.

생각해 볼수 있는 수로는

1. 가격이 높은 것 부터 선택
2. 무게가 가벼운 것부터 선택
3. 단위 무게당 가격이 높은 것부터 선택

가 있고 3번이 가장 그럴듯 해 보이지만, 이걸 Greedy 하게 물건을 고르게 된다면 반례가 생겨버린다.

(1 ~ 5 까지 있다고 가정했을 때, 5가 가장 단위 가격이 높아서 골랐더니 남는 무게로는 1 과 2를 고를수 밖에 없어서 골랐는데 3과 4를 합친 가격이 더 비싼 경우)

따라서 문제를 풀기 위한 방법은 가방의 무게 또한 고려해서 한뒤 i번째의 아이템을 선택 하냐 마느냐를 생각하는 것이다.

얼핏보면 O(nW) 인 다항시간 알고리즘인데, 이 문제는 np hard 문제이다.  

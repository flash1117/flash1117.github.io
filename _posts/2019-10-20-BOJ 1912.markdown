---
layout: post
title:  "BOJ 1912"
date:   2019-10-20 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <algorithm>

using namespace std;

int n;
int num[100001];
int dp[100001];

void solve() {

	int isSumMinus = num[0];
	dp[0] = num[0];

	for (int i = 1; i < n; i++) {

		isSumMinus += num[i];
	
		if(num[i] > isSumMinus && isSumMinus <0) dp[i] = max(dp[i - 1], num[i]);
		else dp[i] = max(dp[i - 1], isSumMinus);
		if (isSumMinus < 0) isSumMinus = 0;
		
	}

	cout << dp[n - 1];
}

int main() {

	cin >> n;
	for (int i = 0; i < n; i++) 
		cin >> num[i];
	
	solve();

	return 0;
}
```

4트 만에 성공한 문제이다.

처음에 실패한 원인은, for 문안에서 탐색을 하다가 음수가 나오게 되면 `continue` 를 하고 isSumMinus 를 초기화 하고 계속 순회하는 방식으로 풀었었다.

반례는 i 번째에 음수가 나왔어도 그 전까지 연속으로 더했던 것이 양수이면 계속해서 이어나가는게 더 큰 값을 얻을 수 있기 때문이다.

다음 2번더 실수를 한 것은 구현의 문제였는데, 초기에는
`if(num[i] > isSumMinus && isSumMinus <0) dp[i] = max(dp[i - 1], num[i]);` 이 코드가 없었다. 이 코드를 넣은 이유는 주어진 테스트 케이스가 전부 음수 일 경우, 초기값 설정을 `num[0]` 으로 하고 for문은 1번째 부터 돌게 되는데 만약 주어진 수열이 `-10 , -4 ...` 로 이어져 나간다면 -4 가 최댓값으로 유지되어야 하는데 그러지 못했기 때문이다.

총 걸린시간은 **24ms** 이고, 메모리도 많이 잡아먹었는데 이것보다 나은 코드가 있을 것 같아서 좀 더 코드를 다듬어 봐야 할 것 같다.
---
layout: post
title:  "BOJ 1173"
date:   2019-11-27 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, m, M, T, R;

int solve() {
	int time = 0;
	int cur = m;
	while (1) {

		if (m + T > M) break;

		if (N == 0) return time;

		if (cur + T <= M) {
			cur += T;
			N--;
			time++;
		}
		else { // 운동 못할때
			cur -= R;
			cur = m > cur ? m : cur;
			time++;
		}
	}

	return -1;
}

int main() {

	cin >> N >> m >> M >> T >> R;

	cout << solve() << "\n";
	return 0;
}
```

#### 구현

- N이 감소되면 안되는 조건이 보이지 않기 때문에 무한루프를 생성해서, N이 차감되다가 0이 되어서 운동을 완료한 순간 지금까지 소비한 시간을 return 값으로 주었다. 

- 무한루프를 생성하였지만, 운동을 못할 경우 -1 을 반환하라는 문제의 조건이 있기 때문에 운동을 못하는 조건인 최소 맥박 m + 1분 운동하면 증가하게 되는 맥박량 T 가 최대맥박수 M 보다 크게 되는 경우는 무한루프를 깨고 -1을 반환하도록 작성하였다.

- 운동을 할 때엔 M을 넘어서면 안되기 때문에 미리 비교를 해보아야하지만, 최소맥박량은 비교를 할 필요없이 일단 감소시키고 작다고 판단되면 m으로 설정해주면 되기 때문에 삼항연산자를 통하여 구현하였다.
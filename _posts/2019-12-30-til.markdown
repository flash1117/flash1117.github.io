---
layout: post
title:  "Front End - React(3)"
date:   2019-12-30 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL js
cover:  "/assets/TIL.png"
---

- 프로그램 도중에 `debugger;` 라는 코드를 써놓으면 브라우저에서 실행 도중에 이 구문을 만나면 멈추고 **Sources** 페이지로 이동해서 여러가지 정보를 보기 쉽게 해준다.

- 가끔씩 태그들에 이벤트를 걸 때 기본적인 동작과정을 못하도록 (새 창이 리로드 된다거나) 할 때가 있는데 이것은 이벤트 객체인 e에 `e.preventDefault()` 로 기본적인 동작과정을 멈출 수 있다.

- 이벤트가 실행될 때 함수안의 this의 값은 아무것도 가지고 있지 않다. 그래서 `this.state. ----` 을 해도 오류가 뜨게 되는데 이런 경우에는 이벤트함수가 끝나는시점에 `.bind(this)` 를 추가하면 this는 component로 인식하게 된다.

    - bind 함수는 매개변수로 넘긴 객체를 복사해서 this로 넘기는 역할을 한다.

- React 생성자가 아닌 경우에 동적으로 state 값을 바꾸게 하려면 
```
this.setState({
    mode: 'abcd'
    // 변경하고 싶은 값의 객체
});
```
와 같이 `setState()` 를 이용해야 바꿀 수 있다.

- 변수를 `data-id` 와 같은 방식으로 주게 되면 브라우저에서 디버깅을 할 때 dataset의 하위에 id 라는 항목으로 나타나게 된다.

- js 에서 문자를 숫자로 바꿀 때 `Number(문자)` 를 하면 숫자로 바뀌게 된다.

- Component 안에서 받은 props를 직접적으로 바꾸는 것은 금지되어있다.

- event가 실행되어야 하는 함수를 handler 라고도 한다.

- html form 에서 제공하는 onSubmit 이라는 함수가 있다.

- js 에서 `push` 를 하면 기존 배열에 추가를 하는 것이지만, `concat`을 하게 되면 원본을 건드리지 않고 해당 원소를 추가한 배열을 리턴받아서 새로운 변수에 할당할 수 있다.

- render 함수와 전혀 관계가 없는 작업을 하고 있음에도, 다른 컴포넌트의 render가 작동되는 것을 막기위해서 react에서는 `shouldComponentUpdate()` 이라는 함수를 제공한다.
    - `shouldComponentUpdate()` 의 결과값이 false 면 render 함수는 작동하지 않고, true 이면 작동하게 된다.

- `var a = [1,2]` 라는 배열이 있을 때 `var b = Array.from(a)` 와 같은 방식으로 같은 주소는 아니지만 같은 원소를 가진 배열을 새로 생성할 수 있다. (배열 만 가능하다.)

- 객체를 복사하고 싶은 경우에는 `var b = Object.assign( {}, a)` 를 하면 객체 a를 복사해서 b에 내용을 넣은 새로운 객체를 생성할 수 있다.
    - 첫번째 매개변수로 빈 괄호가 아니라 `이름 : 값` 처럼 pair 를 추가해주게 되면 객체 a 와 pair 들을 추가한 객체를 얻을 수 있게 된다.
    - 주제는 원본을 변하지 않게 하는 것이기 때문에 immutable 과 같은 주제로 검색을 하면 더 좋은 자료를 얻을 수 있을 것 같다.
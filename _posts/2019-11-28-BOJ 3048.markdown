---
layout: post
title:  "BOJ 3048"
date:   2019-11-28 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>

using namespace std;

int N1, N2, T;
vector<char> vec1;
vector<char> vec2;

void solve() {

	vector <char> vec;

	for (int i = vec1.size() - 1; i >= T; i--) {
		vec.push_back(vec1[i]);
	}

	int index = T-1;
	for (int i = 0; i < 2 * T; i++) {

		if (i % 2 == 0) {
			if(i/2 < vec2.size() && i/2 >=0)
				vec.push_back(vec2[i/2]);
		}
		else {
			if (index >= 0 && index < vec1.size()) {
				vec.push_back(vec1[index]);
			}
			index--;
		}
	}

	for (int i = T; i < vec2.size(); i++)
		vec.push_back(vec2[i]);

	for (int i = 0; i < vec.size(); i++)
		cout << vec[i];
}

int main() {

	char temp;
	cin >> N1 >> N2;
	for (int i = 0; i < N1; i++)
	{
		cin >> temp;
		vec1.push_back(temp);
	}

	for (int i = 0; i < N2; i++) {
		cin >> temp;
		vec2.push_back(temp);
	}
	cin >> T;
	solve();

	return 0;
}
```

#### 구현

- 처음으로 주어진 문자열은 거꾸로 전환되어서 다른 문자열과 충돌하기 시작한다.

- 매번 해당 index에서 vector 에 insert 같은 걸 하는 건 계산횟수에 낭비가 있을 것 같아서, 처음부터 한번에 정렬을 하고자 했다.

- 주어진 T 가 처음 문자열의 길이보다 작다면 남는 문자열 만큼 미리 push 해주고 시작을 하였다. 규칙을 찾아본다면 나머지가 2xT만큼 돌면서 나머지가 0일 경우에는 두번째 문자열의 선두부터, 나머지가 1일 경우에는 거꾸로 전환된 문자열의 선두부터 들어오게 된다. vector를 이용했으니 잘못된 범위 참조가 있으면 안되므로 조건문을 삽입하여 push 하였다.

- 2xT 만큼 돌고 T가 작은 숫자일 경우 두번째 문자열의 자투리가 남게 되므로, 남은 부분을 삽입한 뒤 출력하도록 구현하였다.
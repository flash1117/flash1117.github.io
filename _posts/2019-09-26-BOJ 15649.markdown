---
layout: post
title:  "BOJ 15649"
date:   2019-09-26 13:00:59
author: mollangzzang
categories: Algorithm
tags:	완전탐색 BruteForce permutation 순열
cover:  "/assets/algorithm.png"
---

# 알고리즘

```
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define Endl "\n"

int N, M;
vector <int> vec;

int main() {

	cin >> N >> M;

	int cnt = M - 1;

	for (int i = 0; i < N; i++) {
		vec.push_back(i+1);
	}

	sort(vec.begin(), vec.end());

	do {

		for (int i = 0; i < M; i++)
			cout << vec[i] << " ";
		cout << Endl;
		
		
	} while (next_permutation(vec.begin(), vec.end()));
	

	return 0;
}
```

처음 작성한 코드인데, `next_permutation` 이 `vector` 의 크기만큼 출력을 하다보니 이 문제에서는 중복된 수가 출력이 되지 않아야 하지만 중복되어 수가 출력 되는 문제가 있었다. 중복을 없애려면 없앨 수 있지만 순열을 내가 직접 짜 보는게 더 도움이 될 것같아서 DFS를 사용해보기로 했다.

```
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define Endl "\n"

int N, M;
vector <int> vec;
int num[9];
bool visited[9];

void solve(int depth, int cnt) {

	if (depth == M) {

		for (int i = 0; i < M; i++)
			cout << num[i] << " ";
		cout << Endl;

		return;
	}


	for (int i = cnt; i < N; i++) {

		if (!visited[vec[i]]) {
			num[depth] = vec[i];
			visited[vec[i]] = true;
			solve(depth + 1, cnt);
			visited[vec[i]] = false;
		}
			
	}

}


int main() {

	cin >> N >> M;

	for (int i = 0; i < N; i++)
		vec.push_back(i + 1);

	solve(0, 0);

	return 0;
}
```

위 코드는 DFS를 이용하여 풀었는데, 중복을 해결하려 visited 를 찍었다. cnt 라는 매개변수를 넣었으면 이를 이용해서 visited 를 찍지 않고 해결할 방법이 있을 것 같은데.. 너무 비효율적인 알고리즘이 된것 같다. 경과시간은 약 32ms 정도 걸려서 통과는 했는데, 짬이 날때 한번더 풀어봐야 할 문제인 것 같다.
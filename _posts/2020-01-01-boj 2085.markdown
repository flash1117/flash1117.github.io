---
layout: post
title:  "BOJ 3058"
date:   2020-01-01 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BruteForce
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>

using namespace std;
int N;
char map[50][50];

int getMaxLen() {

	int ret = 0;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			int cnt = 0;
			for (int k = i; k < N; k++) {
				if (map[i][j] == map[k][j]) cnt++;
				else break;
			}
			ret = ret > cnt ? ret : cnt;
			cnt = 0;
			for (int k = j; k < N; k++) {
				if (map[i][j] == map[i][k]) cnt++;
				else break;
			}
			ret = ret > cnt ? ret : cnt;
		}
	}

	return ret;
}

int main() {

	int maxLen = 0;
	string input;
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> input;
		for (int j = 0; j < N; j++) {
			map[i][j] = input[j];
		}
	}

	for (int i = 0; i < N; i++) {

		for (int j = 0; j < N - 1; j++) {
			if (map[i][j] != map[i][j + 1]) {

				char temp = map[i][j];
				map[i][j] = map[i][j + 1];
				map[i][j + 1] = temp;

				int ret = getMaxLen();
				maxLen = ret > maxLen ? ret : maxLen;

				temp = map[i][j];
				map[i][j] = map[i][j + 1];
				map[i][j + 1] = temp;
			}
		}
	}

	for (int j = 0; j < N; j++) {
		for (int i = 0; i < N - 1; i++) {

			if (map[i][j] != map[i + 1][j]) {

				char temp = map[i][j];
				map[i][j] = map[i+1][j];
				map[i+1][j] = temp;

				int ret = getMaxLen();
				maxLen = ret > maxLen ? ret : maxLen;

				temp = map[i][j];
				map[i][j] = map[i + 1][j];
				map[i + 1][j] = temp;
			}
		}
	}
	
	cout << maxLen << "\n";
	return 0;
}
```

#### 구현

정말 완전탐색으로 구현했는데, `92ms`가 나왔다. 코드를 좀 더 효율적으로 개선할 수 있을 것 같다. 가령 swap을 하는데 j번째 와 j+1번째를 바꿀 경우 j열과 j+1열 그리고 i행 이렇게 3가지의 경우의 수만 탐색하면 반복문의 횟수가 현저히 줄어들게 된다.

이 방법이 아니라도 queue 를 이용하여 현재 노드에서 진행방향의 대각선으로 이동할 수 있는 bool type value를 추가해서 진행해나가도 최대 길이를 구할 수 있을 것 같다.

- 다음 행 또는 다음 열을 참조해서 swap을 진행하였기에 N-1 까지가 아닌 N-2 까지 반복문을 진행하며 swap 을 하였고, getMaxLen 함수를 통하여 최대 길이를 return 받아서 비교를 해주었다.

---
layout: post
title:  "BOJ 1347"
date:   2019-12-01 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>

using namespace std;

int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };
int map[120][120];
string input;

typedef struct {
	int x, y, dir;
}pos;

int chgDir(int cur, char ch) {

	if (ch == 'L') {
		if (cur == 0) return 3;
		else return cur - 1;
	}
	else if(ch == 'R') {
		if (cur == 3) return 0;
		else return cur + 1;
	}
	
}

void solve() {

	queue <pos> q;
	q.push({ 60,60,2 });
	int index = 0;
	int maxX = 60, minX = 60, maxY = 60, minY = 60;

	while (!q.empty()) {

		int curX = q.front().x;
		int curY = q.front().y;
		int dir = q.front().dir;
		map[curX][curY] = 1;

		q.pop();

		maxX = curX > maxX ? curX : maxX;
		maxY = curY > maxY ? curY : maxY;
		minX = curX > minX ? minX : curX;
		minY = curY > minY ? minY : curY;

		if (index == input.length()) break;
		if (input[index] == 'F') {
			q.push({ curX + dx[dir], curY + dy[dir], dir });
		}
		else {
			dir = chgDir(dir, input[index]);
			q.push({ curX, curY, dir });
		}
		index++;

	}

	for (int i = minX; i <= maxX; i++) {
		for (int j = minY; j <= maxY; j++) {
			if (map[i][j] != 0) cout << ".";
			else cout << "#";
		}
		cout << "\n";
	}

}

int main() {

	int N;
	cin >> N;
	cin >> input;
	solve();

	return 0;
}
```

#### 구현

- 미로찾기 와 같은 형식을 가지고 있는 일반적인 시뮬레이션 문제이다. 다른 것이라고 한다면 시작점이 정해져 있지 않다는 점인데, 이러한 특성을 이용해서 움직인 곳과 벽을 출력하라는 방식으로 문제가 출제되었다.

- 주어진 명령의 최대횟수는 50회인데, 정중앙에서 시작을 한다는 가정하에 배열의 최대 크기는 대략 100을 넘으면 되지만, 나는 좀 더 넉넉하게 120씩 잡고 시작하였다.

- 큐를 사용하지 않아도 되지만, 제일 이해하기 쉬운 구조가 큐를 이용한 방식이라 사용하였다.
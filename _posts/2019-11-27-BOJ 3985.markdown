---
layout: post
title:  "BOJ 3985"
date:   2019-11-27 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int L, N;
int map[1001];

int main() {

	pair<int, int> p1 = { 0,0 };
	pair<int, int> p2 = { 0,0 };

	int src, dst, maxCnt =0, temp=0;
	cin >> L;
	cin >> N;
	for (int i = 1; i <= N; i++) {
		int cnt = 0;
		cin >> src >> dst;
		if (dst - src > p1.first) {
			p1.first = dst - src;
			p1.second = i;
		}

		for (int j = src; j <= dst; j++) {
			
			if (map[j] == 0) {
				map[j] = i;
				cnt++;
			}
		}
		if (cnt > p2.first) {
			p2.first = cnt;
			p2.second = i;
		}
	}
	cout << p1.second << "\n";
	cout << p2.second << "\n";

	return 0;
}
```

#### 구현

- 최대 L 길이 만큼의 Map 을 작성하여 주어진 테스트케이스 순서대로 자원을 선점하고, 간단한 조건문을 통해 크기비교만 한다면 풀 수 있는 문제이다.

- BFS 또는 DFS 를 이용하여 visited 를 찍어본 경험이 있다면 별다른 함정이 없어서 쉽게 맞출 수 있을 것 같다.
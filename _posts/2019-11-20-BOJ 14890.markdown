---
layout: post
title:  "BOJ 14890"
date:   2019-11-20 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>
#include <cmath>

using namespace std;

int N, L;
int map[101][101];
bool visited[101][101];

void initArray() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			visited[i][j] = false;
		}
	}
}

bool verCompare(int index, int pivot) {

	int left = 0, right = 0;

	if (map[index][pivot] - map[index][pivot - 1] == 1 && pivot > 0) { // left

		for (int i = pivot - 1; i >= 0; i--) {
			
			if (!visited[index][i] && map[index][i] == map[index][pivot] - 1) {
				left++;
			}

			if (left == L && i == pivot - L) {
				for (int j = pivot - 1; j >= i; j--)
					visited[index][j] = true;
				return true;
			}
		}

	}
	if (map[index][pivot] - map[index][pivot + 1] == 1 && pivot < N-1) // right 
	{
		for (int i = pivot + 1; i <= N-1; i++) {

			if (!visited[index][i] && map[index][i] == map[index][pivot] - 1) {
				right++;
			}

			if (right == L && i == pivot + L) {
				for (int j = pivot + 1; j <= i; j++)
					visited[index][j] = true;
				return true;
			}
		}

	}
	return false;
}

bool horCompare(int index, int pivot) {

	int left = 0, right = 0;

	if (map[pivot][index] - map[pivot-1][index] == 1 && pivot > 0) { // left

		for (int i = pivot - 1; i >= 0; i--) {

			if (!visited[i][index] && map[i][index] == map[pivot][index] - 1) {
				left++;
			}

			if (left == L && i == pivot - L) {
				for (int j = pivot - 1; j >= i; j--)
					visited[j][index] = true;
				return true;
			}
		}

	}
	if (map[pivot][index] - map[pivot+1][index] == 1 && pivot < N-1) // right 
	{
		for (int i = pivot + 1; i <= N - 1; i++) {

			if (!visited[i][index] && map[i][index] == map[pivot][index] - 1) {
				right++;
			}

			if (right == L && i == pivot + L) {
				for (int j = pivot + 1; j <= i; j++)
					visited[j][index] = true;
				return true;
			}
		}

	}
	return false;
}

int solve() {

	int ret = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N - 1; j++) {

			if (abs(map[i][j] - map[i][j + 1]) > 1) break;
			else {
				if (map[i][j] == map[i][j + 1]);
				else {
					if (verCompare(i, (map[i][j] > map[i][j + 1]) ? j : j + 1));
					else break;
				}
			}
			
			if (j == N - 2) {
				ret++;
			}
		}
	}

	initArray();

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N - 1; j++) {

			if (abs(map[j][i] - map[j + 1][i]) > 1) break;
			else {
				if (map[j][i] == map[j + 1][i]);
				else {
					if (horCompare(i, map[j][i] > map[j + 1][i] ? j : j + 1));
					else break;
				}
			}
			if (j == N - 2) ret++;
		}
	}
	return ret;
}

int main() {

	cin >> N >> L;
	
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) 
			cin >> map[i][j];
		
	cout << solve() << "\n";
	return 0;
}
```

구현하는데 정말 시간이 많이 걸린 문제이다. 코드를 작성하고 지우고를 몇번 반복했는지 모르겠다..

##### Logic

- 반복문을 순회하면서 크기비교를 하는데 1보다 크다면 두고 볼것도 없이 탈출했으며, abs (절대값)를 통하여 해결하였다.

- 다리를 만들면서 중복되는 부분이 있으면 안되기 때문에 visited 를 찍어서 중복되는 일이 없도록 하였다.

##### 실수한 점

- 본문 중간 중간에 continue 를 넣었었는데, 뒤에 `if(j == N-2) ret++` 를 고려하지 않았었다. continue 를 사용할 경우 뒤에 영향을 미칠 코드가 있는지 확인하고, 되도록이면 탈출문을 처음에 작성하는 것이 좋을 것 같다.

- index 비교 구문에서 굉장히 헷갈렸는데, 배열의 참조 범위를 넘어서면 안되기 때문에 최대 크기에서 -1을 돌리는 것이 맞지만 이럴 경우 제일 마지막 수의 경우의 수는 또 다시 비교를 해주어야했다. 그러다보니 코드가 지저분해져서 최대한 예외처리가 필요없는 코드를 작성하려고 노력했다.

- solve 함수 하나에 다 우겨넣기에는 가독성이 너무 떨어졌다. 중간에 print 를 찍어서 확인하는데도 시간이 많이 걸려서, 수직과 수평방향일 때 로직은 똑같지만 따로 나누어서 함수로 작성하여 solve 함수에서는 크기 차이가 났을 때 큰 수의 index를 매개변수로 주어서 호출하는 식으로 작성하였다.

이 문제를 구현하다보니 내가 너무 자잘한 실수를 많이 한다는 것을 깨달았는데, 이런 문제를 더 풀어보면서 다듬을 수 밖에 없을 것 같다.
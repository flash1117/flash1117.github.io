---
layout: post
title:  "2019-10-06 TIL - HTTP"
date:   2019-10-06 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Network HTTP
cover:  "/assets/TIL.png"
---

## HTTP Protocol

    - HyperText Transfer Protocol
    - 웹 상에서 클라이언트와 서버간에 요청/응답(request/response) 으로 정보를 주고 받을 수 있는 프로토콜
    - 주로 HTML 문서를 주고 받는데 사용된다.
    - TCP 와 UDP를 사용하며, 80번 포트를 사용한다.

        - 비연결(Connectionless)

            - 클라이언트가 요청을 서버에 보내고 서버가 적절한 응답을 클라이언트에 보내면 바로 연결이 끊긴다.
        
        - 무상태(Stateless)

            - 연결을 끊는 순간 클라이언트와 서버의 통신은 끝나며 상태 정보를 유지하지 않는다.

## HTTPS Protocol

    - HyperText Transfer Protocol over Secure Socket Layer
        - 또는 HTTP over TLS , HTTP over SSL, HTTP Secure

    - HTTPS의 기본 TCP/IP 포트로 443 번 포트를 사용한다. 
    - HTTPS는 소켓 통신에서 일반 텍스트를 이용하는 대신에, 웹 상에서 정보를 암호화하는 SSL이나 TLS 프로토콜을 통해 세션 데이터를 암호화한다.
        - TLS(Transport Layer Security) 프로토콜은 SSL(Secure Socket Layer) 프로토콜에서 발전한 것이다.
        - 두 프로토콜의 주요 목표는 기밀성, 데이터 무결성, ID 및 디지털 인증서를 사용한 인증을 제공하는 것이다.
    
    - 따라서 데이터의 적절한 보호를 보장하는데, 보호의 수준은 웹 브라우저에서의 구현 정확도와 서버 소프트웨어, 지원하는 암호화 알고리즘에 달려있다.

    - 금융 정보나 메일 등 중요한 정보를 주고 받는 것은 HTTPS를 사용하고 아무나 봐도 상관없는 페이지는 HTTP를 사용한다.

## HTTPS 필요성
    - 클라이언트인 웹 브라우저가 서버에 HTTP를 통해 웹 페이지나 이미지 정보를 요청하면 서버는 이 요청에 응답하여 요구하는 정보를 제공하게 된다.

    - HTML은 텍스트이고, HTTP를 통해 이런 텍스트 정보를 교환하는 것이다.
    
    - 이때 주고받는 텍스트 정보에 주민등록번호나 비밀번호와 같이 민감한 정보가 포함된 상태에서 네트워크 상에서 중간에 제 3자가 정보를 가로챈다면 보안 상 큰 문제가 발생하게 된다.

    - 즉, 중간에 정보를 볼 수 없도록 주고 받는 정보를 암호화 하는 방법인 HTTPS를 사용하게 되는 것이다.

## HTTPS 원리
    - 공개키 알고리즘 방식

    - 암호화, 복호화 시킬 수 있는 서로 다른키를 이용한 암호화 방법
        - 공개키 : 공개키 저장소에 등록 되어 있는 모두에게 공개된 키.
        - 개인키 : 개인에게만 공개, 클라이언트-서버 구조에서는 서버가 가지고 있는 비공개키

    - 클라이언트 -> 서버
        - 사용자의 데이터를 공개키로 암호화
        - 서버로 전송 (데이터를 가로채도 개인키가 없으므로 복호화 불가능)
        - 서버의 개인키를 통해 복호화하여 요청 처리

## HTTPS 장단점
    - 장점
        - 네트워크 상에서 열람, 수정이 불가능함으로 안전하다.

    - 단점
        - 암호화를 하는 과정에 웹 서버에 부하를 주게 된다.

        - HTTPS는 설치 및 인증서를 유지하는데 추가적인 비용이 발생한다.

        - HTTP 에 비해 느리다.

        - 인터넷 연결이 끊긴 후 재인증 시간이 소요된다.
            - HTTP는 비연결형임으로 웹 페이지를 보는 중 인터넷 연결이 끊겼다가 다시 연결 되어도 페이지를 계속 볼 수 있다.

            - 그러나 HTTPS의 경우 Socket (데이터를 주고 받는 경로) 자체에서 인증을 하기 때문에 인터넷 연결이 끊기면 소켓도 끊어져서 HTTPS 인증이 다시 필요하게 된다.

## HTTP 요청 응답 헤더

- HTTP 헤더 내 일반 헤더 항목

    - 요청 및 응답 메세지 모두에서 사용가능한 일반 목적의 헤더 항목

    - 주요 항목
        - Date : HTTP 메세지를 생성한 일시 (RFC 1123 에서 규정)
            -`Date: Sun, 6 Oct 2019 22:00:00 GMT`
        - Connection : 클라이언트와 서버 간 연결에 대한 옵션 설정(다소 모호한 복잡성 있음)
            - `Connection: close` : 현재 HTTP 메세지 직후에 TCP 접속을 끊는 다는 것을 알림
            - `Connection : Keep-Alive` : 현재 TCP 커넥션을 유지
        - Cache-Control
        - Pargma
        - Trailer
    
    - Entity in HTTP Header / Entity Header 항목
        - 요청 및 응답 메세지 모두에서 사용 가능한 Entity (콘텐츠, 본문, 리소스 등)에 대한 설명 헤더

        - 주요 항목들
            - Content-Type : 해당 개체에 포함되는 미디어 타입 정보
                - 컨텐츠의 타입(MIME 미디어 타입) 및 문자 인코딩 방식 `EUC-KR, UTF-8`을 지정
                - 타입 및 서브타입 으로 구성
                - `Content type : text/html; charset-latin-1` : 해당 개체가 html 으로 표현된 텍스트 문서이고 iso-latin-1 문자 인코딩 방식으로 표현됨
            - Content-Language : 해당 개체와 가장 잘 어울리는 사용자 언어 (자연언어)

            - Content-Encoding : 해당 개체 데이터의 압축 방식
                - `Content-Encoding : gzip, deflate`
                - 만일 압축이 시행되었다면, Content-Encoding 및 Content-Length 2개 항목을 토대로 압축 해제 가능
            - Content-Length : 전달 되는 해당 개체의 바이트 길이 또는 크기 (10진수)
                - 응답 메세지 Body의 길이를 지정하거나, 특정 지정된 개체의 길이를 지정함
            - Content-Location : 해당 개체가 실제 어디에 위치하는 가를 알려줌
            - Content-Disposition : 응답 Body를 브라우저가 어떻게 표시해야 할지 알려주는 헤더
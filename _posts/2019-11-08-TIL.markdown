---
layout: post
title:  "scanf에 관하여"
date:   2019-11-08 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Algorithm
cover:  "/assets/TIL.png"
---

`while(1) ` 같은 무한루프가 있다면 안에 break 문을 넣어서 탈출을 시키거나 아니면 정상적인 변수를 넣어서 조건을 맞추면 탈출하도록 구현을 하면 되지만, 알고리즘 공부를 하면서 다른 사람들의 코드를 보다보면 기본적인 함수를 가져다 쓰면서도 그 함수에 대해서 제대로 모르는 경우가 많은 것 같다.

그 중 scanf 에 대한 것이 있었는데,

```
char s[11];

int main() {

    while(~scanf("%10s", s))
        puts(s);

        return 0;
}
```

라는 코드가 있다고 가정했을 때, 콘솔 / 터미널에서는 사용자가 표준 입력으로 입력을 할 때 입력을 계속할 것인지 그만 둘 것인지 알 수 있는 방법이 없기 때문에, 입출력 인터럽트에 묶여서 계속 대기 상태 일 것이다.

하지만 이런 코드가 사용 될 수 있는 이유는 EOF Signal 이 있기 때문인데, Windows 의 경우 **Ctrl + Z** Linux 의 경우 **Ctrl + D** 로 EOF를 보낸다.

다만 이 방법을 사용하려면 반드시 개행 (줄바꿈)이 된 상태에서 넣어주어야 정상적으로 동작하게 된다.

이러한 방법으로 `scanf` 가 stdin stream 에서 입력이 더 이상 들어오지 않는 것을 알게 된다면 int형으로 **-1** 을 반환하게 된다.

**-1**은 4byte 에서 bit 로 표현을 하게 된다면 0xFFFFFFFF 인데, 이를 `~` 연산자를 통하여 반전 시키게 되면 0x00000000 이 되어서 **0**이 되게 된다.

C/C++ 에서는 **0** 은 False 이며 0을 제외한 모든 수는 True 처리가 된다. 따라서 위 코드는 while 문을 탈출하게 되는 것이다.

또한 `scanf` 는 return 값이 대입된 변수의 갯수를 반환한다. 대입된 변수라고 한다면 `scanf("%d %s %s %d")`와 같이 변수의 자료형이 달라도 그런 것에 상관하지 않고 4를 반환하게 된다. 이를 증감 또는 감소하여 while 문을 탈출하는 식으로 코드를 작성할 수도 있을 것이다.
---
layout: post
title:  "Programmers - 여행경로"
date:   2019-12-12 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DFS
cover:  "/assets/algorithm.png"
---

```
#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
bool visited[10000];

bool isFullVisit(int ticket_Size){
    for(int i=0; i<ticket_Size; i++) {
        if(!visited[i]) return false;
    }
    return true;
}

void DFS(int index,vector<string> &answer, vector<vector<string>> &tickets) {
    
    visited[index] = true;
    answer.push_back(tickets[index][1]);
    
    for(int i =0; i<tickets.size(); i++) {
        if(tickets[index][1] == tickets[i][0] && !visited[i]){
            DFS(i,answer,tickets);
            if(isFullVisit(tickets.size())) return;
            else {
                visited[i] = false;
                answer.pop_back();
            }
        }
    }
}

vector<string> solution(vector<vector<string>> tickets) {
    vector<string> answer;
    sort(tickets.begin(), tickets.end());
    int ticketSize = tickets.size();
    
    for(int i =0; i<tickets.size(); i++) {
        if(tickets[i][0] == "ICN") {
            answer.push_back("ICN");
            DFS(i, answer, tickets);
        }
        if(isFullVisit(ticketSize))
            return answer;
        else {
            answer.clear();
            for(int i=0; i<ticketSize; i++) visited[i] = false;
        }
    }
    
    return answer;
}
```

#### 구현

- 정렬 시킨 뒤, 순서대로 DFS를 돌려서 알파벳이 빠른 순으로 정렬되도록 구현하였다.

- visited 를 이용하여 중복으로 방문하지 않도록 하였으며, DFS 내부에서 전부 방문하지 못하는 경우의 수를 방문했다가 빠져나왔을 경우에는 answer 과 visited를 초기화 해주었다.

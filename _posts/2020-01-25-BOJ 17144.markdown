---
layout: post
title:  "BOJ 17144"
date:   2020-01-25 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>

using namespace std;

int R, C, T;
int map[50][50];
int spread[50][50];
vector <pair<int, int>> airCleaner;
int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

void print() {
	cout << endl;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++)
		{
			cout << map[i][j] << " ";
		}
		cout << endl;
	}
}

bool isBoundary(int x, int y) {
	if (x<0 || y<0 || x>R - 1 || y>C - 1) return false;
	return true;
}

int solve() {

	while (T--) {

		for (int i = 0; i < R; i++) { // 미세먼지 확산
			for (int j = 0; j < C; j++) {
				int cnt = 0;
				for (int k = 0; k < 4; k++) {

					int nextX = i + dx[k];
					int nextY = j + dy[k];

					if (isBoundary(nextX, nextY) && map[nextX][nextY] != -1) {
						spread[nextX][nextY] += map[i][j] / 5;
						cnt++;
					}
				}

				map[i][j] -= cnt * (map[i][j] / 5);
			}
		}
		for (int i = 0; i < R; i++) {
			for (int j = 0; j < C; j++) {
				map[i][j] += spread[i][j];
				spread[i][j] = 0;
			}
		}

		for (int i = airCleaner[0].first - 1; i > 0; i--) 
			map[i][0] = map[i - 1][0];
		
		for (int i = 0; i < C-1; i++) 
			map[0][i] = map[0][i + 1];
		
		for (int i = 0; i < airCleaner[0].first ; i++) 
			map[i][C - 1] = map[i + 1][C - 1];
		
		for (int i = C - 1; i > 1; i--) 
			map[airCleaner[0].first][i] = map[airCleaner[0].first][i - 1];
		
		map[airCleaner[0].first][1] = 0;

		for (int i = airCleaner[1].first + 1; i < R-1; i++) 
			map[i][0] = map[i + 1][0];
		
		for (int i = 0; i < C - 1; i++)
			map[R-1][i] = map[R-1][i + 1];

		for (int i = R - 1; i > airCleaner[1].first; i--) 
			map[i][C - 1] = map[i - 1][C - 1];
		
		for (int i = C - 1; i > 1; i--) {
			map[airCleaner[1].first][i] = map[airCleaner[1].first][i - 1];
		}

		map[airCleaner[1].first][1] = 0;
	}

	int ret = 0;
	for (int i = 0; i < R; i++) 
		for (int j = 0; j < C; j++) 
			ret += map[i][j];
	

	return ret+2;
}

int main() {

	cin >> R >> C >> T;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			cin >> map[i][j];
			if (map[i][j] == -1) {
				airCleaner.push_back(make_pair(i, j));
			}
		}
	}

	cout << solve() << "\n";
	return 0;
}
```

#### 구현

- 4방향을 순회하면서 map에서 바로바로 빼버리면 다음 방향의 경우 `map[i][j] / 5` 의 수가 변할 수 있기 때문에, spread 배열을 따로 생성하여 맵의 순회가 전부 끝난 뒤 합치도록 하였다.

- `map[i][j] / 5` 의 값이 매 순간 변하지 않도록 count 해서 4방향을 전부 순회한 뒤, 한꺼번에 빼도록 하였다.
    - count를 하지 않고 3중 for문 안에 들어가기 전 미리 int 형으로 `map[i][j]` 값을 할당해 놓는다면 바로 바로 빼도 상관없을 것 같다.

- 공기청정기에서 나오는 바람은 미세먼지가 없는 바람이므로 공기청정기의 바람이 나오는 칸은 값이 0이 되어야 한다. for문을 각 방향에 맞도록 각각 구현하였으며, `int temp` 와 같은 변수를 선언하지 않기 위해서 반시계 방향으로 바람이 불어서 들어오는 경우에는 시계방향 순으로, 시계방향으로 바람이 부는 경우에는 반시계 방향으로 순회를 하여 불필요한 변수의 선언을 막았다.
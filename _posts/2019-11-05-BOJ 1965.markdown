---
layout: post
title:  "BOJ 1965"
date:   2019-11-05 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, maxNum;
int input[1001];
int dp[1001];

void solve() {

	for (int i = 1; i <= N; i++) {
		for (int j = i-1; j >= 0; j--) {

			if (input[i] > input[j])
				dp[i] = (dp[j] + 1 > dp[i]) ? dp[j] + 1 : dp[i];

		}
		maxNum = (dp[i] > maxNum) ? dp[i] : maxNum;
	}
	cout << maxNum << "\n";
}

int main() {

	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> input[i];
	}
	solve();

	return 0;
}
```

LCS 문제로, 범위 값도 크지 않아서 구현이 어려운 편도 아니다.

순회를 하면서 지금보다 작은 수들을 비교하면서 가장 긴 부분을 dp 배열에 저장해서 최고값을 찾아내는 방식을 구현을 하였다.


---
layout: post
title:  "BOJ 1331"
date:   2019-12-04 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>

using namespace std;

bool visited[6][6];
vector<pair<int, int>> vec;

int dx[] = { -2,-2,-1,-1,1,1,2,2 };
int dy[] = { -1,1,-2,2,2,-2,1,-1 };

bool isProper(int src, int dst) {

	for (int i = 0; i < 8; i++) {

		int nextX = vec[dst].first + dx[i];
		int nextY = vec[dst].second + dy[i];

		if (nextX == vec[src].first && nextY == vec[src].second) return true;
	}
	return false;
}

void solve() {

	if (!isProper(0, 35)) {
		cout << "Invalid";
		return;
	}

	for (int i = 0; i < 36; i++) {

		bool State = false;
		
		if(!visited[vec[i].first][vec[i].second])
			visited[vec[i].first][vec[i].second] = true;
		else {
			cout << "Invalid";
			return;
		}

		if (i > 0) {
			State = isProper(i - 1, i);
			if (!State) {
				cout << "Invalid";
				return;
			}
		}	
	}

	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			if (!visited[i][j]) {
				cout << "Invalid";
				return;
			}
		}
	}

	cout << "Valid";
	return;
}

int main() {

	string input;
	for (int i = 0; i < 36; i++) {
		cin >> input;
		vec.push_back(make_pair(input[0] - 'A', input[1] - '1'));
	}
	solve();

	return 0;
}
```

#### 구현

고려해야 할 조건은 다음과 같다.

- 문제에서 마지막에 방문한 곳은 처음으로 돌아 갈 수 있어야 하기 때문에, 마지막 36번째에 입력받은 수가 1번째 입력받은 수와 적절한지 여부

    - 적절한 수란, 나이트가 이동했다고 가정했을 때 올바른 경로인지 체크하는 것.

- 모두 한번씩 순회 한다고 하였으니, 혹시 방문하지 못한 위치가 있다거나 중복으로 방문한 위치가 있는가

    - 이 부분은 입력 받을 때 visited check 를 해주면서 비교를 해주어서 틀린 조건일 경우 return 시키는 것이 속도에 있어서 좋을 것 같다. 다만 보기 깔끔하게 하기 위해서 속도를 포기하고 함수 하나에 몰아서 구현하였다.

- 이동한 경로가 전의 포인트와 비교를 했을 경우 적절한 위치가 맞는지 여부 체크

- 입력값을 string 으로 받았기 때문에, char형을 int로 바꾸는 작업을 한뒤 vector 에 삽입하여 구현하였다.

- 답 출력시 철자에 유의할 것.
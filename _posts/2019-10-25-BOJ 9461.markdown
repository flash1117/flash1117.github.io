---
layout: post
title:  "BOJ 9461"
date:   2019-10-25 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

#define Endl "\n"

int T, N;
long long dp[101];

void solve() {

	dp[1] = 1;
	dp[2] = 1;
	dp[3] = 1;

	for (int i = 4; i <= 100; i++) 
		dp[i] = dp[i - 2] + dp[i - 3];

}

int main() {

	cin >> T;
	solve();
	while (T--) {

		cin >> N;
		cout << dp[N] << Endl;
		
	}

	return 0;
}
```

처음에 solve 함수에서 100이 아닌 N 까지만 돌도록 코드를 짰었지만, 최악의 시간복잡도를 생각했을 때 미리 dp 배열에 저장해두고 입력받은 값을 출력 하는 방식 더 나을 것 같아서 위와 같은 코드로 수정을 했다. 다만 dp 안에 들어가는 범위 값을 제대로 체크하지 않아서 overflow 가 나서 한번 틀렸었다. 그걸 제외하면 테스트 케이스부터 잘 나와있기 때문에 매우 쉽게 풀 수 있는 문제였다.

**배열의 크기를 곰곰히 생각해보는 습관을 가져야할 것 같다.**
---
layout: post
title:  "BOJ 13458"
date:   2020-01-11 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>

using namespace std;

int N, Ai, cnt1, cnt2;
vector <int> testPlace;

long long solve() {

	long long ret = 0;

	for (int i = 0; i < testPlace.size(); i++) {

		testPlace[i] -= cnt1;
		if (testPlace[i] <= 0) ret++;
		else if (testPlace[i] % cnt2 == 0) ret += (long long)(testPlace[i] / cnt2) +1;
		else ret += (long long)(testPlace[i] / cnt2) + 2;
	}

	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> Ai;
		testPlace.push_back(Ai);
	}
	cin >> cnt1 >> cnt2;

	cout << solve() << "\n";

	return 0;
}
```

#### 구현

- 각 수를 저장해서 감독관이 헤아릴수 있는 수보다 크다면 부감독관이 헤아릴 수 있는 수로 나누어 떨어지는지 아닌지로 구분하여 구현하였다.

- interger 는 버림 연산을 하기 때문에 나누어 떨어지지 않는 경우에는 별도로 +1을 더해주었다.
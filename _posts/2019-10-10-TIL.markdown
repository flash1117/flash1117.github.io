---
layout: post
title:  "2019-10-10 TIL"
date:   2019-10-10 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Algorithm 
cover:  "/assets/TIL.png"
---

### Class 를 이용한 정렬 방식

```
#include <iostream>
#include <algorithm>

using namespace std;

class Student {
    public:
        string name;
        int score;
        Student(string name, int score) {
            this->name = name;
            this->score = score;

        } // 생성자는 초기화를 위해서 생성
        bool operator <(Student &student) {
                return this->score < studnet.score;
        }
};

int main() {

    Student students[] = {
        Student("김 기 태 ", 99);
        Student("김 태 용 ", 93);
        Student("박 성 민 ", 88);
        Student("엄 정 하 ", 98);
    }

    sort(students, students + 4);
    for(int i =0; i<4; i++) {
        cout << studnets[i].name << ' ';
    }
    return 0;
}
```

클래스를 이용한 정렬 방식. 특정한 객체에 따른 정렬 방식.


### Union-Find

Union-Find 는 대표적인 그래프 알고리즘이다. Disjoint-Set 알고리즘이라고도 하는데, 여러개의 노드가 존재 할 때 두개의 노드를 선택하여 현재 이 두 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘이다.

1 부터 7까지의 노드 있다고 가정한다면,

```
1   2   3   4   5   6   7
1   2   3   4   5   6   7
```
과 같이 자기 자신을 가리키는 표를 만들 수 있을 것이다.

그런 와중 1 과 2 를 연결 했을 때, 일반적으로 더 값이 작은 쪽으로 합치게 된다.

```
1   2   3   4   5   6   7
1   1   3   4   5   6   7
```

그래서 2의 두번째 인덱스 값이 1로 바뀌었다.
만약 3 의 바로 위의 부모 노드가 2 라면 **재귀**를 통하여 부모 노드의 부모 노드를 찾아서 1이라는 값을 얻어서 3의 인덱스 값에 삽입 하도록 한다.

```
#include <iostream>

using namespace std;

int getParent(int parent[], int x) {
    if(parent[x] == x) return x;
    return parent[x] = getParent(parent, parent[x]);
}

// 각 부모 노드를 합칩니다.
void unionParent(int parent[], int a, int b) {

    a = getParent(parent, a);
    b = getParent(parent, b);
    if(a<b) parent[b] = a;
    else parent[a] =b;

}

// 같은 부모 노드를 가지는지 확인
int findParent(int parent[], int a ,int b) {

    a = getParent(parent , a);
    b = getParent(parent, b);
    if(a==b) return 1;
    else return 0;
}

int main(){

    int parent[11];
    for(int i =1; i<=10; i++)
        parent[i] =i;

    unionParent(parent, 1, 2);
    unionParent(parent, 2, 3);
    unionParent(parent, 3, 4);
    unionParent(parent, 5, 6);
    unionParent(parent, 6, 7);
    unionParent(parent, 7, 8);
    unionParent(parent, 1, 5);
    
    return 0;
}

```
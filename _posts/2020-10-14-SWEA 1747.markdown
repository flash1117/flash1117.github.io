---
layout: post
title: "SWEA 1747"
date: 2020-10-10 13:00:59
author: mollangzzang
categories: Algorithm
tags: SWEA
cover: "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>
using namespace std;

int map[12][12];
int N, core, len;
vector<pair<int, int>> vec;
bool visited[12][12];
int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

bool isBoundary(int x, int y) {
	if (x<0 || y<0 || x>N - 1 || y>N - 1) return false;
	return true;
}

bool isValid(pair<int,int> pos, int dir) {

	int curX = pos.first;
	int curY = pos.second;
	for (int i = 0; i < N+1; i++) {

		int nextX = curX + dx[dir];
		int nextY = curY + dy[dir];

		if (isBoundary(nextX, nextY) && map[nextX][nextY] == 1) return false;
		else if (isBoundary(nextX, nextY) && visited[nextX][nextY]) return false;
		else if(!isBoundary(nextX, nextY)){
			return true;
		}

		curX += dx[dir];
		curY += dy[dir];
	}

	return false;
}

int setValid(pair<int, int> pos, int dir) {

	int ret = 0;
	int curX = pos.first;
	int curY = pos.second;

	for (int i = 0; i < N+1; i++) {

		if (isBoundary(curX, curY)) {
			visited[curX][curY] = true;
			curX += dx[dir];
			curY += dy[dir];
			ret++;
		}
		else break;

	}
	return ret-1;
}

void solve(int depth ,int cnt, int sum) {

	if (cnt <= vec.size()) {

		cout << len << " ";

		if (core < cnt) {
			core = cnt;
			len = sum;
		}
		else if (core == cnt) {
			len = len > sum ? sum : len;
		}



	}

	if (depth >= vec.size()) return;

	for (int i = 0; i < 4; i++) {

		bool canBuild = isValid(vec[depth], i);
	//	cout << vec[depth].first << " " << vec[depth].second << " " << canBuild << endl;
		if (canBuild) {

			int _len = setValid(vec[depth], i);
			solve(depth + 1, cnt + 1, sum + _len);

			int curX = vec[depth].first;
			int curY = vec[depth].second;

			for (int j =0; j < N+1; j++) {

				if (isBoundary(curX, curY)) {
					visited[curX][curY] = false;
					curX += dx[i];
					curY += dy[i];
				}
				else break;

			}


		}

	}

	solve(depth + 1, cnt, sum);

	return;
}


int main() {


	int num = 0;
	int t;
	cin >> t;
	while (t--) {

		num++;
		core = 0;
		len = 0;
		vec.clear();

		cin >> N;

		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				visited[i][j] = false;

		for (int i = 0; i < N; i++) {

			for (int j = 0; j < N; j++) {

				cin >> map[i][j];
				if (map[i][j]) {

					if (i == 0 || i == N - 1 || j == 0 || j == N - 1);
					else {
						vec.push_back(make_pair(i, j));
					}
				}
			}
		}

		solve(0,0,0);
		cout << "#"<<num <<" " <<len << "\n";
	}

	return 0;
}

```

1. 가장자리에 있는 Core는 DFS에 넣을 필요가 없기때문에 제외한 나머지를 vec 변수에 넣어주었다.

2. `solve`함수가 DFS로 이루어져있는데 사실 매개변수로 받는 cnt는 없이 구현할 수 있을 것 같기도하다. 4개의 방향으로 선을 설치할 수 있는지 검사해주었고, for문이 끝나고 난 뒤에 해당 core에서 선을 설치하지 않도록 건너뛰는 작업을 시행해주었다.

3. for문을 돌면서 각 방향에 따라 검사를 해주었는데, `isValid` 함수를 통하여 경계선까지 무사히 선을 설치할 수 있는지 체크해주었고, 만약 설치할 수 있다면 `setValid` 함수를 통하여 `visited` 이차원 배열로 선을 설치하였다.

4. 기저영역에서 depth를 통하여 남은 core의 갯수가 지금 현재 core의 최대값을 넘어서지 못한다는 판단을 해서 **return**을 하게 된다면 불필요한 연산을 줄일 수 있을 것 같다.

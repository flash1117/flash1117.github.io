---
layout: post
title:  "BOJ 6359"
date:   2019-11-03 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int T, N;
int dp[101];
int isOpen[101];

void solve() {

	dp[1] = 1; // 1
	for (int i = 1; i <= 100; i++)
		isOpen[i] = 1;

	for (int i = 2; i <= 100; i++) {

		for (int j = 1; j <= 100 / i; j++) {
			if (isOpen[j * i] == 0) isOpen[j * i] = 1;
			else isOpen[j * i] = 0;
		}
		dp[i] = dp[i - 1] + isOpen[i];
	}

}
int main() {

	cin >> T;
	solve();

	while (T--) {
		cin >> N;
		cout << dp[N] << "\n";
	}

	return 0;
}
```

이 문제에서는 내가 index 번째에서 철창의 문이 열려있는지 아닌지만 확인을 하면되는데, 열려있는지 아닌지 구분하는 과정을 간단하게 줄이기가 어려워서 따로 배열을 하나 만들어버렸다. 

지금보다 계산횟수를 줄이려면 참조한 index 번째에서 약수를 이용하면 뭔가 더 좋은 코드가 나올 것 같다.
---
layout: post
title:  "Java 문법 - 객체 (2)"
date:   2019-10-28 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Java
cover:  "/assets/TIL.png"
---

#### 상속

- 기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것
- 두 클래스를 조상과 자손으로 관계를 맺어주는 것
- 자손은 조상의 모든 멤버를 상속받는다. (생성자, 초기화 블럭은 제외)
- 자손의 멤버개수는 조상보다 적을 수 없다. (같거나 더 많다.)

`class 자손클래스 extends 조상클래스 {}`

#### 상속 관계

- 공통부분은 조상에서 관리하고, 개별부분은 자손에서 관리한다.

- 조상의 변경은 자손에 영향을 미치지만, 자손의 변경은 조상에 아무런 영향을 미치지 않는다.

- Java 는 단일상속 만을 지원한다. (C++ 에서는 다중 상속을 지원)

#### 포함 관계

- 한 클래스의 멤버변수로 다른 클래스를 선언하는 것

- 작은 단위의 클래스를 먼저 만들고, 이 들을 조합해서 하나의 커다란 클래스를 만든다.

#### 클래스간의 관계결정하기

- 원은 도형이다. (A Circle is a Shape)
- 원은 점을 가지고 있다. (A Circle has a Point)

```
Class Shape {
    String color = "blue";
    void draw() {

    }
}

Class Point {
    int x;
    int y;

    Point() {
        this(0,0);
    }
    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

}

class Circle extends Shape {

    Point center;
    int r;

    Circle() {
        this(new Point(0,0), 100);
    }
    Circle(Point center, int r) {

        this.center = center;
        this.r = r;
    }
}

class Triangle extends Shape {
    Point[] p;

    Triangle(Point[] p) {
        this.p = p;
    }
    Triangle(Point p1, Point p2, Point p3) {
        p = new Point[]{p1,p2,p3};
    }

}
```

#### Object Class

- 조상이 없는 클래스를 자동적으로 Object 클래스를 상속받게 된다.

- 상속계층도의 최상위에는 Object 클래스가 위치한다.

- 모든 클래스는 Object 클래스에 정의된 11개의 메서드를 상속받는다. (toString(), equals(Object obj), hashCode() 등)

#### Overriding

- 조상클래스로부터 상속받는 메서드의 내용을 상속받는 클래스에 맞게 변경하는 것을 오버라이딩이라고 한다.

- **오버라이딩의 조건**

    - 선언부가 같아야 한다. (이름, 매개변수, 리턴타입)

    - 접근제어자를 좁은 범위로 변경할 수 없다.

        - 조상의 메서드가 protected 였다면 protected 나 public 으로만 변경이 가능하다.
    
    - 조상클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.

- 기존의 없는 새로운 메서드를 정의하는 것은 **오버로딩**이다. (매개변수가 다른 메서드 정의)

#### super

- this : 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음 모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재.

- super : this 와 같다. 조상의 멤버와 자신의 멤버를 구별하는데 사용한다.

- 자손클래스으 인스턴스를 생성하면 , 자손의 멤버와 조상의 멤버가 합쳐진 하나의 인스턴스가 생성된다.

- 조상의 멤버들도 초기화 되어야 하기 때문에 자손의 생성자의 첫 문장에서 조상의 생성자들을 호출해야한다.

#### 패키지

- 서로 관련된 클래스와 인터페이스의 묶음.

- 클래스가 물리적으로 클래스파일 `*.class` 인 것처럼, 패키지는 물리적으로 폴더이다. 패키지는 서브 패키지를 가질 수 있으며, '.' 으로 구분하게 된다.

- 클래스의 실제 이름은 패키지명이 포함된 것이다. (String 클래스의 full name은 java.lang.String이다.)

- rt.jar은 Java API의 기본 클래스들을 압축한 파일

- 패키지는 소스파일에 첫 번째 문장으로 단 한번 선언한다.

- 하나의 소스파일에 둘 이상의 클래스가 포함된 경우, 모두 같은 패키지에 속하게 된다. (하나의 소스파일에 단 하나의 public 클래스만 허용한다.)

- 모든 클래스는 하나의 패키지에 속하며, 패키지가 선언되지 않은 클래스는 자동적으로 이름없는 (unnamed) 패키지에 속하게 된다.

#### 클래스패스 설정

- 클래스패스(classpath) 는 클래스파일을 찾는 경로로, 구분자는 **;** 이다.

- 클래스패스에 패키지가 포함된 폴더나 jar 파일을 나열한다.

- 클래스패스가 없으면 자동적으로 현재 폴더가 포함되지만 클래스패스를 지정할 때는 현재폴더(.)도 함께 추가해주어야 한다.

#### import

- import 문은 컴파일 시에 처리되므로 프로그램의 성능에 영향을 미치지 않는다.

- 이름이 같은 클래스가 속한 두 패키지를 import 할 경우에는 클래스 앞에 패키지 명을 붙여줘야 한다.

#### 제어자 (modifier)

- 클래스, 변수, 메서드의 선언부에 사용되어 부가적인 의미를 부여한다.

- 제어자는 크게 접근 제어자와 그 외의 제어자로 나뉜다.

- 하나의 대상에 여러 개의 제어자를 조합해서 사용할 수 있으나 **접근 제어자**는 단 **하나**만 사용이 가능하다.

`접근제어자 - public, protected, default, private`

`그 외 - static, final, abstract , native, transient, synchronized, volatile, strictfp`


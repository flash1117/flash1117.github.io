---
layout: post
title:  "BOJ 11051"
date:   2019-11-01 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;
int N, K;

// 이항 계수를 구하는 문제. (조합)
int dp[1001][1001];


void solve() {

	if (K == 1 || N == K) {
		cout << 1 << "\n";
		return;
	}
	
	dp[1][0] = 1;
	dp[1][1] = 1;

	for (int i = 2; i <= N; i++) {
		dp[i][0] = 1;
		dp[i][i] = 1;

		for (int j = 1; j < i; j++) {
			dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
			if (dp[i][j] > 10007) dp[i][j] %= 10007;
		}
	}

	cout << dp[N][K] << "\n";
}

int main() {

	cin >> N >> K;

	solve();
	return 0;
}
```

조합의 특성을 이용하여 dp로 구현해내는 문제이다. 조합이 그냥 일반적으로 구하는 공식인 `n!/(n-r)!*r!` 을 사용하게 되면 곱셈을 하는 과정에서 자료형의 범위를 넘어서서 오버플로우가 일어날 수도 있게 된다. 이 문제를 풀기 위해서 알아 둬야할 개념은

1. 0번째와 N번째 , 1번쨰와 N-1 번째 이런식으로 대칭되는 값을 갖게 된다는 것이다.

2. `nCk` 는 `n-1Ck-1 + n-1Ck` 라는 것이다.

지금 메모리 낭비가 좀 있긴 한데, 이 부분은 다듬어서 조합을 사용할 일이 있을 때 사용해도 좋을 것 같다.
---
layout: post
title:  "Java 문법 - 객체 (3)"
date:   2019-11-17 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Algorithm Java
cover:  "/assets/TIL.png"
---

#### 추상 클래스 (abstract class) 란?

- 클래스가 설계도라면 추상클래스는 **미완성 설계도**

- 추상메서드 (미완성 메서드)를 포함하고 있는 클래스
    - 추상 메서드 : 선언부만 있고 몸통 (body) 가 없는 메서드
    - `abstract return_type method_name();`

- 일반메서드가 추상메서드를 호출할 수 있다.

- 완성된 설계도가 아니므로 인스턴스 생성이 불가능하다.

- 다른 클래스를 작성하는데 도움을 줄 목적으로 작성된다.

```
abstract class Player {

    int currentPos; // 현재 play 되고 있는 위치를 저장하기 위한 변수

    Player() { // 추상 클래스도 생성자는 필요하다
        currentPos =0;
    }

    abstract void play(int pos);
    abstract void stop();

    void play() {
        play(currentPos);
    }
}
```

- 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우에 사용된다.

- 추상클래스를 상속받는 자손클래스에서 추상메서드의 구현부를 완성해야한다.

```
abstract class Player {

    abstract void play(int pos);
    abstract void stop();
    
    // 생략
}

class AudioPlayer extends Player {
    void play(int pos) {
        // 구현
    }
    void stop() {
        // 구현
    }
}

abstract class AbstractPlayer extends Player {
    void play(int pos) { // 구현 }
}

```

- 추상클래스를 작성할 때에는 **여러 클래스에 공통적으로 사용될 수 있는 추상클래스를 바로 작성** 또는 **기존클래스의 공통 부분을 뽑아서 추상클래스를 만든다.**

#### 인터페이스 (interface) 란?

- 일종의 추상클래스로써, 추상클래스보다 추상화 정도가 높다.

- 실제 구현된 것이 전혀없는 기본 설계도

- 추상메서드와 상수만을 멤버로 가질 수 있다.

- 인스턴스를 생성 할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다.

- 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는데 사용된다.

- **class** 대신 **interface**를 사용한다는 것 외에는 클래스 작성과 동일하다.

```
interface interface_name {
    public static final data_type name = value;
    public abstract methodName(...);
}
```

- 하지만 , 구성요소 (멤버) 는 추상메서드와 상수만 가능하다.
    - 모든 멤버변수는 public static final 이여야 하며 , 이는 생략이 가능하다.

    - 모든 메서드는 public abstract 이여야 하며, 이를 생략할 수 있다.

- 인터페이스도 클래스처럼 **상속**이 **가능**하다. ( 클래스와 달리 다중상속 허용)

- 또한 인터페이스는 Object 클래스와 같은 최고 조상이 없다.

#### 인터페이스의 구현

- 인터페이스를 구현하는 것은 클래스를 상속받는 것과 같다. 다만 **extends** 대신 **implements** 를 사용한다.
    - `class 클래스이름 implements 인터페이스이름 { // 추상메서드 구현 }`

- 인터페이스에 정의된 추상메서드를 완성해야 한다.

```
class Fighter implements Fightable {
    public void move() { // 생략 }
    public void attack() { // 생략 }

}

interface Fightable {
    void move(int x , int y);
    void attack(Unit u);
}

```

- 또한 상속과 구현이 동시에 가능하다.

```
class Fighter extends Unit implements Fightable {
    public void move(int x, int y) {// 생략}
    public void attack(Unit u) {// 생략}
}
```

- 인터페이스 타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를 참조할 수 있다.

#### 인터페이스를 이용한 다형성

- 인터페이스 타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를 참조할 수 있다.

- 인터페이스를 메서드의 매개변수 타입으로 지정할 수 있다.

- 인터페이스를 메서드의 리턴타입으로 지정할 수 있다.

#### 인터페이스의 장점

1. 개발시간 단축

    - 일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다.

    - 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고 양쪽에서 동시에 개발이 가능하다.

2. 표준화

    - 프로젝트에 사용되는 기본 틀을 인터페이스로 작성한다음, 개발자들에게 인터페이슬르 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다.

3. 관계

    - 서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 연관이 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현함으로써 관계를 맺어 줄 수 있다.

4. 독립적인 프로그래밍

    - 인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다.

    - 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 프로그래밍이 가능하다.

#### 인터페이스에 대해 기억해야 할 것

- 두 객체 간에 중간 역할을 한다.

- 클래스를 사용하는 쪽과 클래스를 제공하는 쪽이 나뉘어져 있다.

- 메서드를 사용하는쪽에서는 사용하려는 메서드의 선언부만 알면 된다.

```
class A {
    public void methodA(B b) {
        b.methodB();
    }
}

class B {
    public void methodB() {
        System.out.println("methodB()");
    }
}
```

위와 같은 코드가 아래와 같이 바뀐다.

```
class A {
    public void methodA(I i) {
        i.methodB();
    }
}

Interface I (void methodB(); )

class B implements I {
    public void methodB() {
        System.out.println("methodB()");
    }
}
```
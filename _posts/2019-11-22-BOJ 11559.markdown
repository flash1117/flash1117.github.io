---
layout: post
title:  "BOJ 11559"
date:   2019-11-22 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation BFS DFS
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

char map[13][7];
bool visited[13][7];

int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

void print() {
	cout << endl;
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			cout << map[i][j] << " ";
		}
		cout << endl;
	}
}

bool isBoundary(int x, int y) {
	if (x < 0 || y < 0 || x>11 || y>5) return false;
	return true;
}

void init() {
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			visited[i][j] = false;
		}
	}
}

bool BFS(int x, int y) {

	vector <pair<int, int>> footprint;
	queue <pair<int, int>> q;
	q.push(make_pair(x, y));
	visited[x][y] = true;
	
	int cnt = 1;

	while (!q.empty())
	{
		int curX = q.front().first;
		int curY = q.front().second;
		footprint.push_back(make_pair(curX, curY));

		q.pop();

		for (int i = 0; i < 4; i++) {
			int nextX = curX + dx[i];
			int nextY = curY + dy[i];

			if (isBoundary(nextX, nextY) && !visited[nextX][nextY] && map[x][y] == map[nextX][nextY]) {
				q.push(make_pair(nextX, nextY));
				visited[nextX][nextY] = true;
				cnt++;
			}
		}
	}

	if (cnt >= 4) {
	
		for (int i = 0; i < footprint.size(); i++) {
			map[footprint[i].first][footprint[i].second] = '.';
		}
		footprint.clear();
		return true;
	}
	return false;
}

void setMap() {

	for (int i = 0; i < 6; i++) {

		for (int j = 11; j >= 0; j--) {
			if (map[j][i] != '.') {

				for (int k = 11; k > j; k--) {
					if (map[k][i] == '.') {
						map[k][i] = map[j][i];
						map[j][i] = '.';
						break;
					}
				}

			}
		}
	}
}

int main() {

	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 6; j++) {
			cin >> map[i][j];
		}
	}

	int ret = 0, cnt = 0;
	bool isBreak = false;

	while(1) {
		cnt = 0;
		for (int i = 0; i < 12; i++) {
			for (int j = 0; j < 6; j++) {
				if (!visited[i][j] && map[i][j] != '.') {
					isBreak = BFS(i, j);
					if (isBreak) cnt++;
					
				}
			}
		}

		if (cnt == 0) break;
		else {
			ret++;
			init();
			setMap();
		}
	}
	
	cout << ret << "\n";
	return 0;
}
```

#### 로직

- 지금 현재 Map 에서 4개이상 연속되어 있는 뿌요 들이 다 터지고 난뒤 **뿌요들이 밑으로 내려오고 또 다시 터져야 1연쇄가 추가된다.** 따라서, visited 로 방문한 점들을 찍어준 뒤 맵을 전부 순회했다면 visited 를 초기화 함과 동시에 뿌요들을 Map 의 제일 밑바닥으로 몰아주는 setMap 을 구현하였다.

- 뿌요들을 순회하는 것은 일반적인 BFS 또는 DFS로 구현할 수 있으며, 그렇게 어려운점은 아니였다. 다만 count 가 4이상이 되었을때에는 map의 좌표들을 . 으로 바꾸는 작업을 해야하는데, 이 부분은 vector 를 선언하여 queue 를 돌리는 동안 방문한 점들을 넣어둔 것으로 구현하였다.

#### 실수한 부분

- setMap 의 구현 도중 뿌요의 맵을 거꾸로 생각했었다. 생각해보면 제일 밑바닥은 index 가 11이기 때문에 이중 for문을 구현하면서 열은 0부터 시작해도 상관없지만, 내부에 있는 for 문은 제일 큰 수부터 index를 줄여가면서 구현을 해야 했다.


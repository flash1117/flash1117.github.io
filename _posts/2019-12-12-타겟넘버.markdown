---
layout: post
title:  "Programmers - 타겟넘버"
date:   2019-12-12 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BFS
cover:  "/assets/algorithm.png"
---

```
#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(vector<int> numbers, int target) {
    int answer = 0;
    queue <pair<int,int>> q;
    q.push(make_pair(0,numbers[0]));
    q.push(make_pair(0,-numbers[0]));
    while(!q.empty()) {
        
        int cur = q.front().first;
        int sum = q.front().second;
        q.pop();
        
        if(cur == numbers.size()-1 && sum == target) answer++;
        
        if(cur < numbers.size()) {
            q.push({cur+1, sum + numbers[cur+1]});
            q.push({cur+1, sum - numbers[cur+1]});
        }
    
    }
    return answer;
}
```

#### 구현

프로그래머스에서 문제를 풀기 시작했는데, main 문이 없어서 그런지, 평소에 지역변수로 선언해서 함수 호출을 받지 않아서 그런지 DFS 로 구현하려 했음에도 불구하고 헷갈리게 되어서 BFS 로 구현을 하였다. 조금 더 환경에 익숙해지면 다시 DFS로 풀어봐야 할 문제이다.

- BFS 로 구현을 하나 DFS로 구현을 하나 개요는 같다. 현재 위치의 값을 더한 것과 뺀 경우에수를 추가해 나가면서 끝까지 순회하고 target 의 값과 비교하여 맞다면 answer + 1 아니면 그냥 나오는 방식으로 구현을 하면 된다.
---
layout: post
title:  "2020-01-05 TIL"
date:   2020-01-05 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL cs
cover:  "/assets/TIL.png"
---

#### Object Oriented Programming

- 객체 지향 프로그래밍 이전의 프로그래밍 패러다임을 살펴보면, 중심에 컴퓨터가 있었다. 컴퓨터가 사고하는대로 프로그래밍을 하는 것이다. 하지만 객체지향 프로그래밍이란 인간 중심적 프로그래밍 패러다임이라고 할 수 있다. 즉, 현실 세계를 프로그래밍으로 옮겨와 프로그래밍하는 것을 말한다. 현실 세계의 사물을 객체로 보고 그 객체로부터 개발하고자 하는 애플리케이션에 필요한 특징들을 뽑아와 프로그래밍 하는 것이다. 이를 **추상화**라고 한다.

- OOP로 코드를 작성하면 이미 작성한 코드에 대한 재사용성이 높다. 자주 사용되는 로직을 라이브러리로 만들어두면 계속해서 사용할 수 있으며 그 신뢰성을 확보 할 수 있다. 또한 라이브러리를 각종 예외상황에 맞게 잘 만들어두면 개발자가 사소한 실수를 하더라도 그 에러를 컴파일 단계에서 잡아낼 수 있으므로 버그 발생이 줄어든다. 또한 내부적으로 어떻게 동작하는지 몰라도 개발자는 라이브러리가 제공하는 기능들을 사용할 수 있기 때문에 생산성이 높아진다. 객체 단위로 코드가 나눠져 작성되기 때문에 디버깅이 쉽고 유지보수에 용이하다. 또한 데이터 모델링을 할 때 객체와 매핑하는 것이 수월하기 때문에 요구사항을 보다 명확하게 파악하여 프로그래밍 할 수 있다.

- 객체 간의 정보 교환이 모두 메세지 교환을 통해 일어나므로 실행 시스템에 많은 overhead가 발생하게 된다. 하지만 이것은 하드웨어의 발전으로 많은 부분 보완되었다. 객체 지향 프로그래밍의 치명적인 단점은 함수형 프로그래밍 패러다임의 등장 배경을 통해서 알 수 있는데, 객체가 상태를 갖는다는 것이다. 변수가 존재하고 이 변수를 통해 객체가 예측할 수 없는 상태를 갖게 되어 애플리케이션 내부에서 버그를 발생시킨다는 것이다. 이러한 이유로 함수형 패러다임이 주목받게 되었다.

#### 객체 지향적 설계 원칙

1. SRP (Single Responsibility Principle) : 단일 책임 원칙
    - 클래스는 단 하나의 책임을 가져야 하며 클래스를 변경하는 이유는 하나여야 한다.

2. OCP (Open- Closed Principle) : 개방 - 폐쇄의 원칙
    - 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.

3. LSP (Liskov Substitution Principle) : Liskov 치환 원칙
    - 상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야한다.

4. ISP (Interface Segregation Principle) : 인터페이스 분리 원칙
    - 인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다.

5. DIP (Dependency Inversion Principle) : 의존 역전 원칙
    - 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안된다.

#### RESTful API

- `REST` 란, REpresentational State Transfer의 약자이다. 여기에 ful 이라는 형용사형 어미를 붙여 -한 API 라는 표현으로 사용하고 있다. 즉, RESTful 하다는 것은 REST의 기본 원칙을 성실히 지킨 서비스 디자인이라는 것이다.

- **REST**는 API 설계의 중심에 자원(Resource)가 있고, HTTP Method를 통해 자원을 처리하도록 설계하는 것이다.

#### REST 6가지 원칙

- uniform interface
- stateless
- caching
- client-server
- hierarchical system
- code on demand

#### 그렇다면 RESTful 하게 API를 디자인 한다는 것은?

1. **리소스**와 **행위**를 명시적이고 직관적으로 분리한다.
    - 리소스는 **URI**로 표현되는데, 리소스가 가리키는 것은 명사로 표현되어야 한다.
    - 행위는 `HTTP Method`로 표현하고, `GET(조회)`, `POST(생성)`, `PUT(기존 entity 전체 수정)`, `PATCH(기존 entity 일부 수정)`, `DELETE(삭제)`을 분명한 목적으로 사용한다.

2. Message는 Header와 Body를 명확하게 분리해서 사용한다.

    - Entity 에 대한 내용은 Body에 담는다.
    - 애플리케이션 서버가 행동할 판단의 근거가 되는 컨트롤 정보인 API버젼 정보, 응답받고자 하는 MIME 타입 등은 header에 담는다.
    - header 와 body는 http header 와 http body로 나눌 수 있고, http body에 들어가는 json 구조로 분리할 수도 있다.

3. API 버젼을 관리한다.

    - 환경은 항상 변하기 때문에 API의 signature가 변경될 수도 있음에 유의하자.
    - 특정 API를 변경할 때는 반드시 하위호환성을 보장해야한다.

4. 서버와 클라이언트가 같은 방식을 사용해서 요청하도록 하여야 한다.

    - 브라우저는 form-data 형식의 submit으로 보내고 서버에서는 json 형태로 보내는 식의 분리보다는 json으로 보내든 둘다 form-data형식으로 보내든 하나로 통일한다.
    - URI가 플랫폼 중립적이여야 한다.

- 장점

1. OpenAPI를 제공하기 쉽다.
2. 멀티플랫폼 지원 및 연동이 용이하다.
3. 원하는 타입으로 데이터를 주고 받을 수 있다.
4. 기존 웹 인프라 (HTTP)를 그대로 사용할 수 있다.

- 단점

1. 사용할 수 있는 메소드가 4가지 밖에없다.
2. 분산환경에는 부적합하다.
3. HTTP 통신 모델에 대해서만 지원한다.

#### TDD

- Test Driven Development(TDD)는 매우 짧은 개발 사이클의 반복에 의존하는 소프트웨어 개발 프로세스이다.

- 우선 개발자는 요구되는 새로운 기능에 대한 자동화된 테스트케이스를 작성하고 해당 테스트를 통과하는 가장 간단한 코드를 작성한다. 일단 테스트 통과하는 코드를 작성하고 상황에 맞게 리팩토링하는 과정을 거치는 것이다. 말 그대로 테스트가 코드 작성을 주도하는 개발 방식인 것이다.

- 테스트 주도형 개발에서는, 새로운 기능을 추가하기 전 테스트를 먼저 작성한다. 테스트를 작성하기 위해서, 해당 기능의 요구사항과 명세를 분명히 이해하고 있어야 한다. 이는 사용자 케이스와 사용자 스토리 등으로 자가 코드를 작성하기 전에 보다 **요구사항에 집중할 수 있도록 도와준다.**

- 어떤 새로운 기능을 추가하면 잘 작동하던 기능이 제대로 작동하지 않는 경우가 생길 수 있다. 더욱 위험한 경우는 이를 개발자가 알아채지 못하는 경우인데, 이러한 경우를 방지하기 위해 테스트 코드를 작성하는 것이다. 새로운 코드를 작성할 때 테스트 코드를 작성함으로써, 새로운 기능이 제대로 작동함과 동시에 기존의 기능들이 잘 작동하는지 테스트를 통해 확인할 수 있는 것이다.

#### Refactor code

- **좋은 코드**를 작성하기란 정말 쉽지가 않다. 코드를 작성할 때 고려해야 할 요소가 한 두가지가 아니기 때문이다. 가독성이 좋도록 coding convention을 맞춰야 하며, 네이밍 규칙을 적용하여 메소드명, 변수명, 클래스명에 일관성을 줘야하며, 앞으로의 확장성 또한 고려해야 한다. 이와 동시에 비즈니스 로직에 대한 고려도 반드시 필요하며, 예외처리 부분 역시 빠트릴 수 없다. 이런 저런 부분을 신경쓰면서 코드를 작성할 수 있지만 끊임없이 발견되는 버그들을 디버깅하는 과정에서 코드가 더럽혀지기 마련이다.

- 이러한 이유로 리팩토링을 하게 되는데, 이 때 테스트 주도 개발을 통해 개발을 해왔다면 테스트 코드가 그 중심을 잡아줄 수 있다. 뚱뚱해진 함수를 여러 함수로 나누는 과정에서 해당 기능이 오작동을 일으킬 수 있지만 간단히 테스트를 돌려봄으로써 이에 대한 안심을 하고 계속해서 리팩토링이 진행 가능하다.

#### TDD의 단점

- 코드량이 늘어난다. 비즈니스 로직, 각종 코드 디자인에도 시간이 많이 소요가 되는데 거기에 더해 테스트 코드까지 작성하기란 힘든일이다. 코드의 퀄리티보다 빠른 생산성이 요구되는 시점에서는 좋지 않다.

- 어떠한 부분을 테스트해야할 지, 여러 테스트 프레임워크 중 어떤 것이 우리의 서비스와 맞는지 등 여러 부분에 대한 학습이 필요하며, 익숙해지는데에도 시간이 필요하다.

- 모든 코드에 대해 테스트 코드를 작성할 수 없다. (생각지도 못한 예외케이스가 있을 수 있다.) 또한 테스트코드를 작성한다고 해서 버그가 발생하지 않는 것은 아니다.
---
layout: post
title:  "BOJ 16236"
date:   2019-11-12 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <queue>

using namespace std;

typedef struct {
	int x, y, sharkSize, kCnt;
}pos;

int N;
int map[21][21];

int dx[] = { -1,0,0,1 };
int dy[] = { 0,-1,1,0 };
int nFishX, nFishY, nCnt;

void print() {
	cout << endl;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {

			cout << map[i][j] << " ";
		}
		cout << endl;
	}

}

bool isBoundary(int x, int y) {
	if (x<0 || y<0 || x>N - 1 || y>N - 1) return false;
	return true;
}

bool nextFish(int x, int y, int sharkSize) {

	queue <pos> temp;
	temp.push({ x,y,sharkSize, 0 });

	bool visited[21][21];
	for (int i = 0; i < 21; i++)
		for (int j = 0; j < 21; j++)
			visited[i][j] = false;

	nFishX = 0; nFishY = 0; nCnt = 0;
	while (!temp.empty()) {

		pos tmp = temp.front();
		temp.pop();

		for (int i = 0; i < 4; i++) {
			int nextX = tmp.x + dx[i];
			int nextY = tmp.y + dy[i];
			int sSize = tmp.sharkSize;
			int moveCnt = tmp.kCnt;
			
			if (isBoundary(nextX, nextY) && map[nextX][nextY] <= sSize && !visited[nextX][nextY]) {
				visited[nextX][nextY] = true;
//				cout << nextX << " " << nextY << endl;
				if (map[nextX][nextY] == 0 || map[nextX][nextY] == sSize) {
					temp.push({ nextX, nextY, sSize, moveCnt+1 });
				}
				else {
					
					if (nFishX == 0 && nFishY == 0 && nCnt == 0) {
						nFishX = nextX;
						nFishY = nextY;
						nCnt = ++moveCnt;
					}
					else {

						if (nCnt <= moveCnt) return true;
						else {
							if (nextX < nFishX) {
								nFishX = nextX;
								nFishY = nextY;
							}
							else if (nextX == nFishX && nextY < nFishY) {
								nFishY = nextY;
							}
						}
					}
				}
			}
		}

	}

	if (nFishX == 0 && nFishY == 0 && nCnt == 0) return false;
	else return true;
}

int solve(int X, int Y) {

	int ret = 0;
	queue <pos> q;
	q.push({ X,Y,2,0 });

	while (!q.empty()) {

		int curX = q.front().x;
		int curY = q.front().y;
		int sSize = q.front().sharkSize;
		int ccnt = q.front().kCnt;
		map[curX][curY] = 0;

		q.pop();
//		cout << endl;
//		cout << "shark Size : " << sSize;
//		print();
		bool state = nextFish(curX, curY, sSize);
		if (!state) return ret;
		else {
		
			ccnt++;
			if (ccnt == sSize) {
				sSize++;
				ccnt = 0;
			}
			q.push({ nFishX,nFishY,sSize,ccnt });
			ret+= nCnt;
		}
	}

	return ret;
}


int main() {

	int x=0, y=0;
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 9) { x = i; y = j; }
		}
	}

	cout << solve(x, y);

	return 0;
}
```

~~아기 상어 뚜루룻뚜루~~

친구가 쉽게 풀었다길래 풀어본 시뮬레이션 문제이다. 

문제를 풀면서 처음에 신경을 쓴 것은 우선 순위인데,

1. 위쪽
2. 왼쪽
3. 오른쪽
4. 아래쪽

방향으로 탐색을 한다는 것이다. 다만 주의 해야 할 점은 왼쪽과 오른쪽은 같은 행에 있을 때 비교를 해주어야 한다는 점이며, 비교 구문을 넣지 않고 구현한 코드가 있는지는 한번 찾아봐야 할 것 같다.

위 코드와 같이 dx 와 dy 배열들을 주고 돌리면 될 줄 알았지만, 큐를 통해 구현을 하게 되면 FIFO 이기 때문에 처음에만 우선순위가 높으면 몇 다리 건너서 먹이를 먹을때의 좌표가 최적의 좌표인지는 알 수 없게 된다.

예를 들어 0번째 행이라고 가정을 했을 경우, 

```
 4 2 9 0 1
 4 1 x x x
```

와 같이 map이 주어졌을 때, `sharkSize = 2` 이니 왼쪽으로 탐색을 먼저 할 것이다. 그런다음 오른쪽을 큐에 넣고 순서대로 진행을 하다보면 다음 먹이를 찾는 곳은 1행 1열이 되게 된다. 하지만 조건에서 주어진 최적의 먹이는 0행 3열에 위치하고 있기 때문에 처음 먹이를 발견했을 때의 거리와 동일한 곳에 위치한 먹이들의 우선순위를 비교해 주었다.
---
layout: post
title:  "BOJ 14499"
date:   2019-09-28 13:00:59
author: mollangzzang
categories: Algorithm
tags:	BFS Simulation
cover:  "/assets/algorithm.png"
---

# Algorithm

```
#include <iostream>
#include <queue>

using namespace std;

#define Endl "\n"

int N, M, diceX, diceY, K;
int map[21][21];
int order[1001];

int dice[] = { 0,0,0,0,0,0 };
int dx[] = { 0,0,-1,1 }; // 동 서 북 남
int dy[] = { 1,-1,0,0 };

typedef struct {

	int x, y, dir;
}pos;

bool isBoundary(int x, int y) {

	if (x<0 || y<0 || x>N - 1 || y>M - 1) return false;
	return true;
}

void diceChange(int direction) {
	int buf = 0;
	if (direction == 1) {

		buf = dice[3];
		dice[3] = dice[2];
		dice[2] = dice[1];
		dice[1] = dice[5];
		dice[5] = buf;
	}
	else if (direction == 2) {
		buf = dice[1];
		dice[1] = dice[2];
		dice[2] = dice[3];
		dice[3] = dice[5];
		dice[5] = buf;
	}
	else if (direction == 3) {
		buf = dice[0];
		dice[0] = dice[2];
		dice[2] = dice[4];
		dice[4] = dice[5];
		dice[5] = buf;
	}
	else if (direction == 4) {
		buf = dice[5];
		dice[5] = dice[4];
		dice[4] = dice[2];
		dice[2] = dice[0];
		dice[0] = buf;
	}
}

void print() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			cout << map[i][j] << " ";
		cout << Endl;
	}
}

void solve() {

	int orderNum=0, diceBottom = 0;
	queue <pos> q;
	q.push({ diceX, diceY , order[0] });
	dice[5] = map[diceX][diceY];

	while (!q.empty()) {

		int curX = q.front().x;
		int curY = q.front().y;
		int curDir = q.front().dir;

		q.pop();

		if (orderNum > 0) {
			diceChange(curDir);
			cout << dice[2] << Endl; // print top of dice
		}
		
		if (orderNum > 0 && map[curX][curY] == 0 && dice[5] != 0)
			map[curX][curY] = dice[5];
		
		else if (map[curX][curY] != 0) {
			dice[5] = map[curX][curY];
			map[curX][curY] = 0;
		}

//		cout << "current Direction : " << curDir << Endl;

//		for (int i = 0; i < 6; i++)
//			cout << dice[i] << " ";
//		cout << Endl;

//		print();

		for (int i = orderNum; i < K; i++) {
//			cout << "direction : " << order[orderNum] << Endl;
			
			int nextX = curX + dx[order[orderNum]-1];
			int nextY = curY + dy[order[orderNum]-1];
//			cout << nextX << " , " << nextY << Endl;
			if (isBoundary(nextX, nextY)) {
				q.push({ nextX, nextY, order[orderNum] });
				orderNum++;
				break;
			}
			else orderNum++;
		}		

	}



}


int main() {

	cin >> N >> M >> diceX >> diceY >> K;
	for (int i = 0; i < N; i++) {

		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 0; i < K; i++)
		cin >> order[i];

	solve();


	return 0;
}
```

```
    2
4   1   3
    5
    6
```

주사위의 전개도이다. 받는 명령으로 1 , 2 , 3 , 4 가 있는데 순서대로 동 서 북 남 이다.

만약 동쪽으로 가라는 명령인 1 을 받았으면

```
    2
6   4   1
    5
    3
```
위와 같이 변경될 것이다.

```
    2
1   3   6
    5
    4
```
서쪽의 경우 전개도.

```
    1                   6
4   5   3           4   2   3
    6                   1
    2                   5
```
북쪽 과 남쪽으로 가라는 명령을 받았을 때의 전개도이다.

전개도에서 `Direction` 을 받아서 옮기는 규칙만 파악하면 쉽게 풀 수 있었는데도 불구하고 푸는데 몇시간이 걸렸다. 두가지의 문제점이 있었는데,

첫번쨰는 **수일치**이다. 명령 `Direction` 이 `1 2 3 4` 이렇게 들어오는데 `dx` , `dy` 의 배열의 `index`는 `0 1 2 3` 이라서 -1을 해주는 걸 깜빡 했었다. 

두번째는 역시나 **문제를 잘못 파악한 것**이다. 시뮬레이션 문제를 풀 때 유독 도드라지는 문제점인 것 같다.. 대충 이해했다 싶으면 코드를 짜기 시작해서 그런 것 같은데, 이 문제에서 주사위 밑바닥이 0 이면 map 의 숫자를 가져오고 map은 0 으로 만든다는 생각에 당연하게 주사위가 숫자를 가지고 있고 map 이 0이면 주사위에 있는 수를 map에 주고 주사위 밑바닥을 0으로 주는 실수를 하고 있었다. <u>이거 찾는데 한시간 반이 걸렸다.</u> **문제를 똑바로 읽도록 하자.**
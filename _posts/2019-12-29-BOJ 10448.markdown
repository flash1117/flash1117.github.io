---
layout: post
title:  "BOJ 10448"
date:   2019-12-29 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BruteForce
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int tNum[1001];
bool is_tNum[1001];

void solve() {

	for (int i = 1; i <= 1000; i++) 
		tNum[i] = i * (i + 1) / 2;
	
	for (int i = 1; i <= 1000; i++) {

		for (int j = 1; j <= 1000; j++) {

			int sum = tNum[i] + tNum[j];
			if (sum > 1000) break;

			for (int k = 1; k <= 1000; k++) {

				sum = tNum[i] + tNum[j] + tNum[k];
				if (sum > 1000) break;

				if (is_tNum[sum]) continue;
				else is_tNum[sum] = true;
			}
		}
	}

}


int main() {

	ios_base::sync_with_stdio(false);

	int T;
	cin >> T;
	solve();

	while (T--) {

		int input;
		cin >> input;

		cout << is_tNum[input] << "\n";
	}


	return 0;
}
```

#### 구현

- 테스트 케이스의 수가 주어지고 해당 수에 경우 true or false 를 반환하는 문제이다.

- 결과를 출력하기 전에 배열에 해당 값들을 미리 지정해놓으면 시간을 절약할 수 있어서 solve 함수를 구현하였다.

- 해당 코드에서 1000까지 전부 돌렸지만, 삼각수를 계산하는 과정에서 1000이 넘을 때의 index를 기억해둔다면 1000까지 돌리지 않아도 되니 시간을 좀 더 줄일 수 있을 것 같다.

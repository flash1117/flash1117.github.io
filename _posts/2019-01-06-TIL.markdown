---
layout: post
title:  "2020-01-06 TIL"
date:   2020-01-06 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL cs
cover:  "/assets/TIL.png"
---

#### MVC Pattern

- Controller
    - 일종의 조정자이다. 클라이언트의 요청을 받았을 때, 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출한다.

    - 또한 클라이언트가 보낸 데이터가 있다면, 모델에 전달하기 쉽게 데이터를 가공한다. 모델이 업무를 마치면 그 결과를 뷰에게 전달한다.

- Model
    - 컨트롤러가 호출할 때, 요청에 맞는 역할을 수행한다. 비즈니스 로직을 구현하는 영역으로 응용프로그램에서 데이터를 처리하는 부분이다. 비즈니스 로직이란 업무에 필요한 데이터처리를 수행하는 응용프로그램의 일부라고 할 수 있다. DB에 연결하고 데이터를 추출하거나 저장, 삭제, 업데이트, 변환 등의 작업을 수행한다. 상태의 변화가 있을 때 컨트롤러와 뷰에 통보하여 후속 조치 명령을 받을 수 있게 한다.

- View
    - 컨트롤러로부터 받은 모델의 결과값을 가지고 사용자에게 출력할 화면을 만드는 일을 한다. 만들어진 화면을 웹 브라우저에 전송하여 웹 브라우저가 출력하게 하는 것이다. 화면에 표시되는 부분으로 추출한 데이터나 일반적인 텍스트 데이터를 표시하거나 입력폼 또는 사용자와의 상호작용을 위한 인터페이스를 표시하는 영역이다.
    

#### MVC 구동 원리

1. 웹 브라우저가 웹 서버에 웹 애플리케이션 실행을 요청한다.

2. 웹 서버는 들어온 요청을 처리할 수 있는 서블릿을 찾아서 요청을 전달한다.

3. 서블릿은 모델 자바 객체의 메서드를 호출한다.

4. 데이터를 가공하여 값 객체를 생성하거나, JDBC를 사용하여 데이터베이스와의 인터렉션을 통해 값 객체를 생성한다.

5. 업무 수행을 마친 결과값을 컨트롤러에게 반환한다.

6. 컨트롤러는 모델로부터 받은 결과값을 View에게 전달한다.

7. JSP는 전달받은 값을 참조하여 출력할 결과 화면을 만들고 컨트롤러에게 전달한다.

8. View로부터 받은 화면을 웹 서버에게 전달한다.

9. 웹 브라우저는 웹 서버로부터 요청한 결과값을 응답받으면 그 값을 화면에 출력한다.

#### JSP에 대한 기본적인 이해

- JSP는 HTML 중심의 코드 구조이므로 디자인 작업에 바로 사용할 수 있다. 또한 그 일이 끝나면 다시 프로그램 로직을 고칠 수도 있다.

- 하지만 프로그램 로직이 복잡할 경우 자바 코드의 논리적 구조를 알아보기가 힘들다.

- Servlet은 복잡한 프로그램 로직 구현에 적합하다. 컴파일 결과만 설치해도 되므로 소스 코드를 보호할 수도 있다. 하지만 HTML 문서 디자인이 바뀔 때마다 서블릿 클래스를 수정/컴파일/설치해야 하고, 웹 서버를 재가동하는 일을 되풀이해야 한다.

- 그러므로 프로그램의 복잡한 로직을 구사하는 코드는 서블릿 클래스 안에 기술하고, 프로그램의 결과를 보여주는 HTML 중심의 코드만 JSP페이지 안에 기술하는 것이 좋다.

- View 부분을 맡고 있는 것이 JSP이다.

#### Servlet

- 서블릿 클래스로부터 만들어진 객체를 의미한다. 하지만 모든 서블릿 객체를 서블릿이라고 할 수는 없다.

- 웹 컨테이너는 서가 서블릿 클래스를 가지고 서블릿 객체를 만든 다음에 그 객체를 초기화해서 웹 서비스를 할 수 있는 상태로 만들어야 서블릿이라고 할 수 있다.

- 서블릿 클래스가 인스턴스화 되어 서블릿 객체가 되고 이 서블릿 객체가 초기화되어 서블릿이 되는 것이다. 프로그래머가 해야 할 일은 정해진 규칙에 따라 서블릿 클래스를 작성하고, 컴파일하여 웹 컨테이너에 설치하고, 등록하면 된다.

- 모든 웹 서버는 멀티스레드 방식으로 작동한다. 멀티스레드란 프로그램의 실행 흐름이 여러 갈래로 나눠져서 동시에 실행되는 것을 말한다.

- 멀티 스레드 모델에서는 필요한 서블릿의 수가 적기 때문에 서블릿을 만들기 위해 필요한 시스템 자원과 서블릿이 차지하는 메모리를 절약할 수 있다.

- 하지만 여러 스레드가 동시에 한 서블릿을 사용하기 때문에 데이터 공유 문제에 신경을 써야 한다. 반면 싱글 스레드 모델에서는 데이터 공유 문제를 걱정할 필요가 없지만, 시스템 자원과 메모리가 더 많이 사용된다.


---
layout: post
title:  "BOJ 17142"
date:   2019-01-13 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm BruteForce
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int N, M, ret = -1, infectArea;
int map[50][50];
bool visited[50][50];
vector <pair<int,int>> vec;
int pick[10];
int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };
bool isCheck[2500];
typedef struct {
	int x, y, cnt;
}pos;


bool isBoundary(int x, int y) {
	if (x<0 || y<0 || x>N - 1 || y>N - 1) return false;
	return true;
}

void initArray() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 1) visited[i][j] = true;
			else visited[i][j] = false;
		}
	}

}

bool notVisitNodeExist() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (!visited[i][j] && map[i][j] == 0) return true;
		}
	}
	return false;
}

void solve(int depth, int cnt) {
	if (depth > vec.size()) return;

	if (cnt == M) {
		initArray();
		int maxTime = 0, index =0, infectCnt =0;
		queue <pos> q;
		for (int i = 0; i < M; i++) {
			q.push({ vec[pick[i]].first,vec[pick[i]].second, 0 });
			visited[vec[pick[i]].first][vec[pick[i]].second] = true;
		}

		while (!q.empty()) {
			int curX = q.front().x;
			int curY = q.front().y;
			int ccnt = q.front().cnt;

			q.pop();

			if (map[curX][curY] == 0) {
				maxTime = ccnt > maxTime ? ccnt : maxTime;
				infectCnt++;
			}

			if (infectCnt == infectArea) continue;
			/*if (index == ccnt) 
				isCheck[index++] = notVisitNodeExist();
			
			if (index >0 && !isCheck[index-1]) continue;*/

			for (int i = 0; i < 4; i++) {
				int nextX = curX + dx[i];
				int nextY = curY + dy[i];

				if (isBoundary(nextX, nextY) && map[nextX][nextY] == 0 && !visited[nextX][nextY]) {
					q.push({ nextX, nextY, ccnt + 1 });
					visited[nextX][nextY] = true;
				}
				else if (isBoundary(nextX, nextY) && map[nextX][nextY] == 2 && !visited[nextX][nextY])
				{
					q.push({ nextX, nextY, ccnt +1});
					visited[nextX][nextY] = true;
				}
			}
		}

		/*for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == 0 && !visited[i][j]) return;
				else if (map[i][j] == 2 && !visited[i][j]) continue;
			}
		}*/

		if (infectCnt != infectArea) return;
		else if (ret == -1) ret = maxTime;
		else ret = maxTime > ret ? ret : maxTime;
		return;
	}

	pick[cnt] = depth;
	solve(depth + 1, cnt + 1);
	pick[cnt] = 0;

	solve(depth + 1, cnt);

}

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2)
				vec.push_back({ i,j });
			else if (map[i][j] == 0) infectArea++;
		}
	}

	solve(0, 0);
	cout << ret << "\n";
	return 0;
}
```

처음에 생각한 비효율적인 코드이다. 주석 처리를 해놓긴 했지만, 처음에 어떤방식으로 실수를 했는지 기억하기 위해 남겨두었다.

좀 더 깔끔하게 정리를 한다면

```
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int N, M, ret = -1, infectArea;
int map[50][50];
bool visited[50][50];
vector <pair<int,int>> vec;
int pick[10];
int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

typedef struct {
	int x, y, cnt;
}pos;


bool isBoundary(int x, int y) {
	if (x<0 || y<0 || x>N - 1 || y>N - 1) return false;
	return true;
}

void initArray() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 1) visited[i][j] = true;
			else visited[i][j] = false;
		}
	}

}

void solve(int depth, int cnt) {
	if (depth > vec.size()) return;

	if (cnt == M) {
		initArray();
		int maxTime = 0, index =0, infectCnt =0;
		queue <pos> q;
		for (int i = 0; i < M; i++) {
			q.push({ vec[pick[i]].first,vec[pick[i]].second, 0 });
			visited[vec[pick[i]].first][vec[pick[i]].second] = true;
		}

		while (!q.empty()) {
			int curX = q.front().x;
			int curY = q.front().y;
			int ccnt = q.front().cnt;

			q.pop();

			if (map[curX][curY] == 0) {
				maxTime = ccnt > maxTime ? ccnt : maxTime;
				infectCnt++;
			}

			if (infectCnt == infectArea) continue;

			for (int i = 0; i < 4; i++) {
				int nextX = curX + dx[i];
				int nextY = curY + dy[i];

				if (isBoundary(nextX, nextY) && (map[nextX][nextY] == 0 || map[nextX][nextY] == 2) && !visited[nextX][nextY]) {
					q.push({ nextX, nextY, ccnt + 1 });
					visited[nextX][nextY] = true;
				}
				
			}
		}

		if (infectCnt != infectArea) return;
		else if (ret == -1) ret = maxTime;
		else ret = maxTime > ret ? ret : maxTime;
		return;
	}

	pick[cnt] = depth;
	solve(depth + 1, cnt + 1);
	pick[cnt] = 0;

	solve(depth + 1, cnt);

}

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2)
				vec.push_back({ i,j });
			else if (map[i][j] == 0) infectArea++;
		}
	}

	solve(0, 0);
	cout << ret << "\n";
	return 0;
}
```
위와 같은 코드가 된다.

#### 구현

- 연구소 2와 거의 비슷한 문제인데 좀 더 난이도가 높았던 부분은 **활성화 된 바이러스**와 **활성화 되지 않은 바이러스**의 차이이다.

- 일반적인 경우라면 비활성화 된 바이러스를 감염시킬 수 있는 땅과 같은 취급을 해도 상관없지만, 테스트케이스 7번 같은 경우에는 문제가 생긴다.

- 따라서 매 노드 마다 검사를 했는데 현재 큐의 위치가 감염시킨 땅일 경우에만 크기비교를 해서 갱신을 해주었다.

- 또한 처음 map을 입력 받을 때 감염시킬 수 있는 땅의 크기를 count해서, 큐를 돌리면서 감염시킬 수 있는 땅의 갯수가 이미 다 채워졌으면 나머지 부분은 continue로 넘겼다.

- 큐가 while 문을 탈출 했을 경우에 전부 감염이 되었는지에 대한 검사도 infectArea로 하였다.

- 어떤 노드를 선택 할 것인지에 대한 조합은 dfs로 구현하였다.
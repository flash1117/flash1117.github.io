---
layout: post
title:  "BOJ 2193"
date:   2019-10-18 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm DynamicProgramming 동적계획법
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int N, sum;
long long dp[91];

long long solve() {

	dp[1] = 1;
	dp[2] = 1; 
	dp[3] = 2; 
	dp[4] = 3; 
	dp[5] = 5; 

	long long sum = 7;
	for (int i = 6; i <= N; i++) {
		
		dp[i] = sum + 1;
		sum += dp[i - 1];
	}

	return dp[N];
}

int main() {

	cin >> N;
	cout << solve();

	return 0;
}
```

구현하고 보니 피보나치 처럼 풀면 되긴 하는데, 5자리라고 가정 했을 때, 5자리 일때 `10000` 인 수 하나와 넷째 자리의 수는 올 수가 없으니 3자리 이하의 경우의 수들만 세어서 다 더해주면 5번째 자리의 갯수를 알 수 있게된다.

이라고 간단하게 생각하다가 **맞왜틀!** 하고 있었는데, 한참 고민하던 도중 91자리이면 int 값의 범위를 한참 벗어난다는 것을 깨닫고 `int` 를 `long long` 으로 바꾸니 정답이였다.

**항상 극값을 체크 해보는 습관을 가지자!**
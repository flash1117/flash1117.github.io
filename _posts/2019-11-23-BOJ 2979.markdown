---
layout: post
title:  "BOJ 2979"
date:   2019-11-23 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Simulation 
cover:  "/assets/algorithm.png"
---

```
#include <iostream>

using namespace std;

int A, B, C, maxLen;
pair <int, int> a, b, c;
int sum[101];

void print() {

	for (int i = 1; i <= maxLen; i++) {
		cout << sum[i] << " ";
	}
	cout << endl;
}

int solve() {

	int ret = 0;

	for (int i = a.first; i < a.second; i++)
		sum[i]++;
	
	for (int i= b.first; i < b.second; i++)
		sum[i]++;

	for (int i = c.first; i < c.second; i++)
		sum[i]++;

	for (int i = 1; i < maxLen; i++)
	{
		if (sum[i] == 1) ret += sum[i] * A;
		else if (sum[i] == 2) ret += sum[i] * B;
		else if (sum[i] == 3) ret += sum[i] * C;
	}

	return ret;
}

int main() {

	int src, dst;
	cin >> A >> B >> C;
	cin >> a.first >> a.second;
	cin >> b.first >> b.second;
	cin >> c.first >> c.second;

	maxLen = (a.second > b.second) ? a.second:b.second ;
	maxLen = (maxLen > c.second) ? maxLen : c.second;

	cout << solve() << "\n";

	return 0;
}
```

#### 로직

- 각 시간대 별로 얼마나 주차가 되어있었는지 알기위해서 sum 배열을 통하여 해당 시간대에 차가 몇대가 있었는지 넣어주었다. 그리고 시간대 별로 차의 수 * 비용을 곱해서 결과를 출력하였다. 

- maxLen 은 100까지 가지 않아도 되는 경우의 수를 위해서 불필요한 연산 횟수를 줄이기 위해서 넣었다.

#### 실수한 부분

- 예를 들어 3 5 가 input 으로 들어왔으면 3분부터 5분까지 주차가 되어있었던 것이기 때문에 실질적으로 비용을 내야하는 시간은 2분이다. 그러나 처음구현을 할 때 이 부분을 고려하지 않아서 처음 테스트케이스를 넣었을 때 내가 원한 값과는 다른 값이 나왔었다.
---
layout: post
title:  "2020-01-14 TIL"
date:   2020-01-14 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL springboot
cover:  "/assets/TIL.png"
---

#### springboot

- `@RestController` : `@controller` 와 `@ResponseBody`를 합쳐놓은 역할을 수행한다. 어노테이션을 사용하면 스프링은 반환값이 Response Body 부분에 자동으로 바인딩 된다. 주로 스프링에서 RESTful Web Service를 만들 때 사용한다.

- `GetMapping` : Get방식으로 경로를 받는 매핑 어노테이션이다. value 값을 별도로 지정하지 않는 다면 기본값으로 `""(빈 값)`이 들어가게 된다.

    - annotation : class, method, field 등 프로그램 요소에 정보를 제공하는 기법. 타겟 요소를 제어, 관리, 명시하는 등의 다양한 기능을 할 수 있다.

- 스프링 이니셜라이저로 프로젝트를 생성하면 해당 프로젝트에 gradle이 자동으로 설치된다.
    - gradle wrapper 와 관련이 있다.

- `src/main/java` : java 소스 경로
- `src/test/java` : spring boot 테스트 코드 경로
- `src/main/resources/static` : static 한 파일들 (css, image, js) 등 default 경로
- `src/main/resources/templates` : thymeleaf, freemarker 및 기타 서버 사이트 템플릿 파일의 경로

- spring boot property file은 설정 관련 및 기타 정적인 값을 키값 형식으로 관리한다. 이 파일을 사용하면 기본 spring framework의 복잡한 xml 설정을 파일 하나로 설정이 가능하다.

- 가령 기본 8080번에서 80번으로 서버 포트 설정을 변경한다면 `src/main/resources/` 에 있는 application.properties 파일에 server.post 값을 80으로 입력하면 된다.

- 하지만 최근에는 표현의 한계로 YAML 파일을 더 많이 사용하게 되었다.
    - YAML을 설정하려면 SnakeYAML 라이브러리를 포함해야 하지만 스프링 부트 스타터에 SnakeYAML 라이브러리가 기본적으로 내장되어 있어서 별도의 설정 없이 곧바로 사용이 가능하다.

    - 만약 `application.properties` 와 `application.yml` 파일이 둘 다 생성되어 있다면 `application.yml`만 오버라이드 되어 적용된다.

- 실제 서비스에서 개발을 한다면 로컬 DB, 개발 DB, 운영 DB의 설정값이 모두 다르다. 이런 경우를 대비하여 프로파일에 따라 property가 다르게 설정해야 설정해야 한다. 이런 경우에는 `---`를 기준으로 설정값을 나누게 된다.

```
server:
    port: 80

---

spring:
    profiles: local
server:
    port: 8080

---

spring:
    profiles: dev
server:
    port: 8081
```

위와 같은 식이다.



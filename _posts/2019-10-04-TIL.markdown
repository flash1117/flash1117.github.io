---
layout: post
title:  "2019-10-04 TIL - TCP & UDP"
date:   2019-10-04 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Network TCP UDP
cover:  "/assets/TIL.png"
---

## TCP 의 3Way HandShake와 4Way HandShake

- TCP는 장치들 사이에 논리적인 접속을 성립(establish)하기 위하여 연결을 설정하여 신뢰성을 보장하는 연결형 서비스이다.

- 3Way handshake 란
    - TCP 통신을 이용하여 데이터를 전송하기 위해 네트워크 연결을 설정하는 과정

    - 양쪽 모두 데이터를 전송할 준비가 되었다는 것을 보장하고, 실제로 데이터 전달이 시작하기 전에 한 쪽이 다른 쪽이 준비되었다는 것을 알 수 있도록 한다.

    - 즉, TCP/IP 프로토콜을 이용해서 통신을 하는 응용프로그램이 데이터를 전송하기 전에 먼저 정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정을 의미한다.

        - A (client) 가 B (Server)에 연결을 요청하는 경우
            - **A -> B : SYN**

                - 접속 요청 프로세스 A가 연결 요청 메세지 전송 (SYN)
                - 송신자가 최초로 데이터를 전송할 때 Sequence Number를 임의의 랜덤 숫자로 지정하고, SYN 플래그 비트를 1로 설정한 세그먼트를 전송한다.
                - PORT 상태 B: Listen, A: Closed

            - **B -> A : SYN + ACK**

                - 접속 요청을 받은 프로세스 B가 요청을 수락했으며, 접속 요청 프로세스인 A도 포트를 열어 달라는 메세지 전송 (SYN + ACK)

                - 수신자는 Acknowledgement Number 필드를 (Sequence Num +1)로 지정하고, SYN 와 ACK 플래그 비트를 1로 설정한 segment 를 전송한다.

                - PORT 상태 B : SYN_RCV , A : Closed

            - **A -> B : ACK**

                - PORT 상태 B : SYN_RCV , A : Established

                - 마지막으로 접속 요청 프로세스 A가 수락 확인을 보내 연결을 맺음 (ACK)

                - 이때, 전송할 데이터가 있으면 이 단계에서 데이터를 전송할 수 있다

                - PORT 상태 B : Established , A : Established

- 4 Way HandShake

    - TCP의 연결을 해제 하는 과정

        - A (Client)가 B (Server)에 연결 해제를 요청

            - **A -> B : FIN**

                - 프로세스 A가 연결을 종료하겠다는 FIN 플래그를 전송

                - 프로세스 B가 FIN 플래그로 응답하기 전까지 연결을 계속 유지

            - **B -> A : ACK**

                - 프로세스 B는 일단 확인 메세지를 보내고 자신의 통신이 끝날때까지 기다린다. (TIME_WAIT 상태)

                - 수신자는 Acknowledgement Number 필드를 Sequence Num +1로 지정하고, ACK 플래그 비트를 1로 설정한 Segment 를 전송한다.

                - 그리고 자신이 전송할 데이터가 남아있다면 이어서 계속 전송한다.

            - **B -> A : FIN**

                - 프로세스 B가 통신이 끝났으면 연결 종료 요청에 합의한다는 의미로 A에게 FIN 플래그를 전송

            - **A -> B : ACK**

                - 프로세스 A는 확인했다는 메세지를 전송

- **포트 상태 정보**
    - Closed : 포트가 닫힌 상태
    - Listen : 포트가 열린 상태로 연결 요청 대기중
    - SYN_RCV : SYNC 요청을 받고 상대방의 응답을 기다리는 중
    - Established : 포트 연결 상태

- **플래그 정보**
    - TCP 헤더에는 Control bit (flag bit, 6bit)가 존재하며, 각각의 bit는 "URG-ACK-PSH-RST-SYN-FIN"의 의미를 가진다.

        - 즉 해당위치의 bit가 1이면 해당 패킷이 어떠한 내용을 담고 있는 패킷인지를 나타낸다.

    - SYN (Synchronize Sequence Number) / 000010

        - 연결 설정, Seq Num을 랜덤으로 설정하여 세션을 연결하는데 사용하며, 초기에 Seq Num을 전송한다.

    - ACK (Acknowledgement) / 010000

        - 응답 확인 . 즉, 패킷을 받았다는 것을 의미한다.

        - Acknowledgement Number Field 가 유효한지를 나타낸다.

        - 양단 프로세스가 쉬지않고 데이터를 전송한다고 가정하면 최초 연결 설정 과정에서 전송되는 첫번째 세그먼트를 제외한 모든 세그먼트의 ACK 비트는 1로 지정된다고 생각할 수 있다.

    - FIN (Finish) / 000001

        - 연결 해제, 세션 연결을 종료할 때 사용되며 더 이상 전송할 데이터가 없음을 의미한다.

Q. TCP의 연결 과정과 연결 종료 과정에서 단계가 차이나는 이유

    - Client 가 데이터 전송을 마쳤다고 해도 Server는 아직 보낼 데이터가 남아있을 수 있기 때문에
     일단 FIN에 대한 ACK 만 보내고 , 데이터를 모두 전송한 후에 자신도 FIN 메세지를 보내기 떄문

Q. 만약 Server 에서 FIN 플래그를 전송하기 전에 전송한 패킷이 Routing 지연이나 패킷 유실로 인한 재전송 등으로 인해 FIN 패킷보다 늦게 도착하는 상황이 발생하게 된다면 어떻게 될까?

    - 이러한 현상에 대비하여 Client 는 Server 로부터 FIN 플래그를 수신하더라도 
    일정시간동안 세션을 남겨놓고 잉여 패킷을 기다리는 과정을 거친다. (TIME_WAIT 과정)

Q. 초기 Seq Num인 ISN을 0부터 시작하지 않고 난수를 생성하여 설정하는 이유

    - Connection 을 맺을 때 사용하는 Port 는 유한범위 내에서 사용하고 시간이 지남에 따라 재사용되게 된다.
    따라서 두 통신 호스트가 과거에 사용된 포트 번호 쌍을 사용하는 가능성이 존재하게 되는데,
    서버측에서는 패킷의 SYN을 보고 패킷을 구분하게 되는데 난수가 아닌 순차적인 Num 이 전송된다면
    이전의 Connection 으로부터 오는 패킷으로 인식할 수 있다. 이런 문제의 발생 가능성을 줄이기 위해서 난수로 ISN을 설정한다.

###### Ref.
[Link] : (https://github.com/WeareSoft/tech-interview/blob/master/contents/network.md#osi-7%EA%B3%84%EC%B8%B5)

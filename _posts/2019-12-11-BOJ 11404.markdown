---
layout: post
title:  "BOJ 11404"
date:   2019-12-11 13:00:59
author: mollangzzang
categories: Algorithm
tags:	Algorithm Graph
cover:  "/assets/algorithm.png"
---

```
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef struct {
	int x, y, sum;
}pos;
int n, m;
int cost[100][100];

void solve() {

	for (int mid = 0; mid < n; mid++) {
		for (int i = 0; i < n; i++) {

			if (cost[i][mid] == 0) continue;

			for (int j = 0; j < n; j++) {

				if (cost[mid][j] == 0 || i == j) continue;

				if (cost[i][j] == 0) cost[i][j] = cost[i][mid] + cost[mid][j];
				else cost[i][j] = cost[i][j] > cost[i][mid] + cost[mid][j] ? cost[i][mid] + cost[mid][j] : cost[i][j];
			}
		}
	}

}

int main() {

	ios::sync_with_stdio(false);
	int src = 0, dst = 0, busCost = 0;
	cin >> n >> m;
	for (int i = 0; i < m; i++) {

		cin >> src >> dst >> busCost;
		if(cost[src-1][dst-1] == 0)
			cost[src - 1][dst - 1] = busCost;
		else
			cost[src - 1][dst - 1] = cost[src - 1][dst - 1] > busCost ? busCost : cost[src - 1][dst - 1];

	}
	solve();

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << cost[i][j] << " ";

		}
		cout << "\n";
	}
	

	return 0;
}

```

#### 구현

- 플로이드 와샬 알고리즘을 이용한 문제이다.

- 1 에서 5까지 간다고 가정했을 때, 직통으로 가는 것 보다 중간 노드를 경유해서 가는 것이 더 빠를 수 있다는 전제하에 구현하는 문제이다.

- 중간에 경유해서 갈 노드를 반복문 제일 바깥 부터 돌려야 한다. 그렇지 않으면 계속 해서 최신값으로 갱신되지 못한다.

문제를 풀다보면 플로이드 와샬 카테고리에 걸려있는데, 사실 다익스트라 알고리즘과 큰 차이를 못 느끼겠다.

~~플로이드 와샬 알고리즘은 구현할 때 이차원 배열을 선언해서 그냥 반복문을 돌리면서 풀면 풀리는 느낌이고 다익스트라 알고리즘은 vector 등을 이용해서 최단거리를 찾는다는 차이 정도..?~~

**플로이드 와샬 알고리즘**은 모든 정점에서 모든 정점까지의 거리를 알고 싶은 경우,

**다익스트라 알고리즘**은 한 정점에서 모든 정점까지의 거리를 알고 싶은 경우 사용하는 알고리즘이라고 한다.

크게 와닿지 않으니 조금 더 풀어봐야 할 것 같다.
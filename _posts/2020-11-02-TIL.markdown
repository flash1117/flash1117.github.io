---
layout: post
title: "정렬들 정리"
date: 2020-11-02 13:00:59
author: mollangzzang
categories: TIL
tags: TIL algorithm
cover: "/assets/TIL.png"
---

## 정렬

### 선택 정렬

> 가장 작은 것을 선택하여 제일 앞으로 보내는 알고리즘

선택정렬의 시간 복잡도는 O(N^2)

### 버블 정렬

> 가까이 있는 두 숫자끼리 비교하며, 더 작은 숫자를 앞으로 보내주는 알고리즘

정렬 알고리즘 중에서 구현은 가장 쉽지만, **가장 비효율적인 정렬방법**

버블정렬의 시간 복잡도는 O(N^2)

### 삽입 정렬

> 각 숫자를 적절한 위치에 삽입하는 방법

선택정렬, 버블정렬은 무조건 위치를 바꾸는 반면 삽입정렬은 필요한 경우에만 위치를 바꿈으로 앞선 정렬들에 비해서 효율적이다.

**거의 다 정렬이 된 상태**라면, **어떤 알고리즘 보다도 정렬속도가 빠르다.**

삽입정렬의 시간 복잡도는 O(N^2)

### 퀵 정렬

> pivot 을 기준으로 왼쪽과 오른쪽으로 크기를 정렬하는 방법

버블, 선택, 삽입정렬은 시간복잡도가 O(N^2) 임으로, 데이터의 갯수가 10만개만 넘어가도 사용하기가 어렵다. 그래서 대부분 퀵 정렬을 사용하고 있는데 **분할 정복법**을 사용한 알고리즘으로 **시간복잡도는 O(NlogN)** 이다.

다만 퀵정렬의 최악의 시간복잡도는 O(N^2) 이다. (pivot 값에 따라서 편향되게 분할할 가능성이 있다.)

### 병합 정렬

> 정확히 반절씩 나누었다가 합치는 순간에 정렬을 하는 방법

병합 정렬 또한 분할정복 방법을 통해 정렬을 하며, **시간복잡도**는 **O(NlogN)** 최악의 시간복잡도 또한 **O(NlogN)** 이다.

N의 크기를 가지는 것을 분할하는데 걸리는 시간 = logN
합치는 경우엔 이미 정렬된 상태라고 가정하기에 순서대로 넣어주는데 걸리는 시간 = N

반드시 NlogN의 시간을 보장해주기에 시간복잡도면에서 훌륭한 알고리즘이지만 기존의 데이터를 담을 추가적인 배열공간이 필요하다는 점에서 **메모리 비효율성**이 있다.

### 힙 정렬

> 힙을 통해 정렬하는 방법

- 힙이란?

최솟값이나 최댓값을 빠르게 찾아내기 위해 **완전 이진트리**를 기반으로 하는 트리

- 완전 이진트리란?

데이터가 **root 노드부터** 시작하여 **자식노드가** 왼쪽 오른쪽 노드로 **순서대로 들어가는 구조의 이진트리**

힙 정렬을 수행하기 위해서는 힙 생성 알고리즘(Heapify Algorithm)을 사용해야 한다.

- 힙 생성 알고리즘이란?

특정한 노드의 두 자식 중에서 더 큰 자식과 자신의 위치를 바꾸는 알고리즘

힙정렬은 병합정렬과는 다르게 추가적인 메모리 공간이 필요하지 않고 항상 O(NlogN) 을 보장한다. 따라서 이론적으로 퀵, 병합정렬보다 우위에 있으나 평균적으로 퀵 정렬이 더 빠른 모습을 보여 힙 정렬이 자주 사용되지는 않는다.

### 계수 정렬 (Counting Sort)

> 범위 조건이 있는 경우에 한해 굉장히 빠른 알고리즘

크기를 기준으로 세는 알고리즘이기 때문에 시간 복잡도는 O(N) 이다.

데이터의 크기 범위를 메모리 상에 표현할 수만 있다면 굉장히 빠른 속도로 정렬을 수행할 수 있다.

</br>

아래는 구현한 정렬들 (근데 백준 2751번에서 퀵 정렬이 시간초과가 나왔다. NlogN을 써야하나..?)

```
#include <iostream>
#include <cmath>

using namespace std;

const int ARRAY_SIZE = 100;

void arraySwap(int* a, int* b) {

	int temp = *a;
	*a = *b;
	*b = temp;

}

void setArray(int *ary) {

	for (int i = 0; i < ARRAY_SIZE; i++) {
		ary[i] = rand() % 100;
	}

}

void printArray(int *ary) {
	for (int i = 0; i < ARRAY_SIZE; i++) {
		cout << ary[i] << " ";
	}
	cout << "\n";
}

void insertSort(int* ary) {

	for (int i = 0; i < ARRAY_SIZE; i++) {

		for (int j = i; j > 0; j--) {

			if (ary[j - 1] > ary[j]) {
				arraySwap(&ary[j - 1], &ary[j]);
			}
			else break;

		}
	}

}

void quickSort(int *ary, int start ,int end) {

	if (start >= end) return;

	int i = start+1, j = end;
	int pivotIndex = start;

	while (i <= j) {

		while (i <= end && ary[i] <= ary[pivotIndex]) {
			i++;
		}

		while (j > start && ary[j] >= ary[pivotIndex]) {

			j--;
		}

		if (i > j) {
			arraySwap(&ary[j], &ary[pivotIndex]);
		}
		else {
			arraySwap(&ary[i], &ary[j]);
		}

	}

	quickSort(ary, start, j - 1);
	quickSort(ary, j + 1, end);

}

void bubbleSort(int *ary) {

	for (int i = 0; i < ARRAY_SIZE; i++) {
		bool change = false;

		for (int j = 0; j < ARRAY_SIZE - i; j++) {

			if (ary[j] < ary[j - 1]) {
				change = true;
				arraySwap(&ary[j], &ary[j - 1]);
			}
		}

		if (change == false) {
			cout << i << "\n";
			break;
		}
	}


}

void merge(int *tempArray, int *ary, int start , int end) {
	int mid = (start + end) / 2;
	int i = start;
	int j = mid+1;
	int index = start;

	while (i <= mid && j <= end) {

		if (ary[i] < ary[j]) {
			tempArray[index++] = ary[i++];

		}
		else {
			tempArray[index++] = ary[j++];
		}

	}

	if (i > mid) {

		for (int k = j; k <= end; k++) {
			tempArray[index++] = ary[k];
		}
	}
	else {

		for (int k = i; k <= mid; k++) {
			tempArray[index++] = ary[k];
		}

	}

	for (int k = start; k <= end; k++) {
		ary[k] = tempArray[k];
	}
	return;
}

void mergeSort(int *tempArray, int* ary, int start, int end) {

	if (start < end) {

		int mid = (start + end) / 2;
		mergeSort(tempArray, ary,start, mid);
		mergeSort(tempArray, ary, mid + 1, end);
		merge(tempArray, ary, start, end);
	}

}

int main() {

	int ary[ARRAY_SIZE];
	int tempArray[ARRAY_SIZE];

	setArray(ary);
	cout << "\n";
	cout << "---------------------before--------------------- \n";
	printArray(ary);

//	bubbleSort(ary);
//	quickSort(ary, 0, ARRAY_SIZE - 1);
//	insertSort(ary);
	mergeSort(tempArray, ary, 0, ARRAY_SIZE - 1);
	cout << "\n";
	cout << "---------------------after--------------------- \n";
	printArray(ary);


	return 0;
}
```

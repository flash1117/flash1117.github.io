---
layout: post
title:  "2019-10-06 TIL - HTTP"
date:   2019-10-06 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL Network HTTP
cover:  "/assets/TIL.png"
---

## HTTP Protocol

- HyperText Transfer Protocol

- 웹 상에서 클라이언트와 서버간에 요청/응답(request/response) 으로 정보를 주고 받을 수 있는 프로토콜

- 주로 HTML 문서를 주고 받는데 사용된다.

- TCP 와 UDP를 사용하며, 80번 포트를 사용한다.
    - **비연결(Connectionless)**
        - 클라이언트가 요청을 서버에 보내고 서버가 적절한 응답을 클라이언트에 보내면 바로 연결이 끊긴다.
    - **무상태(Stateless)**
        - 연결을 끊는 순간 클라이언트와 서버의 통신은 끝나며 상태 정보를 유지하지 않는다.

## HTTPS Protocol

- HyperText Transfer Protocol over Secure Socket Layer
    - 또는 HTTP over TLS , HTTP over SSL, HTTP Secure

- HTTPS의 기본 TCP/IP 포트로 443 번 포트를 사용한다. 

- HTTPS는 소켓 통신에서 일반 텍스트를 이용하는 대신에, 웹 상에서 정보를 암호화하는 SSL이나 TLS 프로토콜을 통해 세션 데이터를 암호화한다.

    - **TLS(Transport Layer Security)** 프로토콜은 **SSL(Secure Socket Layer)** 프로토콜에서 발전한 것이다.

    - 두 프로토콜의 주요 목표는 기밀성, 데이터 무결성, ID 및 디지털 인증서를 사용한 인증을 제공하는 것이다.
    
    - 따라서 데이터의 적절한 보호를 보장하는데, 보호의 수준은 웹 브라우저에서의 구현 정확도와 서버 소프트웨어, 지원하는 암호화 알고리즘에 달려있다.

    - 금융 정보나 메일 등 중요한 정보를 주고 받는 것은 HTTPS를 사용하고 아무나 봐도 상관없는 페이지는 HTTP를 사용한다.

## HTTPS 필요성

- 클라이언트인 웹 브라우저가 서버에 HTTP를 통해 웹 페이지나 이미지 정보를 요청하면 서버는 이 요청에 응답하여 요구하는 정보를 제공하게 된다.

- HTML은 텍스트이고, HTTP를 통해 이런 텍스트 정보를 교환하는 것이다.
    
- 이때 주고받는 텍스트 정보에 주민등록번호나 비밀번호와 같이 민감한 정보가 포함된 상태에서 네트워크 상에서 중간에 제 3자가 정보를 가로챈다면 보안 상 큰 문제가 발생하게 된다.

- 즉, 중간에 정보를 볼 수 없도록 주고 받는 정보를 암호화 하는 방법인 HTTPS를 사용하게 되는 것이다.

## HTTPS 원리

- 공개키 알고리즘 방식

- 암호화, 복호화 시킬 수 있는 서로 다른키를 이용한 암호화 방법
    - 공개키 : 공개키 저장소에 등록 되어 있는 모두에게 공개된 키.
    - 개인키 : 개인에게만 공개, 클라이언트-서버 구조에서는 서버가 가지고 있는 비공개키

- 클라이언트 -> 서버
    - 사용자의 데이터를 공개키로 암호화
    - 서버로 전송 (데이터를 가로채도 개인키가 없으므로 복호화 불가능)
    - 서버의 개인키를 통해 복호화하여 요청 처리

## HTTPS 장단점

 - 장점
     - 네트워크 상에서 열람, 수정이 불가능함으로 안전하다.

- 단점
    - 암호화를 하는 과정에 웹 서버에 부하를 주게 된다.

    - HTTPS는 설치 및 인증서를 유지하는데 추가적인 비용이 발생한다.

    - HTTP 에 비해 느리다.

     - 인터넷 연결이 끊긴 후 재인증 시간이 소요된다.
        - HTTP는 비연결형임으로 웹 페이지를 보는 중 인터넷 연결이 끊겼다가 다시 연결 되어도 페이지를 계속 볼 수 있다.

        - 그러나 HTTPS의 경우 Socket (데이터를 주고 받는 경로) 자체에서 인증을 하기 때문에 인터넷 연결이 끊기면 소켓도 끊어져서 HTTPS 인증이 다시 필요하게 된다.

## HTTP 요청 응답 헤더

- **HTTP 헤더 내 일반 헤더 항목**

    - 요청 및 응답 메세지 모두에서 사용가능한 일반 목적의 헤더 항목

    - 주요 항목
        - **Date** : HTTP 메세지를 생성한 일시 (RFC 1123 에서 규정)
            -`Date: Sun, 6 Oct 2019 22:00:00 GMT`
        - **Connection** : 클라이언트와 서버 간 연결에 대한 옵션 설정(다소 모호한 복잡성 있음)
            - `Connection: close` : 현재 HTTP 메세지 직후에 TCP 접속을 끊는 다는 것을 알림
            - `Connection : Keep-Alive` : 현재 TCP 커넥션을 유지
        - **Cache-Control**
        - **Pargma**
        - **Trailer**
    
    - **Entity in HTTP Header / Entity Header** 항목
        - 요청 및 응답 메세지 모두에서 사용 가능한 Entity (콘텐츠, 본문, 리소스 등)에 대한 설명 헤더

        - 주요 항목들
            - **Content-Type** : 해당 개체에 포함되는 미디어 타입 정보
                - 컨텐츠의 타입(MIME 미디어 타입) 및 문자 인코딩 방식 `EUC-KR, UTF-8`을 지정
                - 타입 및 서브타입 으로 구성
                - `Content type : text/html; charset-latin-1` : 해당 개체가 html 으로 표현된 텍스트 문서이고 iso-latin-1 문자 인코딩 방식으로 표현됨
            - **Content-Language** : 해당 개체와 가장 잘 어울리는 사용자 언어 (자연언어)

            - **Content-Encoding** : 해당 개체 데이터의 압축 방식
                - `Content-Encoding : gzip, deflate`
                - 만일 압축이 시행되었다면, Content-Encoding 및 Content-Length 2개 항목을 토대로 압축 해제 가능
                
            - **Content-Length** : 전달 되는 해당 개체의 바이트 길이 또는 크기 (10진수)
                - 응답 메세지 Body의 길이를 지정하거나, 특정 지정된 개체의 길이를 지정함

            - **Content-Location** : 해당 개체가 실제 어디에 위치하는 가를 알려줌
            
            - **Content-Disposition** : 응답 Body를 브라우저가 어떻게 표시해야 할지 알려주는 헤더
                - inline인 경우 웹페이지 화면에 표시되고, attachment 인 경우 다운로드
                - `Content-Disposition: inline`
                - ```Content-Disposition: attachment; filename = 'filename.csv'```
                - 다운로드 되길 원하는 파일은 attachment로 값을 설정하고, filename 옵션으로 파일 명까지 지정해 줄 수 있다.
                - 파일용 서버인 경우 이 태그를 자주 사용
            - **Content-Security-Policy**: 다른 외부 파일들을 불러오는 경우, 차단할 소스와 불러올 소스를 명시.
                -XSS 공격에 대한 방어 가능 (허용한 외부 소스만 지정 가능)
                - `Content-Security-Policy: default-src https: ` -> https를 통해서만 파일을 가져옴
                - `Content-Security-Policy: default-src 'self'` -> 자신의 도메인의 파일들만 가져옴
                - `Content-Security-Policy: default-src 'none'` -> 파일을 가져 올 수 없음.
            - **Location** : 리소스가 redirect 된 때 이동된 주소 또는 새로 생성된 리소스 주소

                - 300번대 응답이나 201 Created 응답일 경우 어느 페이지로 이동할지 알려주는 헤더

                - 새로 생성된 경우에 HTTP 상태 코드 `201 Created` 가 반환됨

                - `HTTP/1.1 302 Found Location: /`
                    - 이런 응답이 왔다면 브라우저는 `/` 주소로 redirect 한다.
            
            - **Last-Modified** : 리소스를 마지막으로 갱신한 일시

    - HTTP 헤더 내 요청 헤더 (Request Header) 항목
        - 요청 헤더는 HTTP 요청 메세지 안에서만 나타나며 가장 방대하다.

        - 주요 항목들

            - **Host** : 요청하는 호스트에 대한 호스트명 및 포트번호 (필수)
                - Host 필드에 도메인명 및 호스트명 모두를 포함한 전체 URL(FQDN) 지정 필요
                - 이에 따라 동일 IP 주소를 갖는 단일 서버에 여러 사이트가 구축 가능하다.
            - **User-Agent**: 클라이언트 소프트웨어(브라우저,OS) 명칭 및 버전 정보
            - **From**: 클라이언트 사용자 메일 주소
                - 주로 검색엔진 웹 로봇의 연락처 메일 주소를 나타냄
                - 때로는, 이 연락처 메일 주소를 **User-Agent** 항목에 두는 경우도 있다.
            - **Cookie** : 서버에 의해 Set-Cookie로 클라이언트에게 설정된 쿠키 정보
            - **Referer** : 바로 직전에 머물렀던 웹 링크 주소
            - **If-Modified-Since** : 제시한 일시 이후로만 변경된 리소스를 취득 요청
            - **Authorization** : 인증 토큰(JWT/Bearer 토큰)을 서버로 보낼 때 사용하는 헤더
                - 토큰의 종류 (Basic, Bearer 등) + 실제 토큰 문자를 전송
            - **Origin**
                - 서버로 POST 요청을 보낼 때, 요청이 어느 주소에서 시작되었는지 나타냄
                - 여기서 요청을 보낸 주소와 받는 주소가 다르면 CORS 에러가 발생
                - 응답 헤더의 **Access-Control-Allow-Origin**와 관련이 있다.

        - 다음 4개는 주로 HTTP 메세지 Body의 속성 또는 내용 협상용 항목들이다.

            - **Accept** : 클라이언트 자신이 원하는 미디어 타입 및 우선순위를 알림
                - `Accept: */*` -> 어떤 미디어 타입도 가능
                - `Accept: image/*` -> 모든 이미지 유형
            - **Accept-Charset** : 클라이언트 자신이 원하는 문자 집합
            - **Accept-Encoding** : 클라이언트 자신이 원하는 문자 인코딩 방식
            - **Accept-Language** : 클라이언트 자신이 원하는 가능한 언어
            - 각각 HTTP Entity Header 항목 중 `Content-Type, Content-Type charset-xxx, Content-Encoding, Content-Language` 와 1대1로 대응됨

    - HTTP 헤더 내 응답 헤더 (Response Header) 항목

        - 특정 유형의 HTTP 요청이나 특정 HTTP 헤더를 수신 했을 때, 이에 응답한다.

        - 주요 항목들
            - **Server** : 서버 소프트웨어 정보
            - **Accept-Range**
            - **Set-Cookie** : 서버 측에서 클라이언트에게 세션 쿠키 정보를 설정 (RFC 2965에서 규정)
            - **Expires** : 리소스가 지정된 일시 까지 Cache로써 유효함
            - **Age** : 캐시 응답. amx-age 시간 내에서 얼마나 흘렀는지 알려줌 (초 단위)
            - **ETag** : HTTP 컨텐츠가 바뀌었는지를 검사 할 수 있는 태그
            - **Proxy-authenticate**
            - **Allow** : 해당 Entity에 대해 서버 측에서 지원 가능한 HTTP method의 리스트를 나타냄
                - 간혹, HTTP 요청 메세지의 HTTP method OPTIONS에 대한 응답용 항목
                    - OPTIONS : 웹서버 측 제공 HTTP method 에 대한 질의
                - `Allow : GET , Head` -> 웹 서버측이 제공 가능한 HTTP method는 GET 과 HEAD 뿐임을 알림 (405 Method Not Allowed Error 와 함께)
            - **Access-Control-Allow-Origin** : 요청을 보내는 프론트 주소와 받는 백엔드 주소가 다르면 CORS Error 발생
                - 서버에서 이 헤더에 프론트 주소를 적어 주어야 에러가 나지 않는다.
                - `Access-Control-Allow-Origin: www.zerocho.com`
                    - 프로토콜, 서브도메인, 도메인, 포트 중 하나만 달라도 CORS Error
                - `Access-Control-Allow-Origin: *`
                    - 만약 주소를 하나하나 지정하기가 싫다면 `*` 로 모든 주소에 CORS 요청을 허용하면 되지만, 그만큼 보안이 취약해 진다.
                - 유사한 헤더로 `Access-Control-Request-Method, Access-Control-Request-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Headers` 등이 있다.



#### XSS 공격
- XSS 공격이란, Cross site Scripting 로써 가장 기초적인 취약점 공격 방법의 일종이다. 악의적인 사용자가 공격대상이 된 사이트에 스크립트를 넣는 기법인데, 공격에 성공한다면 사이트에 접속한 사용자는 삽입된 코드를 실행하게 되며 의도치 않는 행동을 수행해서 쿠키나 세션토큰 등 민감한 정보를 탈취당하게 된다.

- 여러 사용자가 접근 가능한 게시판 등에 코드를 삽입하는 경우가 많으며 메일과 같은 매체를 통하여 전파가 되기도 한다.

#### Redirect

- Web Container 은 sendRedirect() method가 호출되어 redirect 명령이 들어오면 웹 브라우저에게 다른 페이지로 이동하라고 명령한다. 이 명령에는 브라우저가 웹 컨테이너의 응답을 받은 후 다시 요청을 보낼 URL을 포함한다. 그러면 웹 브라우저는 URL을 지시된 주소로 바꾸고 그 주소로 이동한다. 다른 웹 컨테이너에 있는 주소로 이동이 가능하며 새로운 페이지에서는 Request 와 Response 객체가 새롭게 생성된다.

- Redirect는 추가적으로 발생한 처리 때문에 Fowarding 보다 느리다. 중요한 것은 마지막으로 수행하는 작업은 새로운 요청에 의한 것이고, 이것은 클라이언트가 알고 있기 때문에 브라우저창의 주소가 처음 요청한 주소가 아닌 다시 요청을 보낼 새로운 주소값으로 변하게 된다.

#### FQDN
- SSL 인증서 신청시 , CN (일반이름) 이나 멀티도메인의 추가도메인에 포함되는 도메인은 FQDN 형식으로 입력을 해야한다.

- FQDN 이란 , Fully Qualified Domain Name 의 약자로 번역하자면 전체 주소 도메인 이름 정도로 할 수 있다.

- FQDN은 https://**xxx.xxx.xxx**/xxx.. 부분 중 강조가 된 부분을 말한다.

- 번거롭지만 이렇게 다르게 FQDN이란 이름을 정의한 이유는 www.google.com 과 google.com 은 다르기 때문이다. 만약 소유한 도메인 중 SSL 인증서를 적용해야 하는데 내가 가진 도메인은 mail.domain.com 인데, domain.com 으로 된 인증서를 발급 받으면 이만큼 난감하기 때문이다.

#### CORS Error

- **CORS (Cross Origin Resource Sharing)** 란

    - 웹 서버에게 보안 cross-domain 데이터 전송을 활성화하는 cross-domain 접근 제어권을 부여한다.

- 배경

    - 처음 전송되는 리소스의 도메인과 다른 도메인으로부터 리소스가 요청될 경우 해당 리소스는 cross-origin HTTP 요청에 의해 요청된다.

    - 보안 상의 이유로, 브라우저들은 스크립트 내에서 초기화되는 cross-origin HTTP 요청을 제한한다.

        - 예를 들면, XML Http Request 는 same-origin 정책을 따르기에 XML Http Request을 사용하는 웹 애플리케이션은 자신과 동일한 도메인으로 HTTP 요청을 보내는 것만 가능했다.

        - 웹 애플리케이션을 개선시키기 위해, 개발자들은 브라우저 벤더사들에게 XML Http Request 가 cross-domain 요청을 할 수 있도록 요청했고 이에 따라 CORS가 생겼다.

#### RFC 2965

##### Ref.
[Link] : (https://github.com/WeareSoft/tech-interview/blob/master/contents/network.md#osi-7%EA%B3%84%EC%B8%B5)
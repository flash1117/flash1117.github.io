---
layout: post
title: "SOLID 원칙"
date: 2020-11-02 13:00:59
author: mollangzzang
categories: TIL
tags: TIL
cover: "/assets/TIL.png"
---

## SRP (단일책임 원칙 : Single Responsibility Principle)

> 작성된 클래스는 하나의 기능만 가지며 클래스가 제공하는 모든 서비스는 그 하나의 책임을 수행하는데 집중되어 있어야 한다.

## SRP의 특징

- SRP 원리를 적용하면 책임영역이 확실해지기에, 책임의 변경에서 다른 책임의 변경으로의 연쇄작용에서 자유로울 수 있다.
- 책임을 적절히 분배함으로써 코드의 가독성 향상, 유지보수가 용이하다.
- 실무의 프로세스는 복잡하기 때문에 도메인에 대한 이해가 부족하면 SRP를 적용시키기가 쉽지 않다.

## SRP 적용방법

- 여러 원인에 의한 변경 (Divergent change) : Extract Class를 통해 혼재된 각 책임을 각각의 개별 클래스로 분할하여 클래스 당 하나의 책임만을 맡도록 하는 것

  - 책임만 분리하는 것이 아니라 분리된 두 클래스간의 관계의 복잡도를 줄이도록 설계해야 한다.

- 산탄총 수술 (Shotgun surgery) : Move Field 와 Move Method를 통해 책임을 기존의 어떤 클래스로 모으거나, 이럴만한 클래스가 없다면 새로 생성하여 해결한다. (응집성을 높이는 작업)

## OCP (개방폐쇄 원칙 : Open Close Principle)

> 요구사항의 변경이나 추가사항이 발생하더라도, 기존 구성요소는 수정이 일어나지 않아야 하며, 기존 구성요소를 쉽게 확장해서 재사용할 수 있어야한다.

OCP를 가능하게 하는 주요한 메커니즘은 **추상화**와 **다형성**이다. OCP는 객체지향의 장점을 극대화하는 중요한 원리

## OCP 적용방법

- 변경 or 확장 할 것과 변경하지 않을 것을 명확히 구분한다.
- 두 모듈이 만나는 지점에 인터페이스를 정의한다.
- 구현에 의존하기보다 정의한 인터페이스에 의존하도록 코드를 작성한다.

## OCP 적용이슈

- 변경되는 것과 되지 않는 모듈을 분리하는 과정에서 크기 조절에 실패하면 관계가 더 복잡해질 가능성이 있다.
- 인터페이스는 가능하면 변경되어선 안된다. 따라서 인터페이스를 정의할 때 여러 경우의 수에 대한 고려와 예측이 필요하다.
- 인터페이스 설계에서 적당한 추상화 레벨을 선택해야 한다.
  - 추상화란, 다른 모든 종류의 객체로부터 식별될 수 있는 객체의 본질적인 특징

## LSP (리스코브 치환 원칙 : The Liskov Substitution Principle)

> 서브 타입은 언제나 기반 타입과 호환될 수 있어야한다.

상속은 구현상속(extends) , 인터페이스 상속(implements) 이든 궁극적으로 다형성을 통한 확장성 획득을 목표로 한다. LSP원리도 역시 서브 클래스가 확장에 대한 인터페이스를 준수해야함을 의미한다.

다형성과 확장성을 극대화하려면 하위 클래스를 사용하는 것보다는 상위의 클래스(인터페이스)를 사용하는 것이 더 좋다. 일반적으로 선언은 기반 클래스로 생성은 구체 클래스로 대입하는 방법을 사용한다.

만약 생성시점에서 구체 클래스를 노출시키기가 싫다면 생성 부분에 Abstract Factory 패턴을 사용하여 유연성을 높일 수 있다. 상속을 통한 재사용성은 기반 클래스와 서브 클래스 사이에 IS-A 관계가 있을 경우로만 제한되어야 한다. 그 외의 경우 합성을 이용한 재사용을 해야한다.

최종적으로 LSP를 바탕으로 하는 OCP는 확장하는 부분에 다형성을 제공해 변화에 열려있는 프로그램을 만들 수 있도록 한다.

## LSP 적용방법

- 두 개체가 똑같은 일을 한다면 둘을 하나의 클래스로 표현하고 이들을 구분할 수 있는 필드를 둔다.
- 똑같은 연산을 제공하지만, 이들을 약간씩 다르게 한다면 공통의 인터페이스를 만들고 차이를 구현한다. (인터페이스 상속)
- 공통된 연산이 없다면 완전 별개의 2개의 클래스를 생성한다.
- 만약 두 개체가 하는 일에 추가적으로 무언가를 더한다면 구현 상속을 사용한다.

## ISP (인터페이스 분리 원칙 : Interface Segregation Principle)

> 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.

> 하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스가 좋다 라고 정의할 수도 있다.

**SRP**가 **클래스의 단일책임원칙**을 강조한다면 **ISP**는 **인터페이스의 단일책임**을 강조한다.

## ISP 적용방법

- 클래스 인터페이스를 통한 분리
  - 클래스의 상속을 이용하여 인터페이스를 나눌 수 있다. 이와 같은 구조는 클라이언트에게 변화를 주지 않을 뿐 아니라 인터페이스를 분리하는 효과를 갖는다. 하지만 거의 모든 객체지향언어에서 상속을 이용한 확장은 상속받는 클래스의 성격을 디자인 시점에 규정한다. 따라서 인터페이스를 상속받는 순간 인터페이스에 예속되어 제공하는 서비스의 성격이 제한된다.
- 객체 인터페이스를 통한 분리
  - 위임(Delegation)을 이용하여 인터페이스를 나눌 수 있다. 만약 다른 클래스의 기능을 사용해야 하지만 그 기능을 변경하고 싶지 않다면, 상속 대신 위임을 사용합니다.

## DIP (의존성 역전의 법칙 : Dependency Inversion Principle)

> 구조적 디자인에서 발생한 하위 레벨 모듈의 변경이 상위 레벨 모듈의 변경을 요구하는 위계관계를 끊는 의미의 역전

### Ref.

http://www.nextree.co.kr/p6960/

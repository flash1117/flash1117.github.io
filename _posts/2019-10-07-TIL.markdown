---
layout: post
title:  "2019-10-07 TIL - C++"
date:   2019-10-07 13:00:59
author: mollangzzang
categories: TIL
tags:	TIL C++
cover:  "/assets/TIL.png"
---

### <string> 이란,

보통 C 에서는 입출력 함수로 `#include <stdio.h>` C++ 에서는 `#include <iostream>` 으로 시작하게 된다.

이렇게 약간의 차이가 있는 언어지만, `string` 에 관해서는 거의 비슷하다. `<string.h>` 와 `<cstring>` 은 거의 차이가 없다고 봐도 무방한데, C 와 비슷하다는 것은 그만큼 번거롭고 직관성이 떨어진다는 뜻과 같다.

예를 들어 우리는 문자를 비교 할 경우 `strcmp` , 문자열을 합칠 때 `strcat` 으로 매개변수를 정확하게 전달해야 하는데 최근 자연어에 더 가까운 언어들은 "hello" + "world!" 같은 식으로 훨씬 직관적으로 가능하다.

이러한 번거로움을 해결하기 위한 라이브러리가 std::string. 즉, string 라이브러리이다.

### <string> 차이점

1. `<string>` 에는 기존의 배열 끝에 붙던 **널 포인터**를 신경 쓸 필요가 없어졌다.

2. 배열의 접근 방법이 약간 달라졌다. 기존의 배열에 접근 할때 처럼 대괄호를 사용해도 가능하지만,`str.at(0)` 과 같이 0번째 위치에 해당하는 문자를 반환하고 만약에 해당위치가 string의 범위를 벗어나게되면 예외를 return 하게 된다.

3. vector 에서나 가능하던 맨 앞 인자와 맨 뒤의 인자를 얻을 수 있다는 것이다. C++ 11 부터 가능하며, `str.front()` 와 `str.back()` 으로 문자를 return 받게 된다.

4. string 의 사이즈와 길이를 반환하는 함수 들인데, 하고자 하는 역할은 같다. `str.size()` 와 `str.length()` 와 같은 식으로 사용한다.

5. string 객체에 할당된 메모리의 크기를 `str.capacity()` 를 통하여 직접 알 수도 있다.

6. `str.resize(n)` 을 통하여 사이즈를 줄이거나 늘리는게 가능하다. 줄이는 경우 줄이는 만큼 사이에 들어가 있던 string은 버리게 된다. 늘이는 경우에는 빈칸이 차게 되고, `str.resize(100, 'x')` 와 같이 남는칸들을 무엇으로 채울지 결정하는 것도 가능하다.

7. `str.clear()` 로 스트링에 들어있는 문자열을 지우는 함수이다. size 와 length 는 0으로 되며 할당된 메모리는 남아있게 된다.

8. `str.empty()` string 이 비어있는지 확인하는 함수이다.

9. 파일을 읽을 때 유용한 함수로, 곧 n 만큼의 string이 추가 될 꺼니까 그에 맞는 capacity를 미리 할당해주는 역할을 해주는데, `str.reserve(n)` 과 같은 식으로 사용한다. capacity가 꽉찼을 때 계속해서 호출하는 사태를 예방해서 성능저하를 예방하게 된다.